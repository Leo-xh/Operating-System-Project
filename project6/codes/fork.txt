
.\user\testFork.tmp:     file format pei-i386


Disassembly of section .text:

00000000 <.text>:
   0:	66 8c c8             	mov    eax,cs
   3:	8e d8                	mov    ds,ax
   5:	8e c0                	mov    es,ax
   7:	8e d0                	mov    ss,ax
   9:	e9 45 01             	jmp    151 <__main>

0000000c <_int2str>:
int2str():
D:\OneDrive\Study\Operating Systems\实验\project6\codes/./user/stdio.h:4
void printSentence(char * message, int x, int y, int len, int color);

void int2str(int org, char * str)
{
   c:	66 55                	push   ebp
   e:	66 89 e5             	mov    ebp,esp
  11:	66 53                	push   ebx
  13:	66 83 ec 0c          	sub    esp,0xc
D:\OneDrive\Study\Operating Systems\实验\project6\codes/./user/stdio.h:5
	int num = 0;
  17:	67 66 c7 45 f8 00 00 	mov    DWORD PTR [ebp-0x8],0x0
  1e:	00 00 
D:\OneDrive\Study\Operating Systems\实验\project6\codes/./user/stdio.h:6
	int cp = org;
  20:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
  25:	67 66 89 45 f4       	mov    DWORD PTR [ebp-0xc],eax
D:\OneDrive\Study\Operating Systems\实验\project6\codes/./user/stdio.h:7
	while(cp != 0)
  2a:	eb 29                	jmp    55 <_int2str+0x49>
D:\OneDrive\Study\Operating Systems\实验\project6\codes/./user/stdio.h:9
	{
		cp /= 10;
  2c:	67 66 8b 4d f4       	mov    ecx,DWORD PTR [ebp-0xc]
  31:	66 b8 67 66 66 66    	mov    eax,0x66666667
  37:	66 f7 e9             	imul   ecx
  3a:	66 c1 fa 02          	sar    edx,0x2
  3e:	66 89 c8             	mov    eax,ecx
  41:	66 c1 f8 1f          	sar    eax,0x1f
  45:	66 29 c2             	sub    edx,eax
  48:	66 89 d0             	mov    eax,edx
  4b:	67 66 89 45 f4       	mov    DWORD PTR [ebp-0xc],eax
D:\OneDrive\Study\Operating Systems\实验\project6\codes/./user/stdio.h:10
		++num;
  50:	67 66 ff 45 f8       	inc    DWORD PTR [ebp-0x8]
D:\OneDrive\Study\Operating Systems\实验\project6\codes/./user/stdio.h:7
	while(cp != 0)
  55:	67 66 83 7d f4 00    	cmp    DWORD PTR [ebp-0xc],0x0
  5b:	75 cf                	jne    2c <_int2str+0x20>
D:\OneDrive\Study\Operating Systems\实验\project6\codes/./user/stdio.h:12
	}
	if(org == 0)
  5d:	67 66 83 7d 08 00    	cmp    DWORD PTR [ebp+0x8],0x0
  63:	75 09                	jne    6e <_int2str+0x62>
D:\OneDrive\Study\Operating Systems\实验\project6\codes/./user/stdio.h:13
		num = 1;
  65:	67 66 c7 45 f8 01 00 	mov    DWORD PTR [ebp-0x8],0x1
  6c:	00 00 
D:\OneDrive\Study\Operating Systems\实验\project6\codes/./user/stdio.h:14
	str[num--] = '\0';
  6e:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
  73:	67 66 8d 50 ff       	lea    edx,[eax-0x1]
  78:	67 66 89 55 f8       	mov    DWORD PTR [ebp-0x8],edx
  7d:	66 89 c2             	mov    edx,eax
  80:	67 66 8b 45 0c       	mov    eax,DWORD PTR [ebp+0xc]
  85:	66 01 d0             	add    eax,edx
  88:	67 c6 00 00          	mov    BYTE PTR [eax],0x0
D:\OneDrive\Study\Operating Systems\实验\project6\codes/./user/stdio.h:15
	for(int i = num; i >= 0; --i)
  8c:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
  91:	67 66 89 45 f0       	mov    DWORD PTR [ebp-0x10],eax
  96:	eb 70                	jmp    108 <_int2str+0xfc>
D:\OneDrive\Study\Operating Systems\实验\project6\codes/./user/stdio.h:17
	{
		str[i] = org % 10 + 48;
  98:	67 66 8b 55 f0       	mov    edx,DWORD PTR [ebp-0x10]
  9d:	67 66 8b 45 0c       	mov    eax,DWORD PTR [ebp+0xc]
  a2:	67 66 8d 1c 02       	lea    ebx,[edx+eax*1]
  a7:	67 66 8b 4d 08       	mov    ecx,DWORD PTR [ebp+0x8]
  ac:	66 b8 67 66 66 66    	mov    eax,0x66666667
  b2:	66 f7 e9             	imul   ecx
  b5:	66 c1 fa 02          	sar    edx,0x2
  b9:	66 89 c8             	mov    eax,ecx
  bc:	66 c1 f8 1f          	sar    eax,0x1f
  c0:	66 29 c2             	sub    edx,eax
  c3:	66 89 d0             	mov    eax,edx
  c6:	66 c1 e0 02          	shl    eax,0x2
  ca:	66 01 d0             	add    eax,edx
  cd:	66 01 c0             	add    eax,eax
  d0:	66 29 c1             	sub    ecx,eax
  d3:	66 89 ca             	mov    edx,ecx
  d6:	88 d0                	mov    al,dl
  d8:	66 83 c0 30          	add    eax,0x30
  dc:	67 88 03             	mov    BYTE PTR [ebx],al
D:\OneDrive\Study\Operating Systems\实验\project6\codes/./user/stdio.h:18
		org /= 10;
  df:	67 66 8b 4d 08       	mov    ecx,DWORD PTR [ebp+0x8]
  e4:	66 b8 67 66 66 66    	mov    eax,0x66666667
  ea:	66 f7 e9             	imul   ecx
  ed:	66 c1 fa 02          	sar    edx,0x2
  f1:	66 89 c8             	mov    eax,ecx
  f4:	66 c1 f8 1f          	sar    eax,0x1f
  f8:	66 29 c2             	sub    edx,eax
  fb:	66 89 d0             	mov    eax,edx
  fe:	67 66 89 45 08       	mov    DWORD PTR [ebp+0x8],eax
D:\OneDrive\Study\Operating Systems\实验\project6\codes/./user/stdio.h:15
	for(int i = num; i >= 0; --i)
 103:	67 66 ff 4d f0       	dec    DWORD PTR [ebp-0x10]
 108:	67 66 83 7d f0 00    	cmp    DWORD PTR [ebp-0x10],0x0
 10e:	79 88                	jns    98 <_int2str+0x8c>
D:\OneDrive\Study\Operating Systems\实验\project6\codes/./user/stdio.h:20
	}
}
 110:	90                   	nop
 111:	66 83 c4 0c          	add    esp,0xc
 115:	66 5b                	pop    ebx
 117:	66 5d                	pop    ebp
 119:	66 c3                	ret    

0000011b <_strlen>:
strlen():
D:\OneDrive\Study\Operating Systems\实验\project6\codes/./user/stdio.h:23

int strlen(char * sen)
{
 11b:	66 55                	push   ebp
 11d:	66 89 e5             	mov    ebp,esp
 120:	66 83 ec 04          	sub    esp,0x4
D:\OneDrive\Study\Operating Systems\实验\project6\codes/./user/stdio.h:24
	int i = 0;
 124:	67 66 c7 45 fc 00 00 	mov    DWORD PTR [ebp-0x4],0x0
 12b:	00 00 
D:\OneDrive\Study\Operating Systems\实验\project6\codes/./user/stdio.h:25
	while(sen[i]) { ++i; }
 12d:	eb 05                	jmp    134 <_strlen+0x19>
 12f:	67 66 ff 45 fc       	inc    DWORD PTR [ebp-0x4]
 134:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
 139:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
 13e:	66 01 d0             	add    eax,edx
 141:	67 8a 00             	mov    al,BYTE PTR [eax]
 144:	84 c0                	test   al,al
 146:	75 e7                	jne    12f <_strlen+0x14>
D:\OneDrive\Study\Operating Systems\实验\project6\codes/./user/stdio.h:26
	return i;
 148:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
D:\OneDrive\Study\Operating Systems\实验\project6\codes/./user/stdio.h:27
}
 14d:	66 c9                	leave  
 14f:	66 c3                	ret    

00000151 <__main>:
_main():
D:\OneDrive\Study\Operating Systems\实验\project6\codes/./user/testFork.c:22
	int i;
	struct testMalloc * next;
};
int ret;
int _main()
{
 151:	66 55                	push   ebp
 153:	66 89 e5             	mov    ebp,esp
 156:	66 53                	push   ebx
 158:	66 83 ec 38          	sub    esp,0x38
D:\OneDrive\Study\Operating Systems\实验\project6\codes/./user/testFork.c:25
	char tmpstr[10];

	struct testMalloc * first = (struct testMalloc *)(malloc(sizeof(struct testMalloc)));
 15c:	67 66 c7 04 24 08 00 	mov    DWORD PTR [esp],0x8
 163:	00 00 
 165:	66 e8 2c 05 00 00    	call   697 <_malloc>
 16b:	67 66 89 45 f0       	mov    DWORD PTR [ebp-0x10],eax
D:\OneDrive\Study\Operating Systems\实验\project6\codes/./user/testFork.c:26
	if(first == 0)
 170:	67 66 83 7d f0 00    	cmp    DWORD PTR [ebp-0x10],0x0
 176:	75 37                	jne    1af <__main+0x5e>
D:\OneDrive\Study\Operating Systems\实验\project6\codes/./user/testFork.c:28
	{
		printSentence("error", 11, 0, 5, white);
 178:	67 66 c7 44 24 10 0f 	mov    DWORD PTR [esp+0x10],0xf
 17f:	00 00 00 
 182:	67 66 c7 44 24 0c 05 	mov    DWORD PTR [esp+0xc],0x5
 189:	00 00 00 
 18c:	67 66 c7 44 24 08 00 	mov    DWORD PTR [esp+0x8],0x0
 193:	00 00 00 
 196:	67 66 c7 44 24 04 0b 	mov    DWORD PTR [esp+0x4],0xb
 19d:	00 00 00 
 1a0:	67 66 c7 04 24 00 10 	mov    DWORD PTR [esp],0x1000
 1a7:	00 00 
 1a9:	66 e8 0a 05 00 00    	call   6b9 <_printSentence>
D:\OneDrive\Study\Operating Systems\实验\project6\codes/./user/testFork.c:36
	// first->next = (struct testMalloc *)(malloc(sizeof(struct testMalloc)));
	// first->next->i = 2; 
	// first->next->next = NULL;

	// struct testMalloc * one = first;
	struct testMalloc * p = first;
 1af:	67 66 8b 45 f0       	mov    eax,DWORD PTR [ebp-0x10]
 1b4:	67 66 89 45 f8       	mov    DWORD PTR [ebp-0x8],eax
D:\OneDrive\Study\Operating Systems\实验\project6\codes/./user/testFork.c:37
	int i = 0;
 1b9:	67 66 c7 45 ec 00 00 	mov    DWORD PTR [ebp-0x14],0x0
 1c0:	00 00 
D:\OneDrive\Study\Operating Systems\实验\project6\codes/./user/testFork.c:38
	for (int i = 0; i < 10; ++i)
 1c2:	67 66 c7 45 f4 00 00 	mov    DWORD PTR [ebp-0xc],0x0
 1c9:	00 00 
 1cb:	eb 3e                	jmp    20b <__file_alignment__+0xb>
D:\OneDrive\Study\Operating Systems\实验\project6\codes/./user/testFork.c:40
	{
		p->i = i;
 1cd:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
 1d2:	67 66 8b 55 f4       	mov    edx,DWORD PTR [ebp-0xc]
 1d7:	67 66 89 10          	mov    DWORD PTR [eax],edx
D:\OneDrive\Study\Operating Systems\实验\project6\codes/./user/testFork.c:41
		p->next = (struct testMalloc *)(malloc(sizeof(struct testMalloc)));
 1db:	67 66 c7 04 24 08 00 	mov    DWORD PTR [esp],0x8
 1e2:	00 00 
 1e4:	66 e8 ad 04 00 00    	call   697 <_malloc>
 1ea:	66 89 c2             	mov    edx,eax
 1ed:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
 1f2:	67 66 89 50 04       	mov    DWORD PTR [eax+0x4],edx
D:\OneDrive\Study\Operating Systems\实验\project6\codes/./user/testFork.c:42
		p = p->next;
 1f7:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
 1fc:	67 66 8b 40 04       	mov    eax,DWORD PTR [eax+0x4]
 201:	67 66 89 45 f8       	mov    DWORD PTR [ebp-0x8],eax
D:\OneDrive\Study\Operating Systems\实验\project6\codes/./user/testFork.c:38
	for (int i = 0; i < 10; ++i)
 206:	67 66 ff 45 f4       	inc    DWORD PTR [ebp-0xc]
 20b:	67 66 83 7d f4 09    	cmp    DWORD PTR [ebp-0xc],0x9
 211:	7e ba                	jle    1cd <__main+0x7c>
D:\OneDrive\Study\Operating Systems\实验\project6\codes/./user/testFork.c:45
	}

	p = first;
 213:	67 66 8b 45 f0       	mov    eax,DWORD PTR [ebp-0x10]
 218:	67 66 89 45 f8       	mov    DWORD PTR [ebp-0x8],eax
D:\OneDrive\Study\Operating Systems\实验\project6\codes/./user/testFork.c:46
	while(p){
 21d:	eb 6f                	jmp    28e <__file_alignment__+0x8e>
D:\OneDrive\Study\Operating Systems\实验\project6\codes/./user/testFork.c:47
		int2str(p->i, tmpstr);
 21f:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
 224:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
 228:	67 66 8d 55 da       	lea    edx,[ebp-0x26]
 22d:	67 66 89 54 24 04    	mov    DWORD PTR [esp+0x4],edx
 233:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
 238:	66 e8 ce fd ff ff    	call   c <_int2str>
D:\OneDrive\Study\Operating Systems\实验\project6\codes/./user/testFork.c:48
		printSentence(tmpstr, 10+p->i, 0, 1, white);
 23e:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
 243:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
 247:	66 83 c0 0a          	add    eax,0xa
 24b:	67 66 c7 44 24 10 0f 	mov    DWORD PTR [esp+0x10],0xf
 252:	00 00 00 
 255:	67 66 c7 44 24 0c 01 	mov    DWORD PTR [esp+0xc],0x1
 25c:	00 00 00 
 25f:	67 66 c7 44 24 08 00 	mov    DWORD PTR [esp+0x8],0x0
 266:	00 00 00 
 269:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
 26f:	67 66 8d 45 da       	lea    eax,[ebp-0x26]
 274:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
 279:	66 e8 3a 04 00 00    	call   6b9 <_printSentence>
D:\OneDrive\Study\Operating Systems\实验\project6\codes/./user/testFork.c:49
		p = p->next;
 27f:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
 284:	67 66 8b 40 04       	mov    eax,DWORD PTR [eax+0x4]
 289:	67 66 89 45 f8       	mov    DWORD PTR [ebp-0x8],eax
D:\OneDrive\Study\Operating Systems\实验\project6\codes/./user/testFork.c:46
	while(p){
 28e:	67 66 83 7d f8 00    	cmp    DWORD PTR [ebp-0x8],0x0
 294:	75 89                	jne    21f <__file_alignment__+0x1f>
D:\OneDrive\Study\Operating Systems\实验\project6\codes/./user/testFork.c:53
	}


	int line = 0;
 296:	67 66 c7 45 e8 00 00 	mov    DWORD PTR [ebp-0x18],0x0
 29d:	00 00 
D:\OneDrive\Study\Operating Systems\实验\project6\codes/./user/testFork.c:55
	int pid;
	printSentence(str, line++, 0, strlen(str), white);
 29f:	67 66 c7 04 24 00 06 	mov    DWORD PTR [esp],0x600
 2a6:	00 00 
 2a8:	66 e8 6d fe ff ff    	call   11b <_strlen>
 2ae:	66 89 c2             	mov    edx,eax
 2b1:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
 2b6:	67 66 8d 48 01       	lea    ecx,[eax+0x1]
 2bb:	67 66 89 4d e8       	mov    DWORD PTR [ebp-0x18],ecx
 2c0:	67 66 c7 44 24 10 0f 	mov    DWORD PTR [esp+0x10],0xf
 2c7:	00 00 00 
 2ca:	67 66 89 54 24 0c    	mov    DWORD PTR [esp+0xc],edx
 2d0:	67 66 c7 44 24 08 00 	mov    DWORD PTR [esp+0x8],0x0
 2d7:	00 00 00 
 2da:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
 2e0:	67 66 c7 04 24 00 06 	mov    DWORD PTR [esp],0x600
 2e7:	00 00 
 2e9:	66 e8 ca 03 00 00    	call   6b9 <_printSentence>
D:\OneDrive\Study\Operating Systems\实验\project6\codes/./user/testFork.c:56
	pid = fork();
 2ef:	66 e8 6b 03 00 00    	call   660 <_fork>
 2f5:	67 66 89 45 e4       	mov    DWORD PTR [ebp-0x1c],eax
D:\OneDrive\Study\Operating Systems\实验\project6\codes/./user/testFork.c:58

	if(pid == -1)
 2fa:	67 66 83 7d e4 ff    	cmp    DWORD PTR [ebp-0x1c],0xffffffff
 300:	75 53                	jne    355 <__file_alignment__+0x155>
D:\OneDrive\Study\Operating Systems\实验\project6\codes/./user/testFork.c:60
	{
		printSentence("Error in fork\r\n", line++, 0, strlen("Error in fork\r\n"), white);
 302:	67 66 c7 04 24 06 10 	mov    DWORD PTR [esp],0x1006
 309:	00 00 
 30b:	66 e8 0a fe ff ff    	call   11b <_strlen>
 311:	66 89 c2             	mov    edx,eax
 314:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
 319:	67 66 8d 48 01       	lea    ecx,[eax+0x1]
 31e:	67 66 89 4d e8       	mov    DWORD PTR [ebp-0x18],ecx
 323:	67 66 c7 44 24 10 0f 	mov    DWORD PTR [esp+0x10],0xf
 32a:	00 00 00 
 32d:	67 66 89 54 24 0c    	mov    DWORD PTR [esp+0xc],edx
 333:	67 66 c7 44 24 08 00 	mov    DWORD PTR [esp+0x8],0x0
 33a:	00 00 00 
 33d:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
 343:	67 66 c7 04 24 06 10 	mov    DWORD PTR [esp],0x1006
 34a:	00 00 
 34c:	66 e8 67 03 00 00    	call   6b9 <_printSentence>
 352:	e9 80 02             	jmp    5d5 <__file_alignment__+0x3d5>
D:\OneDrive\Study\Operating Systems\实验\project6\codes/./user/testFork.c:61
	} else if(pid > 0) {
 355:	67 66 83 7d e4 00    	cmp    DWORD PTR [ebp-0x1c],0x0
 35b:	0f 8e 11 02          	jle    570 <__file_alignment__+0x370>
D:\OneDrive\Study\Operating Systems\实验\project6\codes/./user/testFork.c:62
		ret = wait();
 35f:	66 e8 20 03 00 00    	call   685 <_wait>
 365:	66 a3 44 30          	mov    ds:0x3044,eax
D:\OneDrive\Study\Operating Systems\实验\project6\codes/./user/testFork.c:63
		printSentence("Number of letter in str is ", ++line, 0, strlen("Number of letter in str is "), white);
 369:	67 66 c7 04 24 16 10 	mov    DWORD PTR [esp],0x1016
 370:	00 00 
 372:	66 e8 a3 fd ff ff    	call   11b <_strlen>
 378:	67 66 ff 45 e8       	inc    DWORD PTR [ebp-0x18]
 37d:	67 66 c7 44 24 10 0f 	mov    DWORD PTR [esp+0x10],0xf
 384:	00 00 00 
 387:	67 66 89 44 24 0c    	mov    DWORD PTR [esp+0xc],eax
 38d:	67 66 c7 44 24 08 00 	mov    DWORD PTR [esp+0x8],0x0
 394:	00 00 00 
 397:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
 39c:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
 3a2:	67 66 c7 04 24 16 10 	mov    DWORD PTR [esp],0x1016
 3a9:	00 00 
 3ab:	66 e8 08 03 00 00    	call   6b9 <_printSentence>
D:\OneDrive\Study\Operating Systems\实验\project6\codes/./user/testFork.c:64
		int2str(count, tmpstr);
 3b1:	66 a1 2c 30          	mov    eax,ds:0x302c
 3b5:	67 66 8d 55 da       	lea    edx,[ebp-0x26]
 3ba:	67 66 89 54 24 04    	mov    DWORD PTR [esp+0x4],edx
 3c0:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
 3c5:	66 e8 41 fc ff ff    	call   c <_int2str>
D:\OneDrive\Study\Operating Systems\实验\project6\codes/./user/testFork.c:65
		printSentence(tmpstr, line, strlen("Number of letter in str is "), strlen(tmpstr), white);
 3cb:	67 66 8d 45 da       	lea    eax,[ebp-0x26]
 3d0:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
 3d5:	66 e8 40 fd ff ff    	call   11b <_strlen>
 3db:	66 89 c3             	mov    ebx,eax
 3de:	67 66 c7 04 24 16 10 	mov    DWORD PTR [esp],0x1016
 3e5:	00 00 
 3e7:	66 e8 2e fd ff ff    	call   11b <_strlen>
 3ed:	67 66 c7 44 24 10 0f 	mov    DWORD PTR [esp+0x10],0xf
 3f4:	00 00 00 
 3f7:	67 66 89 5c 24 0c    	mov    DWORD PTR [esp+0xc],ebx
 3fd:	67 66 89 44 24 08    	mov    DWORD PTR [esp+0x8],eax
 403:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
 408:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
 40e:	67 66 8d 45 da       	lea    eax,[ebp-0x26]
 413:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
 418:	66 e8 9b 02 00 00    	call   6b9 <_printSentence>
D:\OneDrive\Study\Operating Systems\实验\project6\codes/./user/testFork.c:66
		printSentence("\r\n", line++, 0, strlen("\r\n"), white);
 41e:	67 66 c7 04 24 32 10 	mov    DWORD PTR [esp],0x1032
 425:	00 00 
 427:	66 e8 ee fc ff ff    	call   11b <_strlen>
 42d:	66 89 c2             	mov    edx,eax
 430:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
 435:	67 66 8d 48 01       	lea    ecx,[eax+0x1]
 43a:	67 66 89 4d e8       	mov    DWORD PTR [ebp-0x18],ecx
 43f:	67 66 c7 44 24 10 0f 	mov    DWORD PTR [esp+0x10],0xf
 446:	00 00 00 
 449:	67 66 89 54 24 0c    	mov    DWORD PTR [esp+0xc],edx
 44f:	67 66 c7 44 24 08 00 	mov    DWORD PTR [esp+0x8],0x0
 456:	00 00 00 
 459:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
 45f:	67 66 c7 04 24 32 10 	mov    DWORD PTR [esp],0x1032
 466:	00 00 
 468:	66 e8 4b 02 00 00    	call   6b9 <_printSentence>
D:\OneDrive\Study\Operating Systems\实验\project6\codes/./user/testFork.c:67
		int2str(ret, tmpstr);
 46e:	66 a1 44 30          	mov    eax,ds:0x3044
 472:	67 66 8d 55 da       	lea    edx,[ebp-0x26]
 477:	67 66 89 54 24 04    	mov    DWORD PTR [esp+0x4],edx
 47d:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
 482:	66 e8 84 fb ff ff    	call   c <_int2str>
D:\OneDrive\Study\Operating Systems\实验\project6\codes/./user/testFork.c:68
		printSentence("The returned value is ", line, 0, strlen("The returned value is "), white);
 488:	67 66 c7 04 24 35 10 	mov    DWORD PTR [esp],0x1035
 48f:	00 00 
 491:	66 e8 84 fc ff ff    	call   11b <_strlen>
 497:	67 66 c7 44 24 10 0f 	mov    DWORD PTR [esp+0x10],0xf
 49e:	00 00 00 
 4a1:	67 66 89 44 24 0c    	mov    DWORD PTR [esp+0xc],eax
 4a7:	67 66 c7 44 24 08 00 	mov    DWORD PTR [esp+0x8],0x0
 4ae:	00 00 00 
 4b1:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
 4b6:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
 4bc:	67 66 c7 04 24 35 10 	mov    DWORD PTR [esp],0x1035
 4c3:	00 00 
 4c5:	66 e8 ee 01 00 00    	call   6b9 <_printSentence>
D:\OneDrive\Study\Operating Systems\实验\project6\codes/./user/testFork.c:69
		printSentence(tmpstr, line, strlen("The returned value is "), strlen(tmpstr), white);
 4cb:	67 66 8d 45 da       	lea    eax,[ebp-0x26]
 4d0:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
 4d5:	66 e8 40 fc ff ff    	call   11b <_strlen>
 4db:	66 89 c3             	mov    ebx,eax
 4de:	67 66 c7 04 24 35 10 	mov    DWORD PTR [esp],0x1035
 4e5:	00 00 
 4e7:	66 e8 2e fc ff ff    	call   11b <_strlen>
 4ed:	67 66 c7 44 24 10 0f 	mov    DWORD PTR [esp+0x10],0xf
 4f4:	00 00 00 
 4f7:	67 66 89 5c 24 0c    	mov    DWORD PTR [esp+0xc],ebx
 4fd:	67 66 89 44 24 08    	mov    DWORD PTR [esp+0x8],eax
 503:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
 508:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
 50e:	67 66 8d 45 da       	lea    eax,[ebp-0x26]
 513:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
 518:	66 e8 9b 01 00 00    	call   6b9 <_printSentence>
D:\OneDrive\Study\Operating Systems\实验\project6\codes/./user/testFork.c:70
		printSentence("\r\n", line++, 0, strlen("\r\n"), white);
 51e:	67 66 c7 04 24 32 10 	mov    DWORD PTR [esp],0x1032
 525:	00 00 
 527:	66 e8 ee fb ff ff    	call   11b <_strlen>
 52d:	66 89 c2             	mov    edx,eax
 530:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
 535:	67 66 8d 48 01       	lea    ecx,[eax+0x1]
 53a:	67 66 89 4d e8       	mov    DWORD PTR [ebp-0x18],ecx
 53f:	67 66 c7 44 24 10 0f 	mov    DWORD PTR [esp+0x10],0xf
 546:	00 00 00 
 549:	67 66 89 54 24 0c    	mov    DWORD PTR [esp+0xc],edx
 54f:	67 66 c7 44 24 08 00 	mov    DWORD PTR [esp+0x8],0x0
 556:	00 00 00 
 559:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
 55f:	67 66 c7 04 24 32 10 	mov    DWORD PTR [esp],0x1032
 566:	00 00 
 568:	66 e8 4b 01 00 00    	call   6b9 <_printSentence>
 56e:	eb 65                	jmp    5d5 <__file_alignment__+0x3d5>
D:\OneDrive\Study\Operating Systems\实验\project6\codes/./user/testFork.c:72
	} else {
		printSentence("\r\nSubprogram is counting the number...\r\n", line, 0, strlen("Subprogram is counting the number...\r\n"), white);
 570:	67 66 c7 04 24 4c 10 	mov    DWORD PTR [esp],0x104c
 577:	00 00 
 579:	66 e8 9c fb ff ff    	call   11b <_strlen>
 57f:	67 66 c7 44 24 10 0f 	mov    DWORD PTR [esp+0x10],0xf
 586:	00 00 00 
 589:	67 66 89 44 24 0c    	mov    DWORD PTR [esp+0xc],eax
 58f:	67 66 c7 44 24 08 00 	mov    DWORD PTR [esp+0x8],0x0
 596:	00 00 00 
 599:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
 59e:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
 5a4:	67 66 c7 04 24 74 10 	mov    DWORD PTR [esp],0x1074
 5ab:	00 00 
 5ad:	66 e8 06 01 00 00    	call   6b9 <_printSentence>
D:\OneDrive\Study\Operating Systems\实验\project6\codes/./user/testFork.c:73
		count = strlen(str);
 5b3:	67 66 c7 04 24 00 06 	mov    DWORD PTR [esp],0x600
 5ba:	00 00 
 5bc:	66 e8 59 fb ff ff    	call   11b <_strlen>
 5c2:	66 a3 2c 30          	mov    ds:0x302c,eax
D:\OneDrive\Study\Operating Systems\实验\project6\codes/./user/testFork.c:74
		exitprg(1);
 5c6:	67 66 c7 04 24 01 00 	mov    DWORD PTR [esp],0x1
 5cd:	00 00 
 5cf:	66 e8 93 00 00 00    	call   668 <_exitprg>
D:\OneDrive\Study\Operating Systems\实验\project6\codes/./user/testFork.c:76
	}
	getchar();
 5d5:	66 e8 0d 01 00 00    	call   6e8 <_getchar>
D:\OneDrive\Study\Operating Systems\实验\project6\codes/./user/testFork.c:77
	exitprg(0);
 5db:	67 66 c7 04 24 00 00 	mov    DWORD PTR [esp],0x0
 5e2:	00 00 
 5e4:	66 e8 7e 00 00 00    	call   668 <_exitprg>
D:\OneDrive\Study\Operating Systems\实验\project6\codes/./user/testFork.c:78
 5ea:	90                   	nop
 5eb:	66 83 c4 38          	add    esp,0x38
 5ef:	66 5b                	pop    ebx
 5f1:	66 5d                	pop    ebp
 5f3:	66 c3                	ret    
 5f5:	eb 09                	jmp    600 <_str>
 5f7:	90                   	nop
 5f8:	90                   	nop
 5f9:	90                   	nop
 5fa:	90                   	nop
 5fb:	90                   	nop
 5fc:	90                   	nop
 5fd:	90                   	nop
 5fe:	90                   	nop
 5ff:	90                   	nop

00000600 <_str>:
 600:	48                   	dec    ax
 601:	65 6c                	gs ins BYTE PTR es:[di],dx
 603:	6c                   	ins    BYTE PTR es:[di],dx
 604:	6f                   	outs   dx,WORD PTR ds:[si]
 605:	20 4d 79             	and    BYTE PTR [di+0x79],cl
 608:	20 4f 73             	and    BYTE PTR [bx+0x73],cl
 60b:	21 00                	and    WORD PTR [bx+si],ax
	...

00000660 <_fork>:
 660:	b4 08                	mov    ah,0x8
 662:	cd 21                	int    0x21
 664:	66 59                	pop    ecx
 666:	ff e1                	jmp    cx

00000668 <_exitprg>:
 668:	66 55                	push   ebp
 66a:	66 89 e5             	mov    ebp,esp
 66d:	53                   	push   bx
 66e:	50                   	push   ax
 66f:	36 67 8b 5d 08       	mov    bx,WORD PTR ss:[ebp+0x8]
 674:	53                   	push   bx
 675:	b4 06                	mov    ah,0x6
 677:	cd 21                	int    0x21
 679:	5b                   	pop    bx
 67a:	58                   	pop    ax
 67b:	5b                   	pop    bx
 67c:	66 89 ec             	mov    esp,ebp
 67f:	66 5d                	pop    ebp
 681:	66 59                	pop    ecx
 683:	ff e1                	jmp    cx

00000685 <_wait>:
 685:	66 55                	push   ebp
 687:	66 89 e5             	mov    ebp,esp
 68a:	b4 07                	mov    ah,0x7
 68c:	cd 21                	int    0x21
 68e:	66 89 ec             	mov    esp,ebp
 691:	66 5d                	pop    ebp
 693:	66 59                	pop    ecx
 695:	ff e1                	jmp    cx

00000697 <_malloc>:
 697:	66 55                	push   ebp
 699:	66 89 e5             	mov    ebp,esp
 69c:	0f a8                	push   gs
 69e:	1e                   	push   ds
 69f:	0f a9                	pop    gs
 6a1:	66 53                	push   ebx
 6a3:	66 67 8b 5d 08       	mov    ebx,DWORD PTR [ebp+0x8]
 6a8:	b4 09                	mov    ah,0x9
 6aa:	cd 21                	int    0x21
 6ac:	66 5b                	pop    ebx
 6ae:	0f a9                	pop    gs
 6b0:	66 89 ec             	mov    esp,ebp
 6b3:	66 5d                	pop    ebp
 6b5:	66 59                	pop    ecx
 6b7:	ff e1                	jmp    cx

000006b9 <_printSentence>:
 6b9:	66 55                	push   ebp
 6bb:	66 89 e5             	mov    ebp,esp
 6be:	60                   	pusha  
 6bf:	0f a8                	push   gs
 6c1:	67 8b 7d 08          	mov    di,WORD PTR [ebp+0x8]
 6c5:	67 8a 75 0c          	mov    dh,BYTE PTR [ebp+0xc]
 6c9:	67 8a 55 10          	mov    dl,BYTE PTR [ebp+0x10]
 6cd:	67 8b 4d 14          	mov    cx,WORD PTR [ebp+0x14]
 6d1:	67 8a 5d 18          	mov    bl,BYTE PTR [ebp+0x18]
 6d5:	1e                   	push   ds
 6d6:	0f a9                	pop    gs
 6d8:	b4 02                	mov    ah,0x2
 6da:	cd 21                	int    0x21
 6dc:	0f a9                	pop    gs
 6de:	61                   	popa   
 6df:	66 89 ec             	mov    esp,ebp
 6e2:	66 5d                	pop    ebp
 6e4:	66 59                	pop    ecx
 6e6:	ff e1                	jmp    cx

000006e8 <_getchar>:
 6e8:	b4 00                	mov    ah,0x0
 6ea:	cd 16                	int    0x16
 6ec:	88 e0                	mov    al,ah
 6ee:	b4 00                	mov    ah,0x0
 6f0:	66 59                	pop    ecx
 6f2:	ff e1                	jmp    cx
