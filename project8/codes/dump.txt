
..\imgs\boot.tmp:     file format pei-i386


Disassembly of section .text:

00000000 <.text>:
       0:	66 8c c8             	mov    eax,cs
       3:	8e d8                	mov    ds,ax
       5:	8e c0                	mov    es,ax
       7:	8e d0                	mov    ss,ax
       9:	8e e8                	mov    gs,ax
       b:	66 e8 c4 14 00 00    	call   14d5 <_inisys>
      11:	eb 00                	jmp    13 <__main>

00000013 <__main>:
_main():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:39
{
	int i;
	struct testMalloc * next;
};

int _main() {
      13:	66 55                	push   ebp
      15:	66 89 e5             	mov    ebp,esp
      18:	66 56                	push   esi
      1a:	66 53                	push   ebx
      1c:	66 81 ec 78 01 00 00 	sub    esp,0x178
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:40
	runSub = 0;
      23:	66 c7 06 d8 a2 00 00 	mov    DWORD PTR ds:0xa2d8,0x0
      2a:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:41
	curProcessId = 0;
      2c:	66 c7 06 40 e8 00 00 	mov    DWORD PTR ds:0xe840,0x0
      33:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:42
	ProcessSize = 1;
      35:	66 c7 06 fc a6 01 00 	mov    DWORD PTR ds:0xa6fc,0x1
      3c:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:43
	SizeOfProcessStruct = sizeof(struct Process);
      3e:	66 c7 06 04 a7 30 01 	mov    DWORD PTR ds:0xa704,0x130
      45:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:44
	initial();
      47:	66 e8 f6 31 00 00    	call   3243 <_initial>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:47
	char * in;
	char * str;
	int tmp = -1;
      4d:	67 66 c7 85 54 ff ff 	mov    DWORD PTR [ebp-0xac],0xffffffff
      54:	ff ff ff ff ff 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:48
	init(&ReadyQue);
      59:	67 66 c7 04 24 60 e8 	mov    DWORD PTR [esp],0xe860
      60:	00 00 
      62:	66 e8 b3 74 00 00    	call   751b <_init>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:49
	init(&BlockedQue);
      68:	67 66 c7 04 24 a0 a6 	mov    DWORD PTR [esp],0xa6a0
      6f:	00 00 
      71:	66 e8 a4 74 00 00    	call   751b <_init>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:50
	init(&SuspendQue);
      77:	67 66 c7 04 24 20 d0 	mov    DWORD PTR [esp],0xd020
      7e:	00 00 
      80:	66 e8 95 74 00 00    	call   751b <_init>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:52

	clear();
      86:	66 e8 11 28 00 00    	call   289d <_clear>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:54
	char buffer[100];
	int status = fopen("manual.txt", readAndWriteFile);
      8c:	67 66 c7 44 24 04 03 	mov    DWORD PTR [esp+0x4],0x3
      93:	00 00 00 
      96:	67 66 c7 04 24 00 80 	mov    DWORD PTR [esp],0x8000
      9d:	00 00 
      9f:	66 e8 92 3d 00 00    	call   3e37 <_fopen>
      a5:	67 66 89 45 ec       	mov    DWORD PTR [ebp-0x14],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:55
	if (status == 400)
      aa:	67 66 81 7d ec 90 01 	cmp    DWORD PTR [ebp-0x14],0x190
      b1:	00 00 
      b3:	75 3a                	jne    ef <.debug_str+0xad>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:56
		printSentence("file down", 5, 0, 4, white);
      b5:	67 66 c7 44 24 10 0f 	mov    DWORD PTR [esp+0x10],0xf
      bc:	00 00 00 
      bf:	67 66 c7 44 24 0c 04 	mov    DWORD PTR [esp+0xc],0x4
      c6:	00 00 00 
      c9:	67 66 c7 44 24 08 00 	mov    DWORD PTR [esp+0x8],0x0
      d0:	00 00 00 
      d3:	67 66 c7 44 24 04 05 	mov    DWORD PTR [esp+0x4],0x5
      da:	00 00 00 
      dd:	67 66 c7 04 24 0b 80 	mov    DWORD PTR [esp],0x800b
      e4:	00 00 
      e6:	66 e8 09 19 00 00    	call   19f5 <_printSentence>
      ec:	e9 9e 01             	jmp    28d <.debug_line+0x43>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:58
	else {
		fread("manual.txt", buffer, 100);
      ef:	67 66 c7 44 24 08 64 	mov    DWORD PTR [esp+0x8],0x64
      f6:	00 00 00 
      f9:	67 66 8d 85 f0 fe ff 	lea    eax,[ebp-0x110]
     100:	ff 
     101:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
     107:	67 66 c7 04 24 00 80 	mov    DWORD PTR [esp],0x8000
     10e:	00 00 
     110:	66 e8 0e 43 00 00    	call   4424 <_fread>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:59
		printSentence(buffer, 0, 0, strlen(buffer), white);
     116:	67 66 8d 85 f0 fe ff 	lea    eax,[ebp-0x110]
     11d:	ff 
     11e:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
     123:	66 e8 4f 31 00 00    	call   3278 <_strlen>
     129:	67 66 c7 44 24 10 0f 	mov    DWORD PTR [esp+0x10],0xf
     130:	00 00 00 
     133:	67 66 89 44 24 0c    	mov    DWORD PTR [esp+0xc],eax
     139:	67 66 c7 44 24 08 00 	mov    DWORD PTR [esp+0x8],0x0
     140:	00 00 00 
     143:	67 66 c7 44 24 04 00 	mov    DWORD PTR [esp+0x4],0x0
     14a:	00 00 00 
     14d:	67 66 8d 85 f0 fe ff 	lea    eax,[ebp-0x110]
     154:	ff 
     155:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
     15a:	66 e8 95 18 00 00    	call   19f5 <_printSentence>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:60
		fwrite("manual.txt", "12345678900987654321", 20);
     160:	67 66 c7 44 24 08 14 	mov    DWORD PTR [esp+0x8],0x14
     167:	00 00 00 
     16a:	67 66 c7 44 24 04 15 	mov    DWORD PTR [esp+0x4],0x8015
     171:	80 00 00 
     174:	67 66 c7 04 24 00 80 	mov    DWORD PTR [esp],0x8000
     17b:	00 00 
     17d:	66 e8 a5 43 00 00    	call   4528 <_fwrite>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:61
		fread("manual.txt", buffer, 100);
     183:	67 66 c7 44 24 08 64 	mov    DWORD PTR [esp+0x8],0x64
     18a:	00 00 00 
     18d:	67 66 8d 85 f0 fe ff 	lea    eax,[ebp-0x110]
     194:	ff 
     195:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
     19b:	67 66 c7 04 24 00 80 	mov    DWORD PTR [esp],0x8000
     1a2:	00 00 
     1a4:	66 e8 7a 42 00 00    	call   4424 <_fread>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:62
		printSentence(buffer, 5, 0, strlen(buffer), white);
     1aa:	67 66 8d 85 f0 fe ff 	lea    eax,[ebp-0x110]
     1b1:	ff 
     1b2:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
     1b7:	66 e8 bb 30 00 00    	call   3278 <_strlen>
     1bd:	67 66 c7 44 24 10 0f 	mov    DWORD PTR [esp+0x10],0xf
     1c4:	00 00 00 
     1c7:	67 66 89 44 24 0c    	mov    DWORD PTR [esp+0xc],eax
     1cd:	67 66 c7 44 24 08 00 	mov    DWORD PTR [esp+0x8],0x0
     1d4:	00 00 00 
     1d7:	67 66 c7 44 24 04 05 	mov    DWORD PTR [esp+0x4],0x5
     1de:	00 00 00 
     1e1:	67 66 8d 85 f0 fe ff 	lea    eax,[ebp-0x110]
     1e8:	ff 
     1e9:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
     1ee:	66 e8 01 18 00 00    	call   19f5 <_printSentence>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:63
		fseek("manual.txt", 20);
     1f4:	67 66 c7 44 24 04 14 	mov    DWORD PTR [esp+0x4],0x14
     1fb:	00 00 00 
     1fe:	67 66 c7 04 24 00 80 	mov    DWORD PTR [esp],0x8000
     205:	00 00 
     207:	66 e8 90 41 00 00    	call   439d <_fseek>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:64
		fread("manual.txt", buffer, 100);
     20d:	67 66 c7 44 24 08 64 	mov    DWORD PTR [esp+0x8],0x64
     214:	00 00 00 
     217:	67 66 8d 85 f0 fe ff 	lea    eax,[ebp-0x110]
     21e:	ff 
     21f:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
     225:	67 66 c7 04 24 00 80 	mov    DWORD PTR [esp],0x8000
     22c:	00 00 
     22e:	66 e8 f0 41 00 00    	call   4424 <_fread>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:65
		printSentence(buffer, 10, 0, strlen(buffer), white);
     234:	67 66 8d 85 f0 fe ff 	lea    eax,[ebp-0x110]
     23b:	ff 
     23c:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
     241:	66 e8 31 30 00 00    	call   3278 <_strlen>
     247:	67 66 c7 44 24 10 0f 	mov    DWORD PTR [esp+0x10],0xf
     24e:	00 00 00 
     251:	67 66 89 44 24 0c    	mov    DWORD PTR [esp+0xc],eax
     257:	67 66 c7 44 24 08 00 	mov    DWORD PTR [esp+0x8],0x0
     25e:	00 00 00 
     261:	67 66 c7 44 24 04 0a 	mov    DWORD PTR [esp+0x4],0xa
     268:	00 00 00 
     26b:	67 66 8d 85 f0 fe ff 	lea    eax,[ebp-0x110]
     272:	ff 
     273:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
     278:	66 e8 77 17 00 00    	call   19f5 <_printSentence>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:66
		fclose("manual.txt");
     27e:	67 66 c7 04 24 00 80 	mov    DWORD PTR [esp],0x8000
     285:	00 00 
     287:	66 e8 90 3f 00 00    	call   421d <_fclose>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:70
	}

	do {
		in = getInput();
     28d:	66 e8 ae 17 00 00    	call   1a41 <_getInput>
     293:	67 66 89 45 e8       	mov    DWORD PTR [ebp-0x18],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:71
		if (strcmp(in, "testFork") == 0) {
     298:	67 66 c7 44 24 04 2a 	mov    DWORD PTR [esp+0x4],0x802a
     29f:	80 00 00 
     2a2:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
     2a7:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
     2ac:	66 e8 97 30 00 00    	call   3349 <_strcmp>
     2b2:	66 85 c0             	test   eax,eax
     2b5:	0f 85 bc 01          	jne    475 <.debug_line+0x22b>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:72
			tmp = find(in);
     2b9:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
     2be:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
     2c3:	66 e8 37 35 00 00    	call   3800 <_find>
     2c9:	67 66 89 85 54 ff ff 	mov    DWORD PTR [ebp-0xac],eax
     2d0:	ff 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:74
			int offsetOfPrg, segOfPrg;
			int offsetMask = 0x0000ffff;
     2d1:	67 66 c7 45 e4 ff ff 	mov    DWORD PTR [ebp-0x1c],0xffff
     2d8:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:75
			int segMask = 0xf0000;
     2da:	67 66 c7 45 e0 00 00 	mov    DWORD PTR [ebp-0x20],0xf0000
     2e1:	0f 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:76
			offsetOfPrg = 0x80000 & offsetMask;
     2e3:	67 66 8b 45 e4       	mov    eax,DWORD PTR [ebp-0x1c]
     2e8:	66 25 00 00 08 00    	and    eax,0x80000
     2ee:	67 66 89 45 dc       	mov    DWORD PTR [ebp-0x24],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:77
			segOfPrg = (0x80000 & segMask) >> 4;
     2f3:	67 66 8b 45 e0       	mov    eax,DWORD PTR [ebp-0x20]
     2f8:	66 c1 f8 04          	sar    eax,0x4
     2fc:	66 25 00 80 00 00    	and    eax,0x8000
     302:	67 66 89 45 d8       	mov    DWORD PTR [ebp-0x28],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:78
			int cs = segOfPrg + (offsetOfPrg >> 4), ip = 0, ss = segOfPrg + (offsetOfPrg >> 4), sp = information[tmp].size + 1024 - 1;
     307:	67 66 8b 45 dc       	mov    eax,DWORD PTR [ebp-0x24]
     30c:	66 c1 f8 04          	sar    eax,0x4
     310:	66 89 c2             	mov    edx,eax
     313:	67 66 8b 45 d8       	mov    eax,DWORD PTR [ebp-0x28]
     318:	66 01 d0             	add    eax,edx
     31b:	67 66 89 45 d4       	mov    DWORD PTR [ebp-0x2c],eax
     320:	67 66 c7 45 d0 00 00 	mov    DWORD PTR [ebp-0x30],0x0
     327:	00 00 
     329:	67 66 8b 45 dc       	mov    eax,DWORD PTR [ebp-0x24]
     32e:	66 c1 f8 04          	sar    eax,0x4
     332:	66 89 c2             	mov    edx,eax
     335:	67 66 8b 45 d8       	mov    eax,DWORD PTR [ebp-0x28]
     33a:	66 01 d0             	add    eax,edx
     33d:	67 66 89 45 cc       	mov    DWORD PTR [ebp-0x34],eax
     342:	67 66 8b 95 54 ff ff 	mov    edx,DWORD PTR [ebp-0xac]
     349:	ff 
     34a:	66 89 d0             	mov    eax,edx
     34d:	66 01 c0             	add    eax,eax
     350:	66 01 d0             	add    eax,edx
     353:	66 c1 e0 02          	shl    eax,0x2
     357:	66 01 d0             	add    eax,edx
     35a:	66 c1 e0 02          	shl    eax,0x2
     35e:	66 01 d0             	add    eax,edx
     361:	66 c1 e0 02          	shl    eax,0x2
     365:	66 05 a8 bf 00 00    	add    eax,0xbfa8
     36b:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
     36f:	66 05 ff 03 00 00    	add    eax,0x3ff
     375:	67 66 89 45 c8       	mov    DWORD PTR [ebp-0x38],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:79
			createProcess(findNextProcessItem(), information[tmp].name, information[tmp].size + 1024, cs, ip, ss, sp, 9);
     37a:	67 66 8b 95 54 ff ff 	mov    edx,DWORD PTR [ebp-0xac]
     381:	ff 
     382:	66 89 d0             	mov    eax,edx
     385:	66 01 c0             	add    eax,eax
     388:	66 01 d0             	add    eax,edx
     38b:	66 c1 e0 02          	shl    eax,0x2
     38f:	66 01 d0             	add    eax,edx
     392:	66 c1 e0 02          	shl    eax,0x2
     396:	66 01 d0             	add    eax,edx
     399:	66 c1 e0 02          	shl    eax,0x2
     39d:	66 05 a8 bf 00 00    	add    eax,0xbfa8
     3a3:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
     3a7:	67 66 8d b0 00 04 00 	lea    esi,[eax+0x400]
     3ae:	00 
     3af:	67 66 8b 95 54 ff ff 	mov    edx,DWORD PTR [ebp-0xac]
     3b6:	ff 
     3b7:	66 89 d0             	mov    eax,edx
     3ba:	66 01 c0             	add    eax,eax
     3bd:	66 01 d0             	add    eax,edx
     3c0:	66 c1 e0 02          	shl    eax,0x2
     3c4:	66 01 d0             	add    eax,edx
     3c7:	66 c1 e0 02          	shl    eax,0x2
     3cb:	66 01 d0             	add    eax,edx
     3ce:	66 c1 e0 02          	shl    eax,0x2
     3d2:	67 66 8d 98 80 bf 00 	lea    ebx,[eax+0xbf80]
     3d9:	00 
     3da:	66 e8 72 44 00 00    	call   4852 <_findNextProcessItem>
     3e0:	67 66 c7 44 24 1c 09 	mov    DWORD PTR [esp+0x1c],0x9
     3e7:	00 00 00 
     3ea:	67 66 8b 55 c8       	mov    edx,DWORD PTR [ebp-0x38]
     3ef:	67 66 89 54 24 18    	mov    DWORD PTR [esp+0x18],edx
     3f5:	67 66 8b 55 cc       	mov    edx,DWORD PTR [ebp-0x34]
     3fa:	67 66 89 54 24 14    	mov    DWORD PTR [esp+0x14],edx
     400:	67 66 8b 55 d0       	mov    edx,DWORD PTR [ebp-0x30]
     405:	67 66 89 54 24 10    	mov    DWORD PTR [esp+0x10],edx
     40b:	67 66 8b 55 d4       	mov    edx,DWORD PTR [ebp-0x2c]
     410:	67 66 89 54 24 0c    	mov    DWORD PTR [esp+0xc],edx
     416:	67 66 89 74 24 08    	mov    DWORD PTR [esp+0x8],esi
     41c:	67 66 89 5c 24 04    	mov    DWORD PTR [esp+0x4],ebx
     422:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
     427:	66 e8 16 46 00 00    	call   4a43 <_createProcess>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:80
			ProcessSize += 1;
     42d:	66 a1 fc a6          	mov    eax,ds:0xa6fc
     431:	66 40                	inc    eax
     433:	66 a3 fc a6          	mov    ds:0xa6fc,eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:81
			enqueue(&ReadyQue, ProcessSize - 1);
     437:	66 a1 fc a6          	mov    eax,ds:0xa6fc
     43b:	66 48                	dec    eax
     43d:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
     443:	67 66 c7 04 24 60 e8 	mov    DWORD PTR [esp],0xe860
     44a:	00 00 
     44c:	66 e8 fc 70 00 00    	call   754e <_enqueue>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:82
			clear();
     452:	66 e8 45 24 00 00    	call   289d <_clear>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:83
			runSub = 1;
     458:	66 c7 06 d8 a2 01 00 	mov    DWORD PTR ds:0xa2d8,0x1
     45f:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:84
			__asm__("int $0x8\n");
     461:	cd 08                	int    0x8
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:85
			runSub = 0;
     463:	66 c7 06 d8 a2 00 00 	mov    DWORD PTR ds:0xa2d8,0x0
     46a:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:86
			clear();
     46c:	66 e8 2b 24 00 00    	call   289d <_clear>
     472:	e9 49 10             	jmp    14be <__section_alignment__+0x4be>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:88
		}
		else if (in[0] == 'r' && in[1] == 'u' && in[2] == 'n')
     475:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
     47a:	67 8a 00             	mov    al,BYTE PTR [eax]
     47d:	3c 72                	cmp    al,0x72
     47f:	0f 85 05 05          	jne    988 <.debug_line+0x73e>
     483:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
     488:	66 40                	inc    eax
     48a:	67 8a 00             	mov    al,BYTE PTR [eax]
     48d:	3c 75                	cmp    al,0x75
     48f:	0f 85 f5 04          	jne    988 <.debug_line+0x73e>
     493:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
     498:	66 83 c0 02          	add    eax,0x2
     49c:	67 8a 00             	mov    al,BYTE PTR [eax]
     49f:	3c 6e                	cmp    al,0x6e
     4a1:	0f 85 e3 04          	jne    988 <.debug_line+0x73e>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:90
		{
			printSentence("\n", line++, 0, strlen("\n"), white);
     4a5:	67 66 c7 04 24 33 80 	mov    DWORD PTR [esp],0x8033
     4ac:	00 00 
     4ae:	66 e8 c4 2d 00 00    	call   3278 <_strlen>
     4b4:	66 89 c2             	mov    edx,eax
     4b7:	66 a1 00 a2          	mov    eax,ds:0xa200
     4bb:	67 66 8d 48 01       	lea    ecx,[eax+0x1]
     4c0:	66 89 0e 00 a2       	mov    DWORD PTR ds:0xa200,ecx
     4c5:	67 66 c7 44 24 10 0f 	mov    DWORD PTR [esp+0x10],0xf
     4cc:	00 00 00 
     4cf:	67 66 89 54 24 0c    	mov    DWORD PTR [esp+0xc],edx
     4d5:	67 66 c7 44 24 08 00 	mov    DWORD PTR [esp+0x8],0x0
     4dc:	00 00 00 
     4df:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
     4e5:	67 66 c7 04 24 33 80 	mov    DWORD PTR [esp],0x8033
     4ec:	00 00 
     4ee:	66 e8 01 15 00 00    	call   19f5 <_printSentence>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:92
			do {
				str = getInput();
     4f4:	66 e8 47 15 00 00    	call   1a41 <_getInput>
     4fa:	67 66 89 45 c4       	mov    DWORD PTR [ebp-0x3c],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:93
				printSentence("\n", line++, 0, strlen("\n"), white);
     4ff:	67 66 c7 04 24 33 80 	mov    DWORD PTR [esp],0x8033
     506:	00 00 
     508:	66 e8 6a 2d 00 00    	call   3278 <_strlen>
     50e:	66 89 c2             	mov    edx,eax
     511:	66 a1 00 a2          	mov    eax,ds:0xa200
     515:	67 66 8d 48 01       	lea    ecx,[eax+0x1]
     51a:	66 89 0e 00 a2       	mov    DWORD PTR ds:0xa200,ecx
     51f:	67 66 c7 44 24 10 0f 	mov    DWORD PTR [esp+0x10],0xf
     526:	00 00 00 
     529:	67 66 89 54 24 0c    	mov    DWORD PTR [esp+0xc],edx
     52f:	67 66 c7 44 24 08 00 	mov    DWORD PTR [esp+0x8],0x0
     536:	00 00 00 
     539:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
     53f:	67 66 c7 04 24 33 80 	mov    DWORD PTR [esp],0x8033
     546:	00 00 
     548:	66 e8 a7 14 00 00    	call   19f5 <_printSentence>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:94
				if (str[0]) {
     54e:	67 66 8b 45 c4       	mov    eax,DWORD PTR [ebp-0x3c]
     553:	67 8a 00             	mov    al,BYTE PTR [eax]
     556:	84 c0                	test   al,al
     558:	0f 84 1f 03          	je     87b <.debug_line+0x631>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:95
					tmp = find(str);
     55c:	67 66 8b 45 c4       	mov    eax,DWORD PTR [ebp-0x3c]
     561:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
     566:	66 e8 94 32 00 00    	call   3800 <_find>
     56c:	67 66 89 85 54 ff ff 	mov    DWORD PTR [ebp-0xac],eax
     573:	ff 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:96
					if (tmp != -1 && information[tmp].deleted != 1) {
     574:	67 66 8b 85 54 ff ff 	mov    eax,DWORD PTR [ebp-0xac]
     57b:	ff 
     57c:	66 83 f8 ff          	cmp    eax,0xffffffff
     580:	0f 84 f7 02          	je     87b <.debug_line+0x631>
     584:	67 66 8b 95 54 ff ff 	mov    edx,DWORD PTR [ebp-0xac]
     58b:	ff 
     58c:	66 89 d0             	mov    eax,edx
     58f:	66 01 c0             	add    eax,eax
     592:	66 01 d0             	add    eax,edx
     595:	66 c1 e0 02          	shl    eax,0x2
     599:	66 01 d0             	add    eax,edx
     59c:	66 c1 e0 02          	shl    eax,0x2
     5a0:	66 01 d0             	add    eax,edx
     5a3:	66 c1 e0 02          	shl    eax,0x2
     5a7:	66 05 ac bf 00 00    	add    eax,0xbfac
     5ad:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
     5b1:	66 83 f8 01          	cmp    eax,0x1
     5b5:	0f 84 c2 02          	je     87b <.debug_line+0x631>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:97
						int blockNum = findEnoughBlock(information[tmp].size + 1024);
     5b9:	67 66 8b 95 54 ff ff 	mov    edx,DWORD PTR [ebp-0xac]
     5c0:	ff 
     5c1:	66 89 d0             	mov    eax,edx
     5c4:	66 01 c0             	add    eax,eax
     5c7:	66 01 d0             	add    eax,edx
     5ca:	66 c1 e0 02          	shl    eax,0x2
     5ce:	66 01 d0             	add    eax,edx
     5d1:	66 c1 e0 02          	shl    eax,0x2
     5d5:	66 01 d0             	add    eax,edx
     5d8:	66 c1 e0 02          	shl    eax,0x2
     5dc:	66 05 a8 bf 00 00    	add    eax,0xbfa8
     5e2:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
     5e6:	66 05 00 04 00 00    	add    eax,0x400
     5ec:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
     5f1:	66 e8 45 67 00 00    	call   6d3c <_findEnoughBlock>
     5f7:	67 66 89 45 c0       	mov    DWORD PTR [ebp-0x40],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:98
						blockNum = require(information[tmp].size + 1024, blockNum);
     5fc:	67 66 8b 95 54 ff ff 	mov    edx,DWORD PTR [ebp-0xac]
     603:	ff 
     604:	66 89 d0             	mov    eax,edx
     607:	66 01 c0             	add    eax,eax
     60a:	66 01 d0             	add    eax,edx
     60d:	66 c1 e0 02          	shl    eax,0x2
     611:	66 01 d0             	add    eax,edx
     614:	66 c1 e0 02          	shl    eax,0x2
     618:	66 01 d0             	add    eax,edx
     61b:	66 c1 e0 02          	shl    eax,0x2
     61f:	66 05 a8 bf 00 00    	add    eax,0xbfa8
     625:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
     629:	67 66 8d 90 00 04 00 	lea    edx,[eax+0x400]
     630:	00 
     631:	67 66 8b 45 c0       	mov    eax,DWORD PTR [ebp-0x40]
     636:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
     63c:	67 66 89 14 24       	mov    DWORD PTR [esp],edx
     641:	66 e8 9e 67 00 00    	call   6de5 <_require>
     647:	67 66 89 45 c0       	mov    DWORD PTR [ebp-0x40],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:100
						int offsetOfPrg, segOfPrg;
						int offsetMask = 0x0000ffff;
     64c:	67 66 c7 45 bc ff ff 	mov    DWORD PTR [ebp-0x44],0xffff
     653:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:101
						int segMask = 0xf0000;
     655:	67 66 c7 45 b8 00 00 	mov    DWORD PTR [ebp-0x48],0xf0000
     65c:	0f 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:102
						offsetOfPrg = memoryTable[blockNum].beginAddr & offsetMask;
     65e:	67 66 8b 55 c0       	mov    edx,DWORD PTR [ebp-0x40]
     663:	66 89 d0             	mov    eax,edx
     666:	66 01 c0             	add    eax,eax
     669:	66 01 d0             	add    eax,edx
     66c:	66 c1 e0 03          	shl    eax,0x3
     670:	66 05 e0 a2 00 00    	add    eax,0xa2e0
     676:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
     67a:	67 66 23 45 bc       	and    eax,DWORD PTR [ebp-0x44]
     67f:	67 66 89 45 b4       	mov    DWORD PTR [ebp-0x4c],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:103
						segOfPrg = (memoryTable[blockNum].beginAddr & segMask) >> 4;
     684:	67 66 8b 55 c0       	mov    edx,DWORD PTR [ebp-0x40]
     689:	66 89 d0             	mov    eax,edx
     68c:	66 01 c0             	add    eax,eax
     68f:	66 01 d0             	add    eax,edx
     692:	66 c1 e0 03          	shl    eax,0x3
     696:	66 05 e0 a2 00 00    	add    eax,0xa2e0
     69c:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
     6a0:	67 66 23 45 b8       	and    eax,DWORD PTR [ebp-0x48]
     6a5:	66 c1 f8 04          	sar    eax,0x4
     6a9:	67 66 89 45 b0       	mov    DWORD PTR [ebp-0x50],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:104
						int cs = segOfPrg + (offsetOfPrg >> 4), ip = 0, ss = segOfPrg + (offsetOfPrg >> 4), sp = information[tmp].size + 1024 - 1;
     6ae:	67 66 8b 45 b4       	mov    eax,DWORD PTR [ebp-0x4c]
     6b3:	66 c1 f8 04          	sar    eax,0x4
     6b7:	66 89 c2             	mov    edx,eax
     6ba:	67 66 8b 45 b0       	mov    eax,DWORD PTR [ebp-0x50]
     6bf:	66 01 d0             	add    eax,edx
     6c2:	67 66 89 45 ac       	mov    DWORD PTR [ebp-0x54],eax
     6c7:	67 66 c7 45 a8 00 00 	mov    DWORD PTR [ebp-0x58],0x0
     6ce:	00 00 
     6d0:	67 66 8b 45 b4       	mov    eax,DWORD PTR [ebp-0x4c]
     6d5:	66 c1 f8 04          	sar    eax,0x4
     6d9:	66 89 c2             	mov    edx,eax
     6dc:	67 66 8b 45 b0       	mov    eax,DWORD PTR [ebp-0x50]
     6e1:	66 01 d0             	add    eax,edx
     6e4:	67 66 89 45 a4       	mov    DWORD PTR [ebp-0x5c],eax
     6e9:	67 66 8b 95 54 ff ff 	mov    edx,DWORD PTR [ebp-0xac]
     6f0:	ff 
     6f1:	66 89 d0             	mov    eax,edx
     6f4:	66 01 c0             	add    eax,eax
     6f7:	66 01 d0             	add    eax,edx
     6fa:	66 c1 e0 02          	shl    eax,0x2
     6fe:	66 01 d0             	add    eax,edx
     701:	66 c1 e0 02          	shl    eax,0x2
     705:	66 01 d0             	add    eax,edx
     708:	66 c1 e0 02          	shl    eax,0x2
     70c:	66 05 a8 bf 00 00    	add    eax,0xbfa8
     712:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
     716:	66 05 ff 03 00 00    	add    eax,0x3ff
     71c:	67 66 89 45 a0       	mov    DWORD PTR [ebp-0x60],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:105
						createProcess(findNextProcessItem(), information[tmp].name, information[tmp].size + 1024, cs, ip, ss, sp, blockNum);
     721:	67 66 8b 95 54 ff ff 	mov    edx,DWORD PTR [ebp-0xac]
     728:	ff 
     729:	66 89 d0             	mov    eax,edx
     72c:	66 01 c0             	add    eax,eax
     72f:	66 01 d0             	add    eax,edx
     732:	66 c1 e0 02          	shl    eax,0x2
     736:	66 01 d0             	add    eax,edx
     739:	66 c1 e0 02          	shl    eax,0x2
     73d:	66 01 d0             	add    eax,edx
     740:	66 c1 e0 02          	shl    eax,0x2
     744:	66 05 a8 bf 00 00    	add    eax,0xbfa8
     74a:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
     74e:	67 66 8d b0 00 04 00 	lea    esi,[eax+0x400]
     755:	00 
     756:	67 66 8b 95 54 ff ff 	mov    edx,DWORD PTR [ebp-0xac]
     75d:	ff 
     75e:	66 89 d0             	mov    eax,edx
     761:	66 01 c0             	add    eax,eax
     764:	66 01 d0             	add    eax,edx
     767:	66 c1 e0 02          	shl    eax,0x2
     76b:	66 01 d0             	add    eax,edx
     76e:	66 c1 e0 02          	shl    eax,0x2
     772:	66 01 d0             	add    eax,edx
     775:	66 c1 e0 02          	shl    eax,0x2
     779:	67 66 8d 98 80 bf 00 	lea    ebx,[eax+0xbf80]
     780:	00 
     781:	66 e8 cb 40 00 00    	call   4852 <_findNextProcessItem>
     787:	67 66 8b 55 c0       	mov    edx,DWORD PTR [ebp-0x40]
     78c:	67 66 89 54 24 1c    	mov    DWORD PTR [esp+0x1c],edx
     792:	67 66 8b 55 a0       	mov    edx,DWORD PTR [ebp-0x60]
     797:	67 66 89 54 24 18    	mov    DWORD PTR [esp+0x18],edx
     79d:	67 66 8b 55 a4       	mov    edx,DWORD PTR [ebp-0x5c]
     7a2:	67 66 89 54 24 14    	mov    DWORD PTR [esp+0x14],edx
     7a8:	67 66 8b 55 a8       	mov    edx,DWORD PTR [ebp-0x58]
     7ad:	67 66 89 54 24 10    	mov    DWORD PTR [esp+0x10],edx
     7b3:	67 66 8b 55 ac       	mov    edx,DWORD PTR [ebp-0x54]
     7b8:	67 66 89 54 24 0c    	mov    DWORD PTR [esp+0xc],edx
     7be:	67 66 89 74 24 08    	mov    DWORD PTR [esp+0x8],esi
     7c4:	67 66 89 5c 24 04    	mov    DWORD PTR [esp+0x4],ebx
     7ca:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
     7cf:	66 e8 6e 42 00 00    	call   4a43 <_createProcess>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:106
						ProcessSize += 1;
     7d5:	66 a1 fc a6          	mov    eax,ds:0xa6fc
     7d9:	66 40                	inc    eax
     7db:	66 a3 fc a6          	mov    ds:0xa6fc,eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:107
						loadReal(information[tmp].lmaddress, information[tmp].size, offsetOfPrg, segOfPrg);
     7df:	67 66 8b 95 54 ff ff 	mov    edx,DWORD PTR [ebp-0xac]
     7e6:	ff 
     7e7:	66 89 d0             	mov    eax,edx
     7ea:	66 01 c0             	add    eax,eax
     7ed:	66 01 d0             	add    eax,edx
     7f0:	66 c1 e0 02          	shl    eax,0x2
     7f4:	66 01 d0             	add    eax,edx
     7f7:	66 c1 e0 02          	shl    eax,0x2
     7fb:	66 01 d0             	add    eax,edx
     7fe:	66 c1 e0 02          	shl    eax,0x2
     802:	66 05 a8 bf 00 00    	add    eax,0xbfa8
     808:	67 66 8b 08          	mov    ecx,DWORD PTR [eax]
     80c:	67 66 8b 95 54 ff ff 	mov    edx,DWORD PTR [ebp-0xac]
     813:	ff 
     814:	66 89 d0             	mov    eax,edx
     817:	66 01 c0             	add    eax,eax
     81a:	66 01 d0             	add    eax,edx
     81d:	66 c1 e0 02          	shl    eax,0x2
     821:	66 01 d0             	add    eax,edx
     824:	66 c1 e0 02          	shl    eax,0x2
     828:	66 01 d0             	add    eax,edx
     82b:	66 c1 e0 02          	shl    eax,0x2
     82f:	66 05 a4 bf 00 00    	add    eax,0xbfa4
     835:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
     839:	67 66 8b 55 b0       	mov    edx,DWORD PTR [ebp-0x50]
     83e:	67 66 89 54 24 0c    	mov    DWORD PTR [esp+0xc],edx
     844:	67 66 8b 55 b4       	mov    edx,DWORD PTR [ebp-0x4c]
     849:	67 66 89 54 24 08    	mov    DWORD PTR [esp+0x8],edx
     84f:	67 66 89 4c 24 04    	mov    DWORD PTR [esp+0x4],ecx
     855:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
     85a:	66 e8 42 13 00 00    	call   1ba2 <_loadReal>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:108
						enqueue(&ReadyQue, ProcessSize - 1);
     860:	66 a1 fc a6          	mov    eax,ds:0xa6fc
     864:	66 48                	dec    eax
     866:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
     86c:	67 66 c7 04 24 60 e8 	mov    DWORD PTR [esp],0xe860
     873:	00 00 
     875:	66 e8 d3 6c 00 00    	call   754e <_enqueue>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:111
					}
				}
			} while (str[0] != '\0');
     87b:	67 66 8b 45 c4       	mov    eax,DWORD PTR [ebp-0x3c]
     880:	67 8a 00             	mov    al,BYTE PTR [eax]
     883:	84 c0                	test   al,al
     885:	0f 85 6b fc          	jne    4f4 <.debug_line+0x2aa>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:112
			int queSize = size(&BlockedQue);
     889:	67 66 c7 04 24 a0 a6 	mov    DWORD PTR [esp],0xa6a0
     890:	00 00 
     892:	66 e8 70 6c 00 00    	call   7508 <_size>
     898:	67 66 89 45 9c       	mov    DWORD PTR [ebp-0x64],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:113
			for (int i = 0; i < queSize; ++i)
     89d:	67 66 c7 45 f4 00 00 	mov    DWORD PTR [ebp-0xc],0x0
     8a4:	00 00 
     8a6:	e9 b4 00             	jmp    95d <.debug_line+0x713>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:115
			{
				dequeue(&BlockedQue, &tmp);
     8a9:	67 66 8d 85 54 ff ff 	lea    eax,[ebp-0xac]
     8b0:	ff 
     8b1:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
     8b7:	67 66 c7 04 24 a0 a6 	mov    DWORD PTR [esp],0xa6a0
     8be:	00 00 
     8c0:	66 e8 f5 6c 00 00    	call   75bb <_dequeue>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:116
				if (processTable[tmp].waitProcess == -1) {
     8c6:	67 66 8b 95 54 ff ff 	mov    edx,DWORD PTR [ebp-0xac]
     8cd:	ff 
     8ce:	66 89 d0             	mov    eax,edx
     8d1:	66 c1 e0 03          	shl    eax,0x3
     8d5:	66 01 d0             	add    eax,edx
     8d8:	66 01 c0             	add    eax,eax
     8db:	66 01 d0             	add    eax,edx
     8de:	66 c1 e0 04          	shl    eax,0x4
     8e2:	66 05 dc d0 00 00    	add    eax,0xd0dc
     8e8:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
     8ec:	66 83 f8 ff          	cmp    eax,0xffffffff
     8f0:	75 49                	jne    93b <.debug_line+0x6f1>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:117
					processTable[tmp].status = ready;
     8f2:	67 66 8b 95 54 ff ff 	mov    edx,DWORD PTR [ebp-0xac]
     8f9:	ff 
     8fa:	66 89 d0             	mov    eax,edx
     8fd:	66 c1 e0 03          	shl    eax,0x3
     901:	66 01 d0             	add    eax,edx
     904:	66 01 c0             	add    eax,eax
     907:	66 01 d0             	add    eax,edx
     90a:	66 c1 e0 04          	shl    eax,0x4
     90e:	66 05 ac d1 00 00    	add    eax,0xd1ac
     914:	67 66 c7 00 01 00 00 	mov    DWORD PTR [eax],0x1
     91b:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:118
					enqueue(&ReadyQue, tmp);
     91c:	67 66 8b 85 54 ff ff 	mov    eax,DWORD PTR [ebp-0xac]
     923:	ff 
     924:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
     92a:	67 66 c7 04 24 60 e8 	mov    DWORD PTR [esp],0xe860
     931:	00 00 
     933:	66 e8 15 6c 00 00    	call   754e <_enqueue>
     939:	eb 1d                	jmp    958 <.debug_line+0x70e>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:120
				} else {
					enqueue(&BlockedQue, tmp);
     93b:	67 66 8b 85 54 ff ff 	mov    eax,DWORD PTR [ebp-0xac]
     942:	ff 
     943:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
     949:	67 66 c7 04 24 a0 a6 	mov    DWORD PTR [esp],0xa6a0
     950:	00 00 
     952:	66 e8 f6 6b 00 00    	call   754e <_enqueue>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:113
			for (int i = 0; i < queSize; ++i)
     958:	67 66 ff 45 f4       	inc    DWORD PTR [ebp-0xc]
     95d:	67 66 8b 45 f4       	mov    eax,DWORD PTR [ebp-0xc]
     962:	67 66 3b 45 9c       	cmp    eax,DWORD PTR [ebp-0x64]
     967:	0f 8c 3e ff          	jl     8a9 <.debug_line+0x65f>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:123
				}
			}
			runSub = 1;
     96b:	66 c7 06 d8 a2 01 00 	mov    DWORD PTR ds:0xa2d8,0x1
     972:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:124
			__asm__("int $0x8\n");
     974:	cd 08                	int    0x8
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:125
			runSub = 0;
     976:	66 c7 06 d8 a2 00 00 	mov    DWORD PTR ds:0xa2d8,0x0
     97d:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:126
			clear();
     97f:	66 e8 18 1f 00 00    	call   289d <_clear>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:89
		{
     985:	e9 36 0b             	jmp    14be <__section_alignment__+0x4be>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:128
		}
		else if (in[0] == '.' && in[1] == '/')
     988:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
     98d:	67 8a 00             	mov    al,BYTE PTR [eax]
     990:	3c 2e                	cmp    al,0x2e
     992:	0f 85 5c 03          	jne    cf2 <.debug_info+0x10f>
     996:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
     99b:	66 40                	inc    eax
     99d:	67 8a 00             	mov    al,BYTE PTR [eax]
     9a0:	3c 2f                	cmp    al,0x2f
     9a2:	0f 85 4c 03          	jne    cf2 <.debug_info+0x10f>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:130
		{
			tmp = find(in + 2);
     9a6:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
     9ab:	66 83 c0 02          	add    eax,0x2
     9af:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
     9b4:	66 e8 46 2e 00 00    	call   3800 <_find>
     9ba:	67 66 89 85 54 ff ff 	mov    DWORD PTR [ebp-0xac],eax
     9c1:	ff 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:131
			if (tmp != -1 && information[tmp].deleted != 1) {
     9c2:	67 66 8b 85 54 ff ff 	mov    eax,DWORD PTR [ebp-0xac]
     9c9:	ff 
     9ca:	66 83 f8 ff          	cmp    eax,0xffffffff
     9ce:	0f 84 e5 0a          	je     14b7 <__section_alignment__+0x4b7>
     9d2:	67 66 8b 95 54 ff ff 	mov    edx,DWORD PTR [ebp-0xac]
     9d9:	ff 
     9da:	66 89 d0             	mov    eax,edx
     9dd:	66 01 c0             	add    eax,eax
     9e0:	66 01 d0             	add    eax,edx
     9e3:	66 c1 e0 02          	shl    eax,0x2
     9e7:	66 01 d0             	add    eax,edx
     9ea:	66 c1 e0 02          	shl    eax,0x2
     9ee:	66 01 d0             	add    eax,edx
     9f1:	66 c1 e0 02          	shl    eax,0x2
     9f5:	66 05 ac bf 00 00    	add    eax,0xbfac
     9fb:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
     9ff:	66 83 f8 01          	cmp    eax,0x1
     a03:	0f 84 b0 0a          	je     14b7 <__section_alignment__+0x4b7>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:132
				int blockNum = findEnoughBlock(information[tmp].size + 1024);
     a07:	67 66 8b 95 54 ff ff 	mov    edx,DWORD PTR [ebp-0xac]
     a0e:	ff 
     a0f:	66 89 d0             	mov    eax,edx
     a12:	66 01 c0             	add    eax,eax
     a15:	66 01 d0             	add    eax,edx
     a18:	66 c1 e0 02          	shl    eax,0x2
     a1c:	66 01 d0             	add    eax,edx
     a1f:	66 c1 e0 02          	shl    eax,0x2
     a23:	66 01 d0             	add    eax,edx
     a26:	66 c1 e0 02          	shl    eax,0x2
     a2a:	66 05 a8 bf 00 00    	add    eax,0xbfa8
     a30:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
     a34:	66 05 00 04 00 00    	add    eax,0x400
     a3a:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
     a3f:	66 e8 f7 62 00 00    	call   6d3c <_findEnoughBlock>
     a45:	67 66 89 45 98       	mov    DWORD PTR [ebp-0x68],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:133
				blockNum = require(information[tmp].size + 1024, blockNum);
     a4a:	67 66 8b 95 54 ff ff 	mov    edx,DWORD PTR [ebp-0xac]
     a51:	ff 
     a52:	66 89 d0             	mov    eax,edx
     a55:	66 01 c0             	add    eax,eax
     a58:	66 01 d0             	add    eax,edx
     a5b:	66 c1 e0 02          	shl    eax,0x2
     a5f:	66 01 d0             	add    eax,edx
     a62:	66 c1 e0 02          	shl    eax,0x2
     a66:	66 01 d0             	add    eax,edx
     a69:	66 c1 e0 02          	shl    eax,0x2
     a6d:	66 05 a8 bf 00 00    	add    eax,0xbfa8
     a73:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
     a77:	67 66 8d 90 00 04 00 	lea    edx,[eax+0x400]
     a7e:	00 
     a7f:	67 66 8b 45 98       	mov    eax,DWORD PTR [ebp-0x68]
     a84:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
     a8a:	67 66 89 14 24       	mov    DWORD PTR [esp],edx
     a8f:	66 e8 50 63 00 00    	call   6de5 <_require>
     a95:	67 66 89 45 98       	mov    DWORD PTR [ebp-0x68],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:135
				int offsetOfPrg, segOfPrg;
				int offsetMask = 0x0000ffff;
     a9a:	67 66 c7 45 94 ff ff 	mov    DWORD PTR [ebp-0x6c],0xffff
     aa1:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:136
				int segMask = 0xf0000;
     aa3:	67 66 c7 45 90 00 00 	mov    DWORD PTR [ebp-0x70],0xf0000
     aaa:	0f 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:137
				offsetOfPrg = memoryTable[blockNum].beginAddr & offsetMask;
     aac:	67 66 8b 55 98       	mov    edx,DWORD PTR [ebp-0x68]
     ab1:	66 89 d0             	mov    eax,edx
     ab4:	66 01 c0             	add    eax,eax
     ab7:	66 01 d0             	add    eax,edx
     aba:	66 c1 e0 03          	shl    eax,0x3
     abe:	66 05 e0 a2 00 00    	add    eax,0xa2e0
     ac4:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
     ac8:	67 66 23 45 94       	and    eax,DWORD PTR [ebp-0x6c]
     acd:	67 66 89 45 8c       	mov    DWORD PTR [ebp-0x74],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:138
				segOfPrg = (memoryTable[blockNum].beginAddr & segMask) >> 4;
     ad2:	67 66 8b 55 98       	mov    edx,DWORD PTR [ebp-0x68]
     ad7:	66 89 d0             	mov    eax,edx
     ada:	66 01 c0             	add    eax,eax
     add:	66 01 d0             	add    eax,edx
     ae0:	66 c1 e0 03          	shl    eax,0x3
     ae4:	66 05 e0 a2 00 00    	add    eax,0xa2e0
     aea:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
     aee:	67 66 23 45 90       	and    eax,DWORD PTR [ebp-0x70]
     af3:	66 c1 f8 04          	sar    eax,0x4
     af7:	67 66 89 45 88       	mov    DWORD PTR [ebp-0x78],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:139
				int cs = segOfPrg + (offsetOfPrg >> 4), ip = 0, ss = segOfPrg + (offsetOfPrg >> 4), sp = information[tmp].size + 1024 - 1;
     afc:	67 66 8b 45 8c       	mov    eax,DWORD PTR [ebp-0x74]
     b01:	66 c1 f8 04          	sar    eax,0x4
     b05:	66 89 c2             	mov    edx,eax
     b08:	67 66 8b 45 88       	mov    eax,DWORD PTR [ebp-0x78]
     b0d:	66 01 d0             	add    eax,edx
     b10:	67 66 89 45 84       	mov    DWORD PTR [ebp-0x7c],eax
     b15:	67 66 c7 45 80 00 00 	mov    DWORD PTR [ebp-0x80],0x0
     b1c:	00 00 
     b1e:	67 66 8b 45 8c       	mov    eax,DWORD PTR [ebp-0x74]
     b23:	66 c1 f8 04          	sar    eax,0x4
     b27:	66 89 c2             	mov    edx,eax
     b2a:	67 66 8b 45 88       	mov    eax,DWORD PTR [ebp-0x78]
     b2f:	66 01 d0             	add    eax,edx
     b32:	67 66 89 85 7c ff ff 	mov    DWORD PTR [ebp-0x84],eax
     b39:	ff 
     b3a:	67 66 8b 95 54 ff ff 	mov    edx,DWORD PTR [ebp-0xac]
     b41:	ff 
     b42:	66 89 d0             	mov    eax,edx
     b45:	66 01 c0             	add    eax,eax
     b48:	66 01 d0             	add    eax,edx
     b4b:	66 c1 e0 02          	shl    eax,0x2
     b4f:	66 01 d0             	add    eax,edx
     b52:	66 c1 e0 02          	shl    eax,0x2
     b56:	66 01 d0             	add    eax,edx
     b59:	66 c1 e0 02          	shl    eax,0x2
     b5d:	66 05 a8 bf 00 00    	add    eax,0xbfa8
     b63:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
     b67:	66 05 ff 03 00 00    	add    eax,0x3ff
     b6d:	67 66 89 85 78 ff ff 	mov    DWORD PTR [ebp-0x88],eax
     b74:	ff 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:140
				createProcess(findNextProcessItem(), information[tmp].name, information[tmp].size + 1024, cs, ip, ss, sp, blockNum);
     b75:	67 66 8b 95 54 ff ff 	mov    edx,DWORD PTR [ebp-0xac]
     b7c:	ff 
     b7d:	66 89 d0             	mov    eax,edx
     b80:	66 01 c0             	add    eax,eax
     b83:	66 01 d0             	add    eax,edx
     b86:	66 c1 e0 02          	shl    eax,0x2
     b8a:	66 01 d0             	add    eax,edx
     b8d:	66 c1 e0 02          	shl    eax,0x2
     b91:	66 01 d0             	add    eax,edx
     b94:	66 c1 e0 02          	shl    eax,0x2
     b98:	66 05 a8 bf 00 00    	add    eax,0xbfa8
     b9e:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
     ba2:	67 66 8d b0 00 04 00 	lea    esi,[eax+0x400]
     ba9:	00 
     baa:	67 66 8b 95 54 ff ff 	mov    edx,DWORD PTR [ebp-0xac]
     bb1:	ff 
     bb2:	66 89 d0             	mov    eax,edx
     bb5:	66 01 c0             	add    eax,eax
     bb8:	66 01 d0             	add    eax,edx
     bbb:	66 c1 e0 02          	shl    eax,0x2
     bbf:	66 01 d0             	add    eax,edx
     bc2:	66 c1 e0 02          	shl    eax,0x2
     bc6:	66 01 d0             	add    eax,edx
     bc9:	66 c1 e0 02          	shl    eax,0x2
     bcd:	67 66 8d 98 80 bf 00 	lea    ebx,[eax+0xbf80]
     bd4:	00 
     bd5:	66 e8 77 3c 00 00    	call   4852 <_findNextProcessItem>
     bdb:	67 66 8b 55 98       	mov    edx,DWORD PTR [ebp-0x68]
     be0:	67 66 89 54 24 1c    	mov    DWORD PTR [esp+0x1c],edx
     be6:	67 66 8b 95 78 ff ff 	mov    edx,DWORD PTR [ebp-0x88]
     bed:	ff 
     bee:	67 66 89 54 24 18    	mov    DWORD PTR [esp+0x18],edx
     bf4:	67 66 8b 95 7c ff ff 	mov    edx,DWORD PTR [ebp-0x84]
     bfb:	ff 
     bfc:	67 66 89 54 24 14    	mov    DWORD PTR [esp+0x14],edx
     c02:	67 66 8b 55 80       	mov    edx,DWORD PTR [ebp-0x80]
     c07:	67 66 89 54 24 10    	mov    DWORD PTR [esp+0x10],edx
     c0d:	67 66 8b 55 84       	mov    edx,DWORD PTR [ebp-0x7c]
     c12:	67 66 89 54 24 0c    	mov    DWORD PTR [esp+0xc],edx
     c18:	67 66 89 74 24 08    	mov    DWORD PTR [esp+0x8],esi
     c1e:	67 66 89 5c 24 04    	mov    DWORD PTR [esp+0x4],ebx
     c24:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
     c29:	66 e8 14 3e 00 00    	call   4a43 <_createProcess>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:141
				ProcessSize += 1;
     c2f:	66 a1 fc a6          	mov    eax,ds:0xa6fc
     c33:	66 40                	inc    eax
     c35:	66 a3 fc a6          	mov    ds:0xa6fc,eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:142
				loadReal(information[tmp].lmaddress, information[tmp].size, offsetOfPrg, segOfPrg);
     c39:	67 66 8b 95 54 ff ff 	mov    edx,DWORD PTR [ebp-0xac]
     c40:	ff 
     c41:	66 89 d0             	mov    eax,edx
     c44:	66 01 c0             	add    eax,eax
     c47:	66 01 d0             	add    eax,edx
     c4a:	66 c1 e0 02          	shl    eax,0x2
     c4e:	66 01 d0             	add    eax,edx
     c51:	66 c1 e0 02          	shl    eax,0x2
     c55:	66 01 d0             	add    eax,edx
     c58:	66 c1 e0 02          	shl    eax,0x2
     c5c:	66 05 a8 bf 00 00    	add    eax,0xbfa8
     c62:	67 66 8b 08          	mov    ecx,DWORD PTR [eax]
     c66:	67 66 8b 95 54 ff ff 	mov    edx,DWORD PTR [ebp-0xac]
     c6d:	ff 
     c6e:	66 89 d0             	mov    eax,edx
     c71:	66 01 c0             	add    eax,eax
     c74:	66 01 d0             	add    eax,edx
     c77:	66 c1 e0 02          	shl    eax,0x2
     c7b:	66 01 d0             	add    eax,edx
     c7e:	66 c1 e0 02          	shl    eax,0x2
     c82:	66 01 d0             	add    eax,edx
     c85:	66 c1 e0 02          	shl    eax,0x2
     c89:	66 05 a4 bf 00 00    	add    eax,0xbfa4
     c8f:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
     c93:	67 66 8b 55 88       	mov    edx,DWORD PTR [ebp-0x78]
     c98:	67 66 89 54 24 0c    	mov    DWORD PTR [esp+0xc],edx
     c9e:	67 66 8b 55 8c       	mov    edx,DWORD PTR [ebp-0x74]
     ca3:	67 66 89 54 24 08    	mov    DWORD PTR [esp+0x8],edx
     ca9:	67 66 89 4c 24 04    	mov    DWORD PTR [esp+0x4],ecx
     caf:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
     cb4:	66 e8 e8 0e 00 00    	call   1ba2 <_loadReal>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:143
				enqueue(&ReadyQue, ProcessSize - 1);
     cba:	66 a1 fc a6          	mov    eax,ds:0xa6fc
     cbe:	66 48                	dec    eax
     cc0:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
     cc6:	67 66 c7 04 24 60 e8 	mov    DWORD PTR [esp],0xe860
     ccd:	00 00 
     ccf:	66 e8 79 68 00 00    	call   754e <_enqueue>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:144
				runSub = 1;
     cd5:	66 c7 06 d8 a2 01 00 	mov    DWORD PTR ds:0xa2d8,0x1
     cdc:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:145
				__asm__("int $0x8\n");
     cde:	cd 08                	int    0x8
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:146
				runSub = 0;
     ce0:	66 c7 06 d8 a2 00 00 	mov    DWORD PTR ds:0xa2d8,0x0
     ce7:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:147
				clear();
     ce9:	66 e8 ae 1b 00 00    	call   289d <_clear>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:131
			if (tmp != -1 && information[tmp].deleted != 1) {
     cef:	e9 c5 07             	jmp    14b7 <__section_alignment__+0x4b7>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:150
			}
		}
		else if (in[0] == 't' && in[1] == 'y' &&
     cf2:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
     cf7:	67 8a 00             	mov    al,BYTE PTR [eax]
     cfa:	3c 74                	cmp    al,0x74
     cfc:	0f 85 e4 01          	jne    ee4 <.debug_info+0x301>
     d00:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
     d05:	66 40                	inc    eax
     d07:	67 8a 00             	mov    al,BYTE PTR [eax]
     d0a:	3c 79                	cmp    al,0x79
     d0c:	0f 85 d4 01          	jne    ee4 <.debug_info+0x301>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:151
		         in[2] == 'p' && in[3] == 'e') {
     d10:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
     d15:	66 83 c0 02          	add    eax,0x2
     d19:	67 8a 00             	mov    al,BYTE PTR [eax]
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:150
		else if (in[0] == 't' && in[1] == 'y' &&
     d1c:	3c 70                	cmp    al,0x70
     d1e:	0f 85 c2 01          	jne    ee4 <.debug_info+0x301>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:151
		         in[2] == 'p' && in[3] == 'e') {
     d22:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
     d27:	66 83 c0 03          	add    eax,0x3
     d2b:	67 8a 00             	mov    al,BYTE PTR [eax]
     d2e:	3c 65                	cmp    al,0x65
     d30:	0f 85 b0 01          	jne    ee4 <.debug_info+0x301>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:152
			tmp = find(in + 5);
     d34:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
     d39:	66 83 c0 05          	add    eax,0x5
     d3d:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
     d42:	66 e8 b8 2a 00 00    	call   3800 <_find>
     d48:	67 66 89 85 54 ff ff 	mov    DWORD PTR [ebp-0xac],eax
     d4f:	ff 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:153
			if (tmp != -1 && information[tmp].deleted != 1) {
     d50:	67 66 8b 85 54 ff ff 	mov    eax,DWORD PTR [ebp-0xac]
     d57:	ff 
     d58:	66 83 f8 ff          	cmp    eax,0xffffffff
     d5c:	0f 84 5a 07          	je     14ba <__section_alignment__+0x4ba>
     d60:	67 66 8b 95 54 ff ff 	mov    edx,DWORD PTR [ebp-0xac]
     d67:	ff 
     d68:	66 89 d0             	mov    eax,edx
     d6b:	66 01 c0             	add    eax,eax
     d6e:	66 01 d0             	add    eax,edx
     d71:	66 c1 e0 02          	shl    eax,0x2
     d75:	66 01 d0             	add    eax,edx
     d78:	66 c1 e0 02          	shl    eax,0x2
     d7c:	66 01 d0             	add    eax,edx
     d7f:	66 c1 e0 02          	shl    eax,0x2
     d83:	66 05 ac bf 00 00    	add    eax,0xbfac
     d89:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
     d8d:	66 83 f8 01          	cmp    eax,0x1
     d91:	0f 84 25 07          	je     14ba <__section_alignment__+0x4ba>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:154
				fopen(in + 5, readAndWriteFile);
     d95:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
     d9a:	66 83 c0 05          	add    eax,0x5
     d9e:	67 66 c7 44 24 04 03 	mov    DWORD PTR [esp+0x4],0x3
     da5:	00 00 00 
     da8:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
     dad:	66 e8 84 30 00 00    	call   3e37 <_fopen>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:155
				char * contents = malloc(information[tmp].size);
     db3:	67 66 8b 95 54 ff ff 	mov    edx,DWORD PTR [ebp-0xac]
     dba:	ff 
     dbb:	66 89 d0             	mov    eax,edx
     dbe:	66 01 c0             	add    eax,eax
     dc1:	66 01 d0             	add    eax,edx
     dc4:	66 c1 e0 02          	shl    eax,0x2
     dc8:	66 01 d0             	add    eax,edx
     dcb:	66 c1 e0 02          	shl    eax,0x2
     dcf:	66 01 d0             	add    eax,edx
     dd2:	66 c1 e0 02          	shl    eax,0x2
     dd6:	66 05 a8 bf 00 00    	add    eax,0xbfa8
     ddc:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
     de0:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
     de5:	66 e8 1c 4f 00 00    	call   5d07 <_malloc>
     deb:	67 66 89 85 74 ff ff 	mov    DWORD PTR [ebp-0x8c],eax
     df2:	ff 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:157
				// fread(in + 5, contents, information[tmp].size);
				fread(in + 5, contents, information[tmp].size);
     df3:	67 66 8b 95 54 ff ff 	mov    edx,DWORD PTR [ebp-0xac]
     dfa:	ff 
     dfb:	66 89 d0             	mov    eax,edx
     dfe:	66 01 c0             	add    eax,eax
     e01:	66 01 d0             	add    eax,edx
     e04:	66 c1 e0 02          	shl    eax,0x2
     e08:	66 01 d0             	add    eax,edx
     e0b:	66 c1 e0 02          	shl    eax,0x2
     e0f:	66 01 d0             	add    eax,edx
     e12:	66 c1 e0 02          	shl    eax,0x2
     e16:	66 05 a8 bf 00 00    	add    eax,0xbfa8
     e1c:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
     e20:	67 66 8b 55 e8       	mov    edx,DWORD PTR [ebp-0x18]
     e25:	66 83 c2 05          	add    edx,0x5
     e29:	67 66 89 44 24 08    	mov    DWORD PTR [esp+0x8],eax
     e2f:	67 66 8b 85 74 ff ff 	mov    eax,DWORD PTR [ebp-0x8c]
     e36:	ff 
     e37:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
     e3d:	67 66 89 14 24       	mov    DWORD PTR [esp],edx
     e42:	66 e8 dc 35 00 00    	call   4424 <_fread>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:159
				// printSentence(contents, line, 0, information[tmp].size, white);
				printSentence(contents, line, 0, information[tmp].size, white);
     e48:	67 66 8b 95 54 ff ff 	mov    edx,DWORD PTR [ebp-0xac]
     e4f:	ff 
     e50:	66 89 d0             	mov    eax,edx
     e53:	66 01 c0             	add    eax,eax
     e56:	66 01 d0             	add    eax,edx
     e59:	66 c1 e0 02          	shl    eax,0x2
     e5d:	66 01 d0             	add    eax,edx
     e60:	66 c1 e0 02          	shl    eax,0x2
     e64:	66 01 d0             	add    eax,edx
     e67:	66 c1 e0 02          	shl    eax,0x2
     e6b:	66 05 a8 bf 00 00    	add    eax,0xbfa8
     e71:	67 66 8b 10          	mov    edx,DWORD PTR [eax]
     e75:	66 a1 00 a2          	mov    eax,ds:0xa200
     e79:	67 66 c7 44 24 10 0f 	mov    DWORD PTR [esp+0x10],0xf
     e80:	00 00 00 
     e83:	67 66 89 54 24 0c    	mov    DWORD PTR [esp+0xc],edx
     e89:	67 66 c7 44 24 08 00 	mov    DWORD PTR [esp+0x8],0x0
     e90:	00 00 00 
     e93:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
     e99:	67 66 8b 85 74 ff ff 	mov    eax,DWORD PTR [ebp-0x8c]
     ea0:	ff 
     ea1:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
     ea6:	66 e8 49 0b 00 00    	call   19f5 <_printSentence>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:160
				fclose(in + 5);
     eac:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
     eb1:	66 83 c0 05          	add    eax,0x5
     eb5:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
     eba:	66 e8 5d 33 00 00    	call   421d <_fclose>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:161
				line += countLines(contents);
     ec0:	67 66 8b 85 74 ff ff 	mov    eax,DWORD PTR [ebp-0x8c]
     ec7:	ff 
     ec8:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
     ecd:	66 e8 8b 18 00 00    	call   275e <_countLines>
     ed3:	66 89 c2             	mov    edx,eax
     ed6:	66 a1 00 a2          	mov    eax,ds:0xa200
     eda:	66 01 d0             	add    eax,edx
     edd:	66 a3 00 a2          	mov    ds:0xa200,eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:153
			if (tmp != -1 && information[tmp].deleted != 1) {
     ee1:	e9 d6 05             	jmp    14ba <__section_alignment__+0x4ba>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:164
			}
		}
		else if (in[0] == 'r' && in[1] == 'm') {
     ee4:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
     ee9:	67 8a 00             	mov    al,BYTE PTR [eax]
     eec:	3c 72                	cmp    al,0x72
     eee:	0f 85 86 00          	jne    f78 <.debug_info+0x395>
     ef2:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
     ef7:	66 40                	inc    eax
     ef9:	67 8a 00             	mov    al,BYTE PTR [eax]
     efc:	3c 6d                	cmp    al,0x6d
     efe:	75 78                	jne    f78 <.debug_info+0x395>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:165
			tmp = find(in + 3);
     f00:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
     f05:	66 83 c0 03          	add    eax,0x3
     f09:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
     f0e:	66 e8 ec 28 00 00    	call   3800 <_find>
     f14:	67 66 89 85 54 ff ff 	mov    DWORD PTR [ebp-0xac],eax
     f1b:	ff 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:166
			if (tmp != -1 && information[tmp].deleted != 1) {
     f1c:	67 66 8b 85 54 ff ff 	mov    eax,DWORD PTR [ebp-0xac]
     f23:	ff 
     f24:	66 83 f8 ff          	cmp    eax,0xffffffff
     f28:	0f 84 91 05          	je     14bd <__section_alignment__+0x4bd>
     f2c:	67 66 8b 95 54 ff ff 	mov    edx,DWORD PTR [ebp-0xac]
     f33:	ff 
     f34:	66 89 d0             	mov    eax,edx
     f37:	66 01 c0             	add    eax,eax
     f3a:	66 01 d0             	add    eax,edx
     f3d:	66 c1 e0 02          	shl    eax,0x2
     f41:	66 01 d0             	add    eax,edx
     f44:	66 c1 e0 02          	shl    eax,0x2
     f48:	66 01 d0             	add    eax,edx
     f4b:	66 c1 e0 02          	shl    eax,0x2
     f4f:	66 05 ac bf 00 00    	add    eax,0xbfac
     f55:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
     f59:	66 83 f8 01          	cmp    eax,0x1
     f5d:	0f 84 5c 05          	je     14bd <__section_alignment__+0x4bd>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:167
				fdelete(in + 3);
     f61:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
     f66:	66 83 c0 03          	add    eax,0x3
     f6a:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
     f6f:	66 e8 ba 37 00 00    	call   472f <_fdelete>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:166
			if (tmp != -1 && information[tmp].deleted != 1) {
     f75:	e9 45 05             	jmp    14bd <__section_alignment__+0x4bd>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:170
			}
		}
		else if (in[0] == 'k' && in[1] == 'i' &&
     f78:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
     f7d:	67 8a 00             	mov    al,BYTE PTR [eax]
     f80:	3c 6b                	cmp    al,0x6b
     f82:	75 50                	jne    fd4 <.debug_info+0x3f1>
     f84:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
     f89:	66 40                	inc    eax
     f8b:	67 8a 00             	mov    al,BYTE PTR [eax]
     f8e:	3c 69                	cmp    al,0x69
     f90:	75 42                	jne    fd4 <.debug_info+0x3f1>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:171
		         in[2] == 'l' && in[3] == 'l') {
     f92:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
     f97:	66 83 c0 02          	add    eax,0x2
     f9b:	67 8a 00             	mov    al,BYTE PTR [eax]
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:170
		else if (in[0] == 'k' && in[1] == 'i' &&
     f9e:	3c 6c                	cmp    al,0x6c
     fa0:	75 32                	jne    fd4 <.debug_info+0x3f1>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:171
		         in[2] == 'l' && in[3] == 'l') {
     fa2:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
     fa7:	66 83 c0 03          	add    eax,0x3
     fab:	67 8a 00             	mov    al,BYTE PTR [eax]
     fae:	3c 6c                	cmp    al,0x6c
     fb0:	75 22                	jne    fd4 <.debug_info+0x3f1>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:172
			kill(in[5] - '0');
     fb2:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
     fb7:	66 83 c0 05          	add    eax,0x5
     fbb:	67 8a 00             	mov    al,BYTE PTR [eax]
     fbe:	66 0f be c0          	movsx  eax,al
     fc2:	66 83 e8 30          	sub    eax,0x30
     fc6:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
     fcb:	66 e8 7d 21 00 00    	call   314e <_kill>
     fd1:	e9 ea 04             	jmp    14be <__section_alignment__+0x4be>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:174
		}
		else if (in[0] == 's' && in[1] == 'u' &&
     fd4:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
     fd9:	67 8a 00             	mov    al,BYTE PTR [eax]
     fdc:	3c 73                	cmp    al,0x73
     fde:	75 50                	jne    1030 <__section_alignment__+0x30>
     fe0:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
     fe5:	66 40                	inc    eax
     fe7:	67 8a 00             	mov    al,BYTE PTR [eax]
     fea:	3c 75                	cmp    al,0x75
     fec:	75 42                	jne    1030 <__section_alignment__+0x30>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:175
		         in[2] == 's' && in[3] == 'p') {
     fee:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
     ff3:	66 83 c0 02          	add    eax,0x2
     ff7:	67 8a 00             	mov    al,BYTE PTR [eax]
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:174
		else if (in[0] == 's' && in[1] == 'u' &&
     ffa:	3c 73                	cmp    al,0x73
     ffc:	75 32                	jne    1030 <__section_alignment__+0x30>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:175
		         in[2] == 's' && in[3] == 'p') {
     ffe:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
    1003:	66 83 c0 03          	add    eax,0x3
    1007:	67 8a 00             	mov    al,BYTE PTR [eax]
    100a:	3c 70                	cmp    al,0x70
    100c:	75 22                	jne    1030 <__section_alignment__+0x30>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:176
			Tosuspend(in[5] - '0');
    100e:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
    1013:	66 83 c0 05          	add    eax,0x5
    1017:	67 8a 00             	mov    al,BYTE PTR [eax]
    101a:	66 0f be c0          	movsx  eax,al
    101e:	66 83 e8 30          	sub    eax,0x30
    1022:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    1027:	66 e8 df 45 00 00    	call   560c <_Tosuspend>
    102d:	e9 8e 04             	jmp    14be <__section_alignment__+0x4be>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:178
		}
		else if (in[0] == 'a' && in[1] == 'c' &&
    1030:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
    1035:	67 8a 00             	mov    al,BYTE PTR [eax]
    1038:	3c 61                	cmp    al,0x61
    103a:	0f 85 34 02          	jne    1272 <__section_alignment__+0x272>
    103e:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
    1043:	66 40                	inc    eax
    1045:	67 8a 00             	mov    al,BYTE PTR [eax]
    1048:	3c 63                	cmp    al,0x63
    104a:	0f 85 24 02          	jne    1272 <__section_alignment__+0x272>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:179
		         in[2] == 't' && in[3] == 'i') {
    104e:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
    1053:	66 83 c0 02          	add    eax,0x2
    1057:	67 8a 00             	mov    al,BYTE PTR [eax]
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:178
		else if (in[0] == 'a' && in[1] == 'c' &&
    105a:	3c 74                	cmp    al,0x74
    105c:	0f 85 12 02          	jne    1272 <__section_alignment__+0x272>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:179
		         in[2] == 't' && in[3] == 'i') {
    1060:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
    1065:	66 83 c0 03          	add    eax,0x3
    1069:	67 8a 00             	mov    al,BYTE PTR [eax]
    106c:	3c 69                	cmp    al,0x69
    106e:	0f 85 00 02          	jne    1272 <__section_alignment__+0x272>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:180
			tmp = in[5] - '0';
    1072:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
    1077:	66 83 c0 05          	add    eax,0x5
    107b:	67 8a 00             	mov    al,BYTE PTR [eax]
    107e:	66 0f be c0          	movsx  eax,al
    1082:	66 83 e8 30          	sub    eax,0x30
    1086:	67 66 89 85 54 ff ff 	mov    DWORD PTR [ebp-0xac],eax
    108d:	ff 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:181
			int blockNum = findEnoughBlock(processTable[tmp].size);
    108e:	67 66 8b 95 54 ff ff 	mov    edx,DWORD PTR [ebp-0xac]
    1095:	ff 
    1096:	66 89 d0             	mov    eax,edx
    1099:	66 c1 e0 03          	shl    eax,0x3
    109d:	66 01 d0             	add    eax,edx
    10a0:	66 01 c0             	add    eax,eax
    10a3:	66 01 d0             	add    eax,edx
    10a6:	66 c1 e0 04          	shl    eax,0x4
    10aa:	66 05 b0 d0 00 00    	add    eax,0xd0b0
    10b0:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    10b4:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    10b9:	66 e8 7d 5c 00 00    	call   6d3c <_findEnoughBlock>
    10bf:	67 66 89 85 70 ff ff 	mov    DWORD PTR [ebp-0x90],eax
    10c6:	ff 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:182
			blockNum = require(processTable[tmp].size, blockNum);
    10c7:	67 66 8b 95 54 ff ff 	mov    edx,DWORD PTR [ebp-0xac]
    10ce:	ff 
    10cf:	66 89 d0             	mov    eax,edx
    10d2:	66 c1 e0 03          	shl    eax,0x3
    10d6:	66 01 d0             	add    eax,edx
    10d9:	66 01 c0             	add    eax,eax
    10dc:	66 01 d0             	add    eax,edx
    10df:	66 c1 e0 04          	shl    eax,0x4
    10e3:	66 05 b0 d0 00 00    	add    eax,0xd0b0
    10e9:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    10ed:	67 66 8b 95 70 ff ff 	mov    edx,DWORD PTR [ebp-0x90]
    10f4:	ff 
    10f5:	67 66 89 54 24 04    	mov    DWORD PTR [esp+0x4],edx
    10fb:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    1100:	66 e8 df 5c 00 00    	call   6de5 <_require>
    1106:	67 66 89 85 70 ff ff 	mov    DWORD PTR [ebp-0x90],eax
    110d:	ff 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:183
			processTable[tmp].blockNum = blockNum;
    110e:	67 66 8b 95 54 ff ff 	mov    edx,DWORD PTR [ebp-0xac]
    1115:	ff 
    1116:	66 89 d0             	mov    eax,edx
    1119:	66 c1 e0 03          	shl    eax,0x3
    111d:	66 01 d0             	add    eax,edx
    1120:	66 01 c0             	add    eax,eax
    1123:	66 01 d0             	add    eax,edx
    1126:	66 c1 e0 04          	shl    eax,0x4
    112a:	67 66 8d 90 a8 d0 00 	lea    edx,[eax+0xd0a8]
    1131:	00 
    1132:	67 66 8b 85 70 ff ff 	mov    eax,DWORD PTR [ebp-0x90]
    1139:	ff 
    113a:	67 66 89 02          	mov    DWORD PTR [edx],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:185
			int offsetOfPrg, segOfPrg;
			int offsetMask = 0x0000ffff;
    113e:	67 66 c7 85 6c ff ff 	mov    DWORD PTR [ebp-0x94],0xffff
    1145:	ff ff ff 00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:186
			int segMask = 0xf0000;
    114a:	67 66 c7 85 68 ff ff 	mov    DWORD PTR [ebp-0x98],0xf0000
    1151:	ff 00 00 0f 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:187
			offsetOfPrg = memoryTable[blockNum].beginAddr & offsetMask;
    1156:	67 66 8b 95 70 ff ff 	mov    edx,DWORD PTR [ebp-0x90]
    115d:	ff 
    115e:	66 89 d0             	mov    eax,edx
    1161:	66 01 c0             	add    eax,eax
    1164:	66 01 d0             	add    eax,edx
    1167:	66 c1 e0 03          	shl    eax,0x3
    116b:	66 05 e0 a2 00 00    	add    eax,0xa2e0
    1171:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    1175:	67 66 23 85 6c ff ff 	and    eax,DWORD PTR [ebp-0x94]
    117c:	ff 
    117d:	67 66 89 85 64 ff ff 	mov    DWORD PTR [ebp-0x9c],eax
    1184:	ff 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:188
			segOfPrg = (memoryTable[blockNum].beginAddr & segMask) >> 4;
    1185:	67 66 8b 95 70 ff ff 	mov    edx,DWORD PTR [ebp-0x90]
    118c:	ff 
    118d:	66 89 d0             	mov    eax,edx
    1190:	66 01 c0             	add    eax,eax
    1193:	66 01 d0             	add    eax,edx
    1196:	66 c1 e0 03          	shl    eax,0x3
    119a:	66 05 e0 a2 00 00    	add    eax,0xa2e0
    11a0:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    11a4:	67 66 23 85 68 ff ff 	and    eax,DWORD PTR [ebp-0x98]
    11ab:	ff 
    11ac:	66 c1 f8 04          	sar    eax,0x4
    11b0:	67 66 89 85 60 ff ff 	mov    DWORD PTR [ebp-0xa0],eax
    11b7:	ff 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:189
			int cs = segOfPrg + (offsetOfPrg >> 4), ss = segOfPrg + (offsetOfPrg >> 4);
    11b8:	67 66 8b 85 64 ff ff 	mov    eax,DWORD PTR [ebp-0x9c]
    11bf:	ff 
    11c0:	66 c1 f8 04          	sar    eax,0x4
    11c4:	66 89 c2             	mov    edx,eax
    11c7:	67 66 8b 85 60 ff ff 	mov    eax,DWORD PTR [ebp-0xa0]
    11ce:	ff 
    11cf:	66 01 d0             	add    eax,edx
    11d2:	67 66 89 85 5c ff ff 	mov    DWORD PTR [ebp-0xa4],eax
    11d9:	ff 
    11da:	67 66 8b 85 64 ff ff 	mov    eax,DWORD PTR [ebp-0x9c]
    11e1:	ff 
    11e2:	66 c1 f8 04          	sar    eax,0x4
    11e6:	66 89 c2             	mov    edx,eax
    11e9:	67 66 8b 85 60 ff ff 	mov    eax,DWORD PTR [ebp-0xa0]
    11f0:	ff 
    11f1:	66 01 d0             	add    eax,edx
    11f4:	67 66 89 85 58 ff ff 	mov    DWORD PTR [ebp-0xa8],eax
    11fb:	ff 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:190
			processTable[tmp].pcb.cs = cs;
    11fc:	67 66 8b 95 54 ff ff 	mov    edx,DWORD PTR [ebp-0xac]
    1203:	ff 
    1204:	67 66 8b 85 5c ff ff 	mov    eax,DWORD PTR [ebp-0xa4]
    120b:	ff 
    120c:	66 89 c1             	mov    ecx,eax
    120f:	66 89 d0             	mov    eax,edx
    1212:	66 c1 e0 03          	shl    eax,0x3
    1216:	66 01 d0             	add    eax,edx
    1219:	66 01 c0             	add    eax,eax
    121c:	66 01 d0             	add    eax,edx
    121f:	66 c1 e0 04          	shl    eax,0x4
    1223:	66 05 9a d0 00 00    	add    eax,0xd09a
    1229:	67 89 08             	mov    WORD PTR [eax],cx
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:191
			processTable[tmp].pcb.ss_now = ss;
    122c:	67 66 8b 95 54 ff ff 	mov    edx,DWORD PTR [ebp-0xac]
    1233:	ff 
    1234:	67 66 8b 85 58 ff ff 	mov    eax,DWORD PTR [ebp-0xa8]
    123b:	ff 
    123c:	66 89 c1             	mov    ecx,eax
    123f:	66 89 d0             	mov    eax,edx
    1242:	66 c1 e0 03          	shl    eax,0x3
    1246:	66 01 d0             	add    eax,edx
    1249:	66 01 c0             	add    eax,eax
    124c:	66 01 d0             	add    eax,edx
    124f:	66 c1 e0 04          	shl    eax,0x4
    1253:	66 05 a0 d0 00 00    	add    eax,0xd0a0
    1259:	67 89 08             	mov    WORD PTR [eax],cx
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:192
			activate(tmp);
    125c:	67 66 8b 85 54 ff ff 	mov    eax,DWORD PTR [ebp-0xac]
    1263:	ff 
    1264:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    1269:	66 e8 6f 47 00 00    	call   59de <_activate>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:179
		         in[2] == 't' && in[3] == 'i') {
    126f:	e9 4c 02             	jmp    14be <__section_alignment__+0x4be>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:194
		}
		else if (in[0] == 't' && in[1] == 'o' && in[2] == 'u' && in[3] == 'c' && in[4] == 'h')
    1272:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
    1277:	67 8a 00             	mov    al,BYTE PTR [eax]
    127a:	3c 74                	cmp    al,0x74
    127c:	75 55                	jne    12d3 <__section_alignment__+0x2d3>
    127e:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
    1283:	66 40                	inc    eax
    1285:	67 8a 00             	mov    al,BYTE PTR [eax]
    1288:	3c 6f                	cmp    al,0x6f
    128a:	75 47                	jne    12d3 <__section_alignment__+0x2d3>
    128c:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
    1291:	66 83 c0 02          	add    eax,0x2
    1295:	67 8a 00             	mov    al,BYTE PTR [eax]
    1298:	3c 75                	cmp    al,0x75
    129a:	75 37                	jne    12d3 <__section_alignment__+0x2d3>
    129c:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
    12a1:	66 83 c0 03          	add    eax,0x3
    12a5:	67 8a 00             	mov    al,BYTE PTR [eax]
    12a8:	3c 63                	cmp    al,0x63
    12aa:	75 27                	jne    12d3 <__section_alignment__+0x2d3>
    12ac:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
    12b1:	66 83 c0 04          	add    eax,0x4
    12b5:	67 8a 00             	mov    al,BYTE PTR [eax]
    12b8:	3c 68                	cmp    al,0x68
    12ba:	75 17                	jne    12d3 <__section_alignment__+0x2d3>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:196
		{
			fcreate(in + 6);
    12bc:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
    12c1:	66 83 c0 06          	add    eax,0x6
    12c5:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    12ca:	66 e8 5c 33 00 00    	call   462c <_fcreate>
    12d0:	e9 eb 01             	jmp    14be <__section_alignment__+0x4be>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:198
		}
		else if (in[0] == 'c' && in[1] == 'p')
    12d3:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
    12d8:	67 8a 00             	mov    al,BYTE PTR [eax]
    12db:	3c 63                	cmp    al,0x63
    12dd:	0f 85 d1 00          	jne    13b2 <__section_alignment__+0x3b2>
    12e1:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
    12e6:	66 40                	inc    eax
    12e8:	67 8a 00             	mov    al,BYTE PTR [eax]
    12eb:	3c 70                	cmp    al,0x70
    12ed:	0f 85 c1 00          	jne    13b2 <__section_alignment__+0x3b2>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:202
		{
			int firstEnd;
			char sour[40], des[40];
			for (firstEnd = 3; in[firstEnd] != ' '; ++firstEnd) {}
    12f1:	67 66 c7 45 f0 03 00 	mov    DWORD PTR [ebp-0x10],0x3
    12f8:	00 00 
    12fa:	eb 05                	jmp    1301 <__section_alignment__+0x301>
    12fc:	67 66 ff 45 f0       	inc    DWORD PTR [ebp-0x10]
    1301:	67 66 8b 55 f0       	mov    edx,DWORD PTR [ebp-0x10]
    1306:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
    130b:	66 01 d0             	add    eax,edx
    130e:	67 8a 00             	mov    al,BYTE PTR [eax]
    1311:	3c 20                	cmp    al,0x20
    1313:	75 e7                	jne    12fc <__section_alignment__+0x2fc>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:203
			strncpy(in + 3, sour, firstEnd - 3);
    1315:	67 66 8b 45 f0       	mov    eax,DWORD PTR [ebp-0x10]
    131a:	66 83 e8 03          	sub    eax,0x3
    131e:	67 66 8b 55 e8       	mov    edx,DWORD PTR [ebp-0x18]
    1323:	66 83 c2 03          	add    edx,0x3
    1327:	67 66 89 44 24 08    	mov    DWORD PTR [esp+0x8],eax
    132d:	67 66 8d 85 a0 fe ff 	lea    eax,[ebp-0x160]
    1334:	ff 
    1335:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    133b:	67 66 89 14 24       	mov    DWORD PTR [esp],edx
    1340:	66 e8 18 21 00 00    	call   345e <_strncpy>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:204
			strncpy(in + firstEnd + 1, des, strlen(in) - firstEnd - 1);
    1346:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
    134b:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    1350:	66 e8 22 1f 00 00    	call   3278 <_strlen>
    1356:	67 66 2b 45 f0       	sub    eax,DWORD PTR [ebp-0x10]
    135b:	66 48                	dec    eax
    135d:	67 66 8b 55 f0       	mov    edx,DWORD PTR [ebp-0x10]
    1362:	67 66 8d 4a 01       	lea    ecx,[edx+0x1]
    1367:	67 66 8b 55 e8       	mov    edx,DWORD PTR [ebp-0x18]
    136c:	66 01 ca             	add    edx,ecx
    136f:	67 66 89 44 24 08    	mov    DWORD PTR [esp+0x8],eax
    1375:	67 66 8d 85 c8 fe ff 	lea    eax,[ebp-0x138]
    137c:	ff 
    137d:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    1383:	67 66 89 14 24       	mov    DWORD PTR [esp],edx
    1388:	66 e8 d0 20 00 00    	call   345e <_strncpy>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:205
			cp(sour, des);
    138e:	67 66 8d 85 c8 fe ff 	lea    eax,[ebp-0x138]
    1395:	ff 
    1396:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    139c:	67 66 8d 85 a0 fe ff 	lea    eax,[ebp-0x160]
    13a3:	ff 
    13a4:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    13a9:	66 e8 31 12 00 00    	call   25e0 <_cp>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:199
		{
    13af:	e9 0c 01             	jmp    14be <__section_alignment__+0x4be>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:208
		}
		else {
			if (strcmp(in, "reboot") == 0)
    13b2:	67 66 c7 44 24 04 35 	mov    DWORD PTR [esp+0x4],0x8035
    13b9:	80 00 00 
    13bc:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
    13c1:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    13c6:	66 e8 7d 1f 00 00    	call   3349 <_strcmp>
    13cc:	66 85 c0             	test   eax,eax
    13cf:	75 06                	jne    13d7 <__section_alignment__+0x3d7>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:209
				reboot();
    13d1:	66 e8 0f 09 00 00    	call   1ce6 <_reboot>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:210
			if (strcmp(in, "clear") == 0)
    13d7:	67 66 c7 44 24 04 3c 	mov    DWORD PTR [esp+0x4],0x803c
    13de:	80 00 00 
    13e1:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
    13e6:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    13eb:	66 e8 58 1f 00 00    	call   3349 <_strcmp>
    13f1:	66 85 c0             	test   eax,eax
    13f4:	75 06                	jne    13fc <__section_alignment__+0x3fc>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:211
				clear();
    13f6:	66 e8 a1 14 00 00    	call   289d <_clear>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:212
			if (strcmp(in, "date") == 0)
    13fc:	67 66 c7 44 24 04 42 	mov    DWORD PTR [esp+0x4],0x8042
    1403:	80 00 00 
    1406:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
    140b:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    1410:	66 e8 33 1f 00 00    	call   3349 <_strcmp>
    1416:	66 85 c0             	test   eax,eax
    1419:	75 06                	jne    1421 <__section_alignment__+0x421>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:213
				date();
    141b:	66 e8 95 14 00 00    	call   28b6 <_date>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:214
			if (strcmp(in, "man") == 0)
    1421:	67 66 c7 44 24 04 47 	mov    DWORD PTR [esp+0x4],0x8047
    1428:	80 00 00 
    142b:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
    1430:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    1435:	66 e8 0e 1f 00 00    	call   3349 <_strcmp>
    143b:	66 85 c0             	test   eax,eax
    143e:	75 06                	jne    1446 <__section_alignment__+0x446>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:215
				man();
    1440:	66 e8 f4 14 00 00    	call   293a <_man>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:216
			if (strcmp(in, "ls") == 0)
    1446:	67 66 c7 44 24 04 4b 	mov    DWORD PTR [esp+0x4],0x804b
    144d:	80 00 00 
    1450:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
    1455:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    145a:	66 e8 e9 1e 00 00    	call   3349 <_strcmp>
    1460:	66 85 c0             	test   eax,eax
    1463:	75 06                	jne    146b <__section_alignment__+0x46b>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:217
				ls();
    1465:	66 e8 f9 15 00 00    	call   2a64 <_ls>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:218
			if (strcmp(in, "exit") == 0)
    146b:	67 66 c7 44 24 04 4e 	mov    DWORD PTR [esp+0x4],0x804e
    1472:	80 00 00 
    1475:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
    147a:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    147f:	66 e8 c4 1e 00 00    	call   3349 <_strcmp>
    1485:	66 85 c0             	test   eax,eax
    1488:	75 06                	jne    1490 <__section_alignment__+0x490>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:219
				shutdown();
    148a:	66 e8 f3 06 00 00    	call   1b83 <_shutdown>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:220
			if (strcmp(in, "ps") == 0)
    1490:	67 66 c7 44 24 04 53 	mov    DWORD PTR [esp+0x4],0x8053
    1497:	80 00 00 
    149a:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
    149f:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    14a4:	66 e8 9f 1e 00 00    	call   3349 <_strcmp>
    14aa:	66 85 c0             	test   eax,eax
    14ad:	75 0f                	jne    14be <__section_alignment__+0x4be>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:221
				ps();
    14af:	66 e8 b5 19 00 00    	call   2e6a <_ps>
    14b5:	eb 07                	jmp    14be <__section_alignment__+0x4be>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:131
			if (tmp != -1 && information[tmp].deleted != 1) {
    14b7:	90                   	nop
    14b8:	eb 04                	jmp    14be <__section_alignment__+0x4be>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:153
			if (tmp != -1 && information[tmp].deleted != 1) {
    14ba:	90                   	nop
    14bb:	eb 01                	jmp    14be <__section_alignment__+0x4be>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:166
			if (tmp != -1 && information[tmp].deleted != 1) {
    14bd:	90                   	nop
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:223
		}
		newline();
    14be:	66 e8 16 15 00 00    	call   29da <_newline>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./kernel/os.c:70
		in = getInput();
    14c4:	e9 c6 ed             	jmp    28d <.debug_line+0x43>
    14c7:	00 66 90             	add    BYTE PTR [bp-0x70],ah
    14ca:	66 90                	xchg   eax,eax
    14cc:	66 90                	xchg   eax,eax
    14ce:	66 90                	xchg   eax,eax

000014d0 <_test>:
    14d0:	ea 00 00 50 00       	jmp    0x50:0x0

000014d5 <_inisys>:
    14d5:	60                   	pusha  
    14d6:	e8 52 03             	call   182b <installInt8h>
    14d9:	e8 e9 02             	call   17c5 <installInt9h>
    14dc:	e8 93 02             	call   1772 <installInt2Bh>
    14df:	e8 05 00             	call   14e7 <installInt21h>
    14e2:	e8 96 04             	call   197b <installInt34_37h>
    14e5:	61                   	popa   
    14e6:	c3                   	ret    

000014e7 <installInt21h>:
    14e7:	50                   	push   ax
    14e8:	06                   	push   es
    14e9:	b8 00 00             	mov    ax,0x0
    14ec:	8e c0                	mov    es,ax
    14ee:	26 c7 06 84 00 fd 14 	mov    WORD PTR es:0x84,0x14fd
    14f5:	26 8c 0e 86 00       	mov    WORD PTR es:0x86,cs
    14fa:	07                   	pop    es
    14fb:	58                   	pop    ax
    14fc:	c3                   	ret    

000014fd <int21h>:
    14fd:	2e 89 1e bb 15       	mov    WORD PTR cs:0x15bb,bx
    1502:	53                   	push   bx
    1503:	1e                   	push   ds
    1504:	0e                   	push   cs
    1505:	1f                   	pop    ds
    1506:	bb 00 00             	mov    bx,0x0
    1509:	50                   	push   ax
    150a:	88 e0                	mov    al,ah
    150c:	b3 02                	mov    bl,0x2
    150e:	f6 e3                	mul    bl
    1510:	88 c3                	mov    bl,al
    1512:	58                   	pop    ax
    1513:	2e ff 97 1b 15       	call   WORD PTR cs:[bx+0x151b]

00001518 <int21hre>:
    1518:	1f                   	pop    ds
    1519:	5b                   	pop    bx
    151a:	cf                   	iret   

0000151b <int21hTable>:
    151b:	f2 15 00 16          	repnz adc ax,0x1600
    151f:	45                   	inc    bp
    1520:	16                   	push   ss
    1521:	1e                   	push   ds
    1522:	16                   	push   ss
    1523:	29 16 79 16          	sub    WORD PTR ds:0x1679,dx
    1527:	90                   	nop
    1528:	16                   	push   ss
    1529:	a9 16 b8             	test   ax,0xb816
    152c:	16                   	push   ss
    152d:	dc 15                	fcom   QWORD PTR [di]
    152f:	1c 17                	sbb    al,0x17
    1531:	2a 17                	sub    dl,BYTE PTR [bx]
    1533:	3c 17                	cmp    al,0x17
    1535:	4e                   	dec    si
    1536:	17                   	pop    ss
    1537:	60                   	pusha  
    1538:	17                   	pop    ss
    1539:	c1 15 00             	rcl    WORD PTR [di],0x0
	...
    15b0:	00 00                	add    BYTE PTR [bx+si],al
    15b2:	00 37                	add    BYTE PTR [bx],dh
    15b4:	16                   	push   ss

000015b5 <int21h_store_ip>:
	...

000015b7 <int21h_store_cs>:
	...

000015b9 <int21h_store_flags>:
	...

000015bb <int21h_store_ebx>:
    15bb:	00 00                	add    BYTE PTR [bx+si],al
	...

000015bf <int21_store_retaddr>:
	...

000015c1 <int21hFree>:
    15c1:	66 50                	push   eax
    15c3:	66 b8 00 00 00 00    	mov    eax,0x0
    15c9:	8c e8                	mov    ax,gs
    15cb:	66 50                	push   eax
    15cd:	66 51                	push   ecx
    15cf:	b8 ba 5e             	mov    ax,0x5eba
    15d2:	66 ff d0             	call   eax
    15d5:	66 59                	pop    ecx
    15d7:	66 58                	pop    eax
    15d9:	66 58                	pop    eax
    15db:	c3                   	ret    

000015dc <int21hMalloc>:
    15dc:	66 53                	push   ebx
    15de:	1e                   	push   ds
    15df:	0e                   	push   cs
    15e0:	1f                   	pop    ds
    15e1:	66 53                	push   ebx
    15e3:	66 b8 07 5d 00 00    	mov    eax,0x5d07
    15e9:	66 ff d0             	call   eax
    15ec:	66 5b                	pop    ebx
    15ee:	1f                   	pop    ds
    15ef:	66 5b                	pop    ebx
    15f1:	c3                   	ret    

000015f2 <int21hps>:
    15f2:	66 50                	push   eax
    15f4:	66 31 c0             	xor    eax,eax
    15f7:	b8 6a 2e             	mov    ax,0x2e6a
    15fa:	66 ff d0             	call   eax
    15fd:	66 58                	pop    eax
    15ff:	c3                   	ret    

00001600 <int21hkill>:
    1600:	66 50                	push   eax
    1602:	66 53                	push   ebx
    1604:	66 bb 00 00 00 00    	mov    ebx,0x0
    160a:	88 c3                	mov    bl,al
    160c:	66 53                	push   ebx
    160e:	66 31 c0             	xor    eax,eax
    1611:	b8 4e 31             	mov    ax,0x314e
    1614:	66 ff d0             	call   eax
    1617:	66 5b                	pop    ebx
    1619:	66 5b                	pop    ebx
    161b:	66 58                	pop    eax
    161d:	c3                   	ret    

0000161e <int21hshowDate>:
    161e:	fb                   	sti    
    161f:	66 31 c0             	xor    eax,eax
    1622:	b8 b6 28             	mov    ax,0x28b6
    1625:	66 ff d0             	call   eax
    1628:	c3                   	ret    

00001629 <int21hClear>:
    1629:	66 50                	push   eax
    162b:	66 31 c0             	xor    eax,eax
    162e:	b8 20 1a             	mov    ax,0x1a20
    1631:	66 ff d0             	call   eax
    1634:	66 58                	pop    eax
    1636:	c3                   	ret    

00001637 <int21hexit>:
    1637:	66 50                	push   eax
    1639:	66 31 c0             	xor    eax,eax
    163c:	b8 83 1b             	mov    ax,0x1b83
    163f:	66 ff d0             	call   eax
    1642:	66 58                	pop    eax
    1644:	c3                   	ret    

00001645 <int21hPrintString>:
    1645:	60                   	pusha  
    1646:	1e                   	push   ds
    1647:	66 50                	push   eax
    1649:	8c e8                	mov    ax,gs
    164b:	8e d8                	mov    ds,ax
    164d:	66 53                	push   ebx
    164f:	66 51                	push   ecx
    1651:	66 b8 00 00 00 00    	mov    eax,0x0
    1657:	88 d0                	mov    al,dl
    1659:	66 50                	push   eax
    165b:	88 f0                	mov    al,dh
    165d:	66 50                	push   eax
    165f:	66 57                	push   edi
    1661:	66 31 c0             	xor    eax,eax
    1664:	b8 f5 19             	mov    ax,0x19f5
    1667:	66 ff d0             	call   eax
    166a:	66 5f                	pop    edi
    166c:	66 58                	pop    eax
    166e:	66 58                	pop    eax
    1670:	66 59                	pop    ecx
    1672:	66 5b                	pop    ebx
    1674:	66 58                	pop    eax
    1676:	1f                   	pop    ds
    1677:	61                   	popa   
    1678:	c3                   	ret    

00001679 <int21hint2str>:
    1679:	60                   	pusha  
    167a:	1e                   	push   ds
    167b:	8c e8                	mov    ax,gs
    167d:	8e d8                	mov    ds,ax
    167f:	66 57                	push   edi
    1681:	66 53                	push   ebx
    1683:	b8 cd 34             	mov    ax,0x34cd
    1686:	66 ff d0             	call   eax
    1689:	66 5b                	pop    ebx
    168b:	66 5f                	pop    edi
    168d:	1f                   	pop    ds
    168e:	61                   	popa   
    168f:	c3                   	ret    

00001690 <int21hexitprg>:
    1690:	60                   	pusha  
    1691:	1e                   	push   ds
    1692:	2e 66 ff 36 bb 15    	push   DWORD PTR cs:0x15bb
    1698:	66 b8 00 00 00 00    	mov    eax,0x0
    169e:	b8 52 54             	mov    ax,0x5452
    16a1:	66 ff d0             	call   eax
    16a4:	66 5b                	pop    ebx
    16a6:	1f                   	pop    ds
    16a7:	61                   	popa   
    16a8:	c3                   	ret    

000016a9 <int21hwait>:
    16a9:	1e                   	push   ds
    16aa:	66 b8 00 00 00 00    	mov    eax,0x0
    16b0:	b8 32 55             	mov    ax,0x5532
    16b3:	66 ff d0             	call   eax
    16b6:	1f                   	pop    ds
    16b7:	c3                   	ret    

000016b8 <int21hfork>:
    16b8:	fa                   	cli    
    16b9:	0e                   	push   cs
    16ba:	53                   	push   bx
    16bb:	50                   	push   ax
    16bc:	1e                   	push   ds
    16bd:	8c c8                	mov    ax,cs
    16bf:	8e d8                	mov    ds,ax
    16c1:	2e 8b 1e 40 e8       	mov    bx,WORD PTR cs:0xe840
    16c6:	2e a1 04 a7          	mov    ax,cs:0xa704
    16ca:	f6 e3                	mul    bl
    16cc:	89 c3                	mov    bx,ax
    16ce:	81 c3 80 d0          	add    bx,0xd080
    16d2:	2e 89 1e d2 1c       	mov    WORD PTR cs:0x1cd2,bx
    16d7:	1f                   	pop    ds
    16d8:	58                   	pop    ax
    16d9:	5b                   	pop    bx
    16da:	fb                   	sti    
    16db:	e8 20 05             	call   1bfe <save>
    16de:	fa                   	cli    
    16df:	60                   	pusha  
    16e0:	1e                   	push   ds
    16e1:	66 b8 00 00 00 00    	mov    eax,0x0
    16e7:	8c c8                	mov    ax,cs
    16e9:	8e d8                	mov    ds,ax
    16eb:	b8 bb 4f             	mov    ax,0x4fbb
    16ee:	66 ff d0             	call   eax
    16f1:	1f                   	pop    ds
    16f2:	61                   	popa   
    16f3:	53                   	push   bx
    16f4:	50                   	push   ax
    16f5:	1e                   	push   ds
    16f6:	8c c8                	mov    ax,cs
    16f8:	8e d8                	mov    ds,ax
    16fa:	2e 8b 1e 40 e8       	mov    bx,WORD PTR cs:0xe840
    16ff:	2e a1 04 a7          	mov    ax,cs:0xa704
    1703:	f6 e3                	mul    bl
    1705:	89 c3                	mov    bx,ax
    1707:	81 c3 80 d0          	add    bx,0xd080
    170b:	2e 89 1e d0 1c       	mov    WORD PTR cs:0x1cd0,bx
    1710:	1f                   	pop    ds
    1711:	58                   	pop    ax
    1712:	5b                   	pop    bx
    1713:	e8 67 05             	call   1c7d <restart>

00001716 <int21hfork_store_cs>:
	...

00001718 <int21hfork_store_ip>:
	...

0000171a <int21hfork_store_flags>:
	...

0000171c <int21hGetSem>:
    171c:	66 31 c0             	xor    eax,eax
    171f:	b8 8c 71             	mov    ax,0x718c
    1722:	66 51                	push   ecx
    1724:	66 ff d0             	call   eax
    1727:	66 59                	pop    ecx
    1729:	c3                   	ret    

0000172a <int21hFreeSem>:
    172a:	66 50                	push   eax
    172c:	66 31 c0             	xor    eax,eax
    172f:	b8 4b 72             	mov    ax,0x724b
    1732:	66 51                	push   ecx
    1734:	66 ff d0             	call   eax
    1737:	66 59                	pop    ecx
    1739:	66 58                	pop    eax
    173b:	c3                   	ret    

0000173c <int21hP>:
    173c:	66 50                	push   eax
    173e:	66 31 c0             	xor    eax,eax
    1741:	b8 bc 72             	mov    ax,0x72bc
    1744:	66 51                	push   ecx
    1746:	66 ff d0             	call   eax
    1749:	66 59                	pop    ecx
    174b:	66 58                	pop    eax
    174d:	c3                   	ret    

0000174e <int21hV>:
    174e:	66 50                	push   eax
    1750:	66 31 c0             	xor    eax,eax
    1753:	b8 d8 73             	mov    ax,0x73d8
    1756:	66 51                	push   ecx
    1758:	66 ff d0             	call   eax
    175b:	66 59                	pop    ecx
    175d:	66 58                	pop    eax
    175f:	c3                   	ret    

00001760 <int21hDelay>:
    1760:	66 50                	push   eax
    1762:	66 31 c0             	xor    eax,eax
    1765:	b8 8c 5b             	mov    ax,0x5b8c
    1768:	66 51                	push   ecx
    176a:	66 ff d0             	call   eax
    176d:	66 59                	pop    ecx
    176f:	66 58                	pop    eax
    1771:	c3                   	ret    

00001772 <installInt2Bh>:
    1772:	60                   	pusha  
    1773:	06                   	push   es
    1774:	b8 00 00             	mov    ax,0x0
    1777:	8e c0                	mov    es,ax
    1779:	26 c7 06 ac 00 88 17 	mov    WORD PTR es:0xac,0x1788
    1780:	26 8c 0e ae 00       	mov    WORD PTR es:0xae,cs
    1785:	07                   	pop    es
    1786:	61                   	popa   
    1787:	c3                   	ret    

00001788 <int2Bh>:
    1788:	2e 8f 06 c1 17       	pop    WORD PTR cs:0x17c1
    178d:	2e 8f 06 c3 17       	pop    WORD PTR cs:0x17c3
    1792:	9d                   	popf   
    1793:	2e 8f 06 c1 17       	pop    WORD PTR cs:0x17c1
    1798:	60                   	pusha  
    1799:	1e                   	push   ds
    179a:	66 b8 00 00 00 00    	mov    eax,0x0
    17a0:	8c c8                	mov    ax,cs
    17a2:	8e d8                	mov    ds,ax
    17a4:	a1 40 e8             	mov    ax,ds:0xe840
    17a7:	66 50                	push   eax
    17a9:	b8 f4 4b             	mov    ax,0x4bf4
    17ac:	66 ff d0             	call   eax
    17af:	66 58                	pop    eax
    17b1:	1f                   	pop    ds
    17b2:	61                   	popa   
    17b3:	9c                   	pushf  
    17b4:	2e ff 36 c3 17       	push   WORD PTR cs:0x17c3
    17b9:	2e ff 36 c1 17       	push   WORD PTR cs:0x17c1
    17be:	e9 a9 00             	jmp    186a <int8h>

000017c1 <in2b_store_ip>:
	...

000017c3 <in2b_store_cs>:
	...

000017c5 <installInt9h>:
    17c5:	60                   	pusha  
    17c6:	06                   	push   es
    17c7:	1e                   	push   ds
    17c8:	31 c0                	xor    ax,ax
    17ca:	8e c0                	mov    es,ax
    17cc:	8c c8                	mov    ax,cs
    17ce:	8e d8                	mov    ds,ax
    17d0:	26 a1 26 00          	mov    ax,es:0x26
    17d4:	2e a3 f4 17          	mov    cs:0x17f4,ax
    17d8:	26 a1 24 00          	mov    ax,es:0x24
    17dc:	2e a3 f2 17          	mov    cs:0x17f2,ax
    17e0:	fa                   	cli    
    17e1:	26 8c 0e 26 00       	mov    WORD PTR es:0x26,cs
    17e6:	26 c7 06 24 00 f6 17 	mov    WORD PTR es:0x24,0x17f6
    17ed:	fb                   	sti    
    17ee:	1f                   	pop    ds
    17ef:	07                   	pop    es
    17f0:	61                   	popa   
    17f1:	c3                   	ret    

000017f2 <tmp9>:
    17f2:	00 00                	add    BYTE PTR [bx+si],al
	...

000017f6 <int9h>:
    17f6:	60                   	pusha  
    17f7:	06                   	push   es
    17f8:	1e                   	push   ds
    17f9:	8c c8                	mov    ax,cs
    17fb:	8e d8                	mov    ds,ax
    17fd:	8e c0                	mov    es,ax
    17ff:	9c                   	pushf  
    1800:	2e ff 1e f2 17       	call   DWORD PTR cs:0x17f2

00001805 <showInsert>:
    1805:	b9 09 00             	mov    cx,0x9
    1808:	bd 22 18             	mov    bp,0x1822
    180b:	ba 45 18             	mov    dx,0x1845
    180e:	b3 0f                	mov    bl,0xf
    1810:	b7 00                	mov    bh,0x0
    1812:	b4 13                	mov    ah,0x13
    1814:	b0 00                	mov    al,0x0
    1816:	cd 10                	int    0x10
    1818:	b0 20                	mov    al,0x20
    181a:	e6 20                	out    0x20,al
    181c:	e6 a0                	out    0xa0,al
    181e:	1f                   	pop    ds
    181f:	07                   	pop    es
    1820:	61                   	popa   
    1821:	cf                   	iret   

00001822 <inserting>:
    1822:	69 6e 73 65 72       	imul   bp,WORD PTR [bp+0x73],0x7265
    1827:	74 69                	je     1892 <int8h+0x28>
    1829:	6e                   	outs   dx,BYTE PTR ds:[si]
    182a:	67                   	addr32

0000182b <installInt8h>:
    182b:	06                   	push   es
    182c:	50                   	push   ax
    182d:	31 c0                	xor    ax,ax
    182f:	8e c0                	mov    es,ax
    1831:	26 a1 22 00          	mov    ax,es:0x22
    1835:	2e a3 68 18          	mov    cs:0x1868,ax
    1839:	26 a1 20 00          	mov    ax,es:0x20
    183d:	2e a3 66 18          	mov    cs:0x1866,ax
    1841:	fa                   	cli    
    1842:	26 8c 0e 22 00       	mov    WORD PTR es:0x22,cs
    1847:	26 c7 06 20 00 6a 18 	mov    WORD PTR es:0x20,0x186a
    184e:	2e c7 06 68 19 28 00 	mov    WORD PTR cs:0x1968,0x28
    1855:	fb                   	sti    

00001856 <SetTimer>:
    1856:	b0 34                	mov    al,0x34
    1858:	e6 43                	out    0x43,al
    185a:	b8 0b e9             	mov    ax,0xe90b
    185d:	e6 40                	out    0x40,al
    185f:	88 e0                	mov    al,ah
    1861:	e6 40                	out    0x40,al
    1863:	58                   	pop    ax
    1864:	07                   	pop    es
    1865:	c3                   	ret    

00001866 <tmp8>:
    1866:	00 00                	add    BYTE PTR [bx+si],al
	...

0000186a <int8h>:
    186a:	60                   	pusha  
    186b:	1e                   	push   ds
    186c:	06                   	push   es
    186d:	8c c8                	mov    ax,cs
    186f:	8e d8                	mov    ds,ax
    1871:	9c                   	pushf  
    1872:	ff 1e 66 18          	call   DWORD PTR ds:0x1866
    1876:	ff 0e 68 19          	dec    WORD PTR ds:0x1968
    187a:	83 3e 68 19 00       	cmp    WORD PTR ds:0x1968,0x0
    187f:	75 67                	jne    18e8 <int8hret>
    1881:	c7 06 68 19 28 00    	mov    WORD PTR ds:0x1968,0x28
    1887:	b8 00 b8             	mov    ax,0xb800
    188a:	8e c0                	mov    es,ax
    188c:	b4 04                	mov    ah,0x4
    188e:	b7 00                	mov    bh,0x0
    1890:	b4 03                	mov    ah,0x3
    1892:	cd 10                	int    0x10
    1894:	b8 00 00             	mov    ax,0x0
    1897:	88 f0                	mov    al,dh
    1899:	b3 50                	mov    bl,0x50
    189b:	f6 e3                	mul    bl
    189d:	b6 00                	mov    dh,0x0
    189f:	01 d0                	add    ax,dx
    18a1:	bb 02 00             	mov    bx,0x2
    18a4:	f7 e3                	mul    bx
    18a6:	89 c5                	mov    bp,ax
    18a8:	bb 6c 19             	mov    bx,0x196c
    18ab:	03 1e 6a 19          	add    bx,WORD PTR ds:0x196a
    18af:	8a 07                	mov    al,BYTE PTR [bx]
    18b1:	b4 0f                	mov    ah,0xf
    18b3:	26 89 46 00          	mov    WORD PTR es:[bp+0x0],ax
    18b7:	b8 20 0f             	mov    ax,0xf20
    18ba:	26 89 46 02          	mov    WORD PTR es:[bp+0x2],ax
    18be:	ff 06 6a 19          	inc    WORD PTR ds:0x196a
    18c2:	83 3e 6a 19 04       	cmp    WORD PTR ds:0x196a,0x4
    18c7:	7c 06                	jl     18cf <insertShow>
    18c9:	c7 06 6a 19 00 00    	mov    WORD PTR ds:0x196a,0x0

000018cf <insertShow>:
    18cf:	06                   	push   es
    18d0:	8c c8                	mov    ax,cs
    18d2:	8e c0                	mov    es,ax
    18d4:	b9 09 00             	mov    cx,0x9
    18d7:	bd 70 19             	mov    bp,0x1970
    18da:	ba 45 18             	mov    dx,0x1845
    18dd:	b3 0f                	mov    bl,0xf
    18df:	b7 00                	mov    bh,0x0
    18e1:	b4 13                	mov    ah,0x13
    18e3:	b0 00                	mov    al,0x0
    18e5:	cd 10                	int    0x10
    18e7:	07                   	pop    es

000018e8 <int8hret>:
    18e8:	fa                   	cli    
    18e9:	b0 20                	mov    al,0x20
    18eb:	e6 20                	out    0x20,al
    18ed:	e6 a0                	out    0xa0,al
    18ef:	07                   	pop    es
    18f0:	1f                   	pop    ds
    18f1:	61                   	popa   
    18f2:	53                   	push   bx
    18f3:	50                   	push   ax
    18f4:	1e                   	push   ds
    18f5:	8c c8                	mov    ax,cs
    18f7:	8e d8                	mov    ds,ax
    18f9:	2e 8b 1e 40 e8       	mov    bx,WORD PTR cs:0xe840
    18fe:	2e a1 04 a7          	mov    ax,cs:0xa704
    1902:	f6 e3                	mul    bl
    1904:	89 c3                	mov    bx,ax
    1906:	81 c3 80 d0          	add    bx,0xd080
    190a:	2e 89 1e d2 1c       	mov    WORD PTR cs:0x1cd2,bx
    190f:	1f                   	pop    ds
    1910:	58                   	pop    ax
    1911:	5b                   	pop    bx
    1912:	50                   	push   ax
    1913:	1e                   	push   ds
    1914:	0e                   	push   cs
    1915:	1f                   	pop    ds
    1916:	60                   	pusha  
    1917:	66 31 c0             	xor    eax,eax
    191a:	b8 2e 5c             	mov    ax,0x5c2e
    191d:	66 ff d0             	call   eax
    1920:	66 31 c0             	xor    eax,eax
    1923:	b8 6c 4d             	mov    ax,0x4d6c
    1926:	66 ff d0             	call   eax
    1929:	61                   	popa   
    192a:	1f                   	pop    ds
    192b:	58                   	pop    ax
    192c:	2e 8f 06 c1 17       	pop    WORD PTR cs:0x17c1
    1931:	2e 8f 06 c3 17       	pop    WORD PTR cs:0x17c3
    1936:	9d                   	popf   
    1937:	2e ff 36 c1 17       	push   WORD PTR cs:0x17c1
    193c:	2e ff 36 c3 17       	push   WORD PTR cs:0x17c3
    1941:	53                   	push   bx
    1942:	50                   	push   ax
    1943:	1e                   	push   ds
    1944:	8c c8                	mov    ax,cs
    1946:	8e d8                	mov    ds,ax
    1948:	2e 8b 1e 40 e8       	mov    bx,WORD PTR cs:0xe840
    194d:	2e a1 04 a7          	mov    ax,cs:0xa704
    1951:	f6 e3                	mul    bl
    1953:	89 c3                	mov    bx,ax
    1955:	81 c3 80 d0          	add    bx,0xd080
    1959:	2e 89 1e d0 1c       	mov    WORD PTR cs:0x1cd0,bx
    195e:	1f                   	pop    ds
    195f:	58                   	pop    ax
    1960:	5b                   	pop    bx
    1961:	e8 9a 02             	call   1bfe <save>
    1964:	e8 16 03             	call   1c7d <restart>
    1967:	cf                   	iret   

00001968 <count>:
    1968:	28 00                	sub    BYTE PTR [bx+si],al

0000196a <k>:
	...

0000196c <char>:
    196c:	7c 5c                	jl     19ca <int34h+0xd>
    196e:	2d                   	.byte 0x2d
    196f:	2f                   	das    

00001970 <inserted>:
    1970:	69 6e 73 65 72       	imul   bp,WORD PTR [bp+0x73],0x7265
    1975:	74 65                	je     19dc <int36h+0x3>
    1977:	64                   	fs
    1978:	20                   	.byte 0x20

00001979 <int8h_store_ss>:
	...

0000197b <installInt34_37h>:
    197b:	06                   	push   es
    197c:	50                   	push   ax
    197d:	b8 00 00             	mov    ax,0x0
    1980:	8e c0                	mov    es,ax
    1982:	fa                   	cli    
    1983:	26 8c 0e d2 00       	mov    WORD PTR es:0xd2,cs
    1988:	26 c7 06 d0 00 bd 19 	mov    WORD PTR es:0xd0,0x19bd
    198f:	fb                   	sti    
    1990:	fa                   	cli    
    1991:	26 8c 0e d6 00       	mov    WORD PTR es:0xd6,cs
    1996:	26 c7 06 d4 00 cb 19 	mov    WORD PTR es:0xd4,0x19cb
    199d:	fb                   	sti    
    199e:	fa                   	cli    
    199f:	26 8c 0e da 00       	mov    WORD PTR es:0xda,cs
    19a4:	26 c7 06 d8 00 d9 19 	mov    WORD PTR es:0xd8,0x19d9
    19ab:	fb                   	sti    
    19ac:	fa                   	cli    
    19ad:	26 8c 0e de 00       	mov    WORD PTR es:0xde,cs
    19b2:	26 c7 06 dc 00 e7 19 	mov    WORD PTR es:0xdc,0x19e7
    19b9:	fb                   	sti    
    19ba:	58                   	pop    ax
    19bb:	07                   	pop    es
    19bc:	c3                   	ret    

000019bd <int34h>:
    19bd:	8c c8                	mov    ax,cs
    19bf:	8e d8                	mov    ds,ax
    19c1:	66 31 c0             	xor    eax,eax
    19c4:	b8 f6 76             	mov    ax,0x76f6
    19c7:	66 ff d0             	call   eax
    19ca:	cf                   	iret   

000019cb <int35h>:
    19cb:	8c c8                	mov    ax,cs
    19cd:	8e d8                	mov    ds,ax
    19cf:	66 31 c0             	xor    eax,eax
    19d2:	b8 51 77             	mov    ax,0x7751
    19d5:	66 ff d0             	call   eax
    19d8:	cf                   	iret   

000019d9 <int36h>:
    19d9:	8c c8                	mov    ax,cs
    19db:	8e d8                	mov    ds,ax
    19dd:	66 31 c0             	xor    eax,eax
    19e0:	b8 ac 77             	mov    ax,0x77ac
    19e3:	66 ff d0             	call   eax
    19e6:	cf                   	iret   

000019e7 <int37h>:
    19e7:	8c c8                	mov    ax,cs
    19e9:	8e d8                	mov    ds,ax
    19eb:	66 31 c0             	xor    eax,eax
    19ee:	b8 07 78             	mov    ax,0x7807
    19f1:	66 ff d0             	call   eax
    19f4:	cf                   	iret   

000019f5 <_printSentence>:
    19f5:	66 55                	push   ebp
    19f7:	67 8a 5c 24 18       	mov    bl,BYTE PTR [esp+0x18]
    19fc:	67 8b 4c 24 14       	mov    cx,WORD PTR [esp+0x14]
    1a01:	67 8a 54 24 10       	mov    dl,BYTE PTR [esp+0x10]
    1a06:	67 8a 74 24 0c       	mov    dh,BYTE PTR [esp+0xc]
    1a0b:	67 8b 6c 24 08       	mov    bp,WORD PTR [esp+0x8]
    1a10:	b0 01                	mov    al,0x1
    1a12:	b7 00                	mov    bh,0x0
    1a14:	1e                   	push   ds
    1a15:	07                   	pop    es
    1a16:	b4 13                	mov    ah,0x13
    1a18:	cd 10                	int    0x10
    1a1a:	66 5d                	pop    ebp
    1a1c:	66 59                	pop    ecx
    1a1e:	ff e1                	jmp    cx

00001a20 <_ClearScreen>:
    1a20:	60                   	pusha  
    1a21:	b4 06                	mov    ah,0x6
    1a23:	b0 00                	mov    al,0x0
    1a25:	b7 0f                	mov    bh,0xf
    1a27:	b5 00                	mov    ch,0x0
    1a29:	b1 00                	mov    cl,0x0
    1a2b:	b6 18                	mov    dh,0x18
    1a2d:	b2 4f                	mov    dl,0x4f
    1a2f:	cd 10                	int    0x10
    1a31:	61                   	popa   
    1a32:	2e 66 8f 06 3d 1a    	pop    DWORD PTR cs:0x1a3d
    1a38:	2e ff 26 3d 1a       	jmp    WORD PTR cs:0x1a3d

00001a3d <retaddr>:
    1a3d:	00 00                	add    BYTE PTR [bx+si],al
	...

00001a41 <_getInput>:
    1a41:	c7 06 7b 1b 00 00    	mov    WORD PTR ds:0x1b7b,0x0

00001a47 <getStr>:
    1a47:	b4 00                	mov    ah,0x0
    1a49:	cd 16                	int    0x16
    1a4b:	3c 20                	cmp    al,0x20
    1a4d:	7c 07                	jl     1a56 <nochar>
    1a4f:	b4 00                	mov    ah,0x0
    1a51:	e8 26 00             	call   1a7a <Charmini>
    1a54:	eb f1                	jmp    1a47 <getStr>

00001a56 <nochar>:
    1a56:	80 fc 0e             	cmp    ah,0xe
    1a59:	74 07                	je     1a62 <backspace>
    1a5b:	80 fc 1c             	cmp    ah,0x1c
    1a5e:	74 09                	je     1a69 <enter>
    1a60:	eb e5                	jmp    1a47 <getStr>

00001a62 <backspace>:
    1a62:	b4 01                	mov    ah,0x1
    1a64:	e8 13 00             	call   1a7a <Charmini>
    1a67:	eb de                	jmp    1a47 <getStr>

00001a69 <enter>:
    1a69:	b0 00                	mov    al,0x0
    1a6b:	b4 00                	mov    ah,0x0
    1a6d:	e8 0a 00             	call   1a7a <Charmini>
    1a70:	66 29 c0             	sub    eax,eax
    1a73:	b8 16 1b             	mov    ax,0x1b16
    1a76:	66 59                	pop    ecx
    1a78:	ff e1                	jmp    cx

00001a7a <Charmini>:
    1a7a:	53                   	push   bx
    1a7b:	52                   	push   dx
    1a7c:	57                   	push   di
    1a7d:	06                   	push   es
    1a7e:	80 fc 01             	cmp    ah,0x1
    1a81:	0f 8f 8c 00          	jg     1b11 <Charminiret>
    1a85:	88 e3                	mov    bl,ah
    1a87:	b7 00                	mov    bh,0x0
    1a89:	01 db                	add    bx,bx
    1a8b:	ff a7 7d 1b          	jmp    WORD PTR [bx+0x1b7d]

00001a8f <charpush>:
    1a8f:	80 3e 7b 1b 64       	cmp    BYTE PTR ds:0x1b7b,0x64
    1a94:	7d 7b                	jge    1b11 <Charminiret>
    1a96:	8b 1e 7b 1b          	mov    bx,WORD PTR ds:0x1b7b
    1a9a:	fe 06 7b 1b          	inc    BYTE PTR ds:0x1b7b
    1a9e:	88 87 16 1b          	mov    BYTE PTR [bx+0x1b16],al
    1aa2:	e8 1a 00             	call   1abf <charshow>
    1aa5:	eb 6a                	jmp    1b11 <Charminiret>

00001aa7 <charpop>:
    1aa7:	80 3e 7b 1b 00       	cmp    BYTE PTR ds:0x1b7b,0x0
    1aac:	7e 63                	jle    1b11 <Charminiret>
    1aae:	fe 0e 7b 1b          	dec    BYTE PTR ds:0x1b7b
    1ab2:	8b 1e 7b 1b          	mov    bx,WORD PTR ds:0x1b7b
    1ab6:	8a 87 16 1b          	mov    al,BYTE PTR [bx+0x1b16]
    1aba:	e8 24 00             	call   1ae1 <coverLast>
    1abd:	eb 52                	jmp    1b11 <Charminiret>

00001abf <charshow>:
    1abf:	66 55                	push   ebp
    1ac1:	b7 00                	mov    bh,0x0
    1ac3:	b4 03                	mov    ah,0x3
    1ac5:	cd 10                	int    0x10
    1ac7:	b0 01                	mov    al,0x1
    1ac9:	b4 13                	mov    ah,0x13
    1acb:	b7 00                	mov    bh,0x0
    1acd:	b3 0e                	mov    bl,0xe
    1acf:	b9 01 00             	mov    cx,0x1
    1ad2:	0e                   	push   cs
    1ad3:	07                   	pop    es
    1ad4:	bd 16 1b             	mov    bp,0x1b16
    1ad7:	03 2e 7b 1b          	add    bp,WORD PTR ds:0x1b7b
    1adb:	4d                   	dec    bp
    1adc:	cd 10                	int    0x10
    1ade:	66 5d                	pop    ebp
    1ae0:	c3                   	ret    

00001ae1 <coverLast>:
    1ae1:	b8 00 b8             	mov    ax,0xb800
    1ae4:	8e c0                	mov    es,ax
    1ae6:	b4 03                	mov    ah,0x3
    1ae8:	cd 10                	int    0x10
    1aea:	80 fa 00             	cmp    dl,0x0
    1aed:	7f 04                	jg     1af3 <noEndofLine>
    1aef:	b2 50                	mov    dl,0x50
    1af1:	fe ce                	dec    dh

00001af3 <noEndofLine>:
    1af3:	fe ca                	dec    dl
    1af5:	b4 02                	mov    ah,0x2
    1af7:	b7 00                	mov    bh,0x0
    1af9:	cd 10                	int    0x10
    1afb:	b8 50 00             	mov    ax,0x50
    1afe:	f6 e6                	mul    dh
    1b00:	b6 00                	mov    dh,0x0
    1b02:	01 d0                	add    ax,dx
    1b04:	ba 02 00             	mov    dx,0x2
    1b07:	f7 e2                	mul    dx
    1b09:	89 c3                	mov    bx,ax
    1b0b:	26 c7 07 20 0f       	mov    WORD PTR es:[bx],0xf20
    1b10:	c3                   	ret    

00001b11 <Charminiret>:
    1b11:	07                   	pop    es
    1b12:	5f                   	pop    di
    1b13:	5a                   	pop    dx
    1b14:	5b                   	pop    bx
    1b15:	c3                   	ret    

00001b16 <input>:
	...

00001b7b <top>:
	...

00001b7d <getInputTable>:
    1b7d:	8f                   	(bad)  
    1b7e:	1a a7 1a bf          	sbb    ah,BYTE PTR [bx-0x40e6]
    1b82:	1a                   	.byte 0x1a

00001b83 <_shutdown>:
    1b83:	60                   	pusha  
    1b84:	b8 01 53             	mov    ax,0x5301
    1b87:	31 db                	xor    bx,bx
    1b89:	cd 15                	int    0x15
    1b8b:	b8 0e 53             	mov    ax,0x530e
    1b8e:	b9 02 01             	mov    cx,0x102
    1b91:	cd 15                	int    0x15
    1b93:	b8 07 53             	mov    ax,0x5307
    1b96:	b3 01                	mov    bl,0x1
    1b98:	b9 03 00             	mov    cx,0x3
    1b9b:	cd 15                	int    0x15
    1b9d:	61                   	popa   
    1b9e:	66 59                	pop    ecx
    1ba0:	ff e1                	jmp    cx

00001ba2 <_loadReal>:
    1ba2:	66 55                	push   ebp
    1ba4:	06                   	push   es
    1ba5:	1e                   	push   ds
    1ba6:	50                   	push   ax
    1ba7:	52                   	push   dx
    1ba8:	51                   	push   cx
    1ba9:	53                   	push   bx
    1baa:	8c c8                	mov    ax,cs
    1bac:	8e d8                	mov    ds,ax
    1bae:	67 8b 44 24 20       	mov    ax,WORD PTR [esp+0x20]
    1bb3:	8e c0                	mov    es,ax
    1bb5:	67 8b 44 24 14       	mov    ax,WORD PTR [esp+0x14]
    1bba:	ba 00 00             	mov    dx,0x0
    1bbd:	b9 00 02             	mov    cx,0x200
    1bc0:	f7 f1                	div    cx
    1bc2:	b9 12 00             	mov    cx,0x12
    1bc5:	f7 f1                	div    cx
    1bc7:	88 d1                	mov    cl,dl
    1bc9:	fe c1                	inc    cl
    1bcb:	89 c2                	mov    dx,ax
    1bcd:	d1 e8                	shr    ax,1
    1bcf:	88 c5                	mov    ch,al
    1bd1:	88 d6                	mov    dh,dl
    1bd3:	80 e6 01             	and    dh,0x1
    1bd6:	b2 00                	mov    dl,0x0
    1bd8:	52                   	push   dx
    1bd9:	51                   	push   cx
    1bda:	67 8b 44 24 1c       	mov    ax,WORD PTR [esp+0x1c]
    1bdf:	b9 00 02             	mov    cx,0x200
    1be2:	ba 00 00             	mov    dx,0x0
    1be5:	f7 f1                	div    cx
    1be7:	59                   	pop    cx
    1be8:	5a                   	pop    dx
    1be9:	67 8b 5c 24 1c       	mov    bx,WORD PTR [esp+0x1c]
    1bee:	b4 02                	mov    ah,0x2
    1bf0:	cd 13                	int    0x13
    1bf2:	5b                   	pop    bx
    1bf3:	59                   	pop    cx
    1bf4:	5a                   	pop    dx
    1bf5:	58                   	pop    ax
    1bf6:	1f                   	pop    ds
    1bf7:	07                   	pop    es
    1bf8:	66 5d                	pop    ebp
    1bfa:	66 59                	pop    ecx
    1bfc:	ff e1                	jmp    cx

00001bfe <save>:
    1bfe:	83 c4 06             	add    sp,0x6
    1c01:	2e 89 26 ca 1c       	mov    WORD PTR cs:0x1cca,sp
    1c06:	2e 8c 16 cc 1c       	mov    WORD PTR cs:0x1ccc,ss
    1c0b:	83 ec 06             	sub    sp,0x6
    1c0e:	2e 8f 06 e4 1c       	pop    WORD PTR cs:0x1ce4
    1c13:	1e                   	push   ds
    1c14:	0e                   	push   cs
    1c15:	1f                   	pop    ds
    1c16:	56                   	push   si
    1c17:	57                   	push   di
    1c18:	2e 8b 3e d2 1c       	mov    di,WORD PTR cs:0x1cd2
    1c1d:	2e 8f 06 d6 1c       	pop    WORD PTR cs:0x1cd6
    1c22:	2e 8f 06 d8 1c       	pop    WORD PTR cs:0x1cd8
    1c27:	2e 8f 06 da 1c       	pop    WORD PTR cs:0x1cda
    1c2c:	2e 8f 06 de 1c       	pop    WORD PTR cs:0x1cde
    1c31:	2e 8f 06 dc 1c       	pop    WORD PTR cs:0x1cdc
    1c36:	8c 55 20             	mov    WORD PTR [di+0x20],ss
    1c39:	89 65 1e             	mov    WORD PTR [di+0x1e],sp
    1c3c:	0e                   	push   cs
    1c3d:	17                   	pop    ss
    1c3e:	83 c7 1e             	add    di,0x1e
    1c41:	89 fc                	mov    sp,di
    1c43:	9c                   	pushf  
    1c44:	2e ff 36 de 1c       	push   WORD PTR cs:0x1cde
    1c49:	2e ff 36 dc 1c       	push   WORD PTR cs:0x1cdc
    1c4e:	60                   	pusha  
    1c4f:	5f                   	pop    di
    1c50:	5f                   	pop    di
    1c51:	2e ff 36 d8 1c       	push   WORD PTR cs:0x1cd8
    1c56:	2e ff 36 d6 1c       	push   WORD PTR cs:0x1cd6
    1c5b:	2e ff 36 da 1c       	push   WORD PTR cs:0x1cda
    1c60:	06                   	push   es
    1c61:	0f a0                	push   fs
    1c63:	0f a8                	push   gs
    1c65:	2e 8e 16 cc 1c       	mov    ss,WORD PTR cs:0x1ccc
    1c6a:	2e a3 ce 1c          	mov    cs:0x1cce,ax
    1c6e:	2e a1 ca 1c          	mov    ax,cs:0x1cca
    1c72:	89 c4                	mov    sp,ax
    1c74:	2e a1 ce 1c          	mov    ax,cs:0x1cce
    1c78:	2e ff 26 e4 1c       	jmp    WORD PTR cs:0x1ce4

00001c7d <restart>:
    1c7d:	0e                   	push   cs
    1c7e:	17                   	pop    ss
    1c7f:	2e 8f 06 e4 1c       	pop    WORD PTR cs:0x1ce4
    1c84:	2e 8b 26 d0 1c       	mov    sp,WORD PTR cs:0x1cd0
    1c89:	89 e0                	mov    ax,sp
    1c8b:	83 c0 18             	add    ax,0x18
    1c8e:	2e a3 e2 1c          	mov    cs:0x1ce2,ax
    1c92:	0f a9                	pop    gs
    1c94:	0f a1                	pop    fs
    1c96:	07                   	pop    es
    1c97:	1f                   	pop    ds
    1c98:	61                   	popa   
    1c99:	2e 8b 26 e2 1c       	mov    sp,WORD PTR cs:0x1ce2
    1c9e:	2e 8f 06 dc 1c       	pop    WORD PTR cs:0x1cdc
    1ca3:	2e 8f 06 de 1c       	pop    WORD PTR cs:0x1cde
    1ca8:	9d                   	popf   
    1ca9:	2e 8f 06 e2 1c       	pop    WORD PTR cs:0x1ce2
    1cae:	17                   	pop    ss
    1caf:	2e a3 d4 1c          	mov    cs:0x1cd4,ax
    1cb3:	2e a1 e2 1c          	mov    ax,cs:0x1ce2
    1cb7:	89 c4                	mov    sp,ax
    1cb9:	2e a1 d4 1c          	mov    ax,cs:0x1cd4
    1cbd:	fb                   	sti    
    1cbe:	9c                   	pushf  
    1cbf:	2e ff 36 de 1c       	push   WORD PTR cs:0x1cde
    1cc4:	2e ff 36 dc 1c       	push   WORD PTR cs:0x1cdc
    1cc9:	cf                   	iret   

00001cca <store_sp_dispatch>:
	...

00001ccc <store_ss_dispatch>:
	...

00001cce <store_ax_dispatch>:
	...

00001cd0 <new_process>:
	...

00001cd2 <old_process>:
	...

00001cd4 <store_ax>:
	...

00001cd6 <store_di>:
	...

00001cd8 <store_si>:
	...

00001cda <store_ds>:
	...

00001cdc <store_ip>:
	...

00001cde <store_cs>:
	...

00001ce0 <store_ss>:
	...

00001ce2 <store_sp>:
	...

00001ce4 <store_retaddr>:
	...

00001ce6 <_reboot>:
    1ce6:	cd 19                	int    0x19

00001ce8 <_getDate>:
    1ce8:	60                   	pusha  
    1ce9:	b4 04                	mov    ah,0x4
    1ceb:	cd 1a                	int    0x1a
    1ced:	88 cb                	mov    bl,cl
    1cef:	88 d8                	mov    al,bl
    1cf1:	24 f0                	and    al,0xf0
    1cf3:	b1 04                	mov    cl,0x4
    1cf5:	d2 e8                	shr    al,cl
    1cf7:	80 e3 0f             	and    bl,0xf
    1cfa:	88 dc                	mov    ah,bl
    1cfc:	05 30 30             	add    ax,0x3030
    1cff:	c7 06 4d 1d 32 30    	mov    WORD PTR ds:0x1d4d,0x3032
    1d05:	a3 4f 1d             	mov    ds:0x1d4f,ax
    1d08:	88 f3                	mov    bl,dh
    1d0a:	88 d8                	mov    al,bl
    1d0c:	24 f0                	and    al,0xf0
    1d0e:	b1 04                	mov    cl,0x4
    1d10:	d2 e8                	shr    al,cl
    1d12:	80 e3 0f             	and    bl,0xf
    1d15:	88 dc                	mov    ah,bl
    1d17:	05 30 30             	add    ax,0x3030
    1d1a:	a3 4a 1d             	mov    ds:0x1d4a,ax
    1d1d:	c6 06 4c 1d 2f       	mov    BYTE PTR ds:0x1d4c,0x2f
    1d22:	88 d3                	mov    bl,dl
    1d24:	88 d8                	mov    al,bl
    1d26:	24 f0                	and    al,0xf0
    1d28:	b1 04                	mov    cl,0x4
    1d2a:	d2 e8                	shr    al,cl
    1d2c:	80 e3 0f             	and    bl,0xf
    1d2f:	88 dc                	mov    ah,bl
    1d31:	05 30 30             	add    ax,0x3030
    1d34:	a3 47 1d             	mov    ds:0x1d47,ax
    1d37:	c6 06 49 1d 2f       	mov    BYTE PTR ds:0x1d49,0x2f
    1d3c:	61                   	popa   
    1d3d:	66 31 c0             	xor    eax,eax
    1d40:	b8 47 1d             	mov    ax,0x1d47
    1d43:	66 59                	pop    ecx
    1d45:	ff e1                	jmp    cx

00001d47 <date>:
	...

00001d52 <_roll>:
    1d52:	66 55                	push   ebp
    1d54:	b4 06                	mov    ah,0x6
    1d56:	b0 01                	mov    al,0x1
    1d58:	b7 0f                	mov    bh,0xf
    1d5a:	b9 00 00             	mov    cx,0x0
    1d5d:	ba 4f 18             	mov    dx,0x184f
    1d60:	cd 10                	int    0x10
    1d62:	66 5d                	pop    ebp
    1d64:	66 59                	pop    ecx
    1d66:	ff e1                	jmp    cx

00001d68 <lastline>:
	...

000024e8 <_getRecords>:
    24e8:	66 55                	push   ebp
    24ea:	8c c8                	mov    ax,cs
    24ec:	67 8b 44 24 08       	mov    ax,WORD PTR [esp+0x8]
    24f1:	8e c0                	mov    es,ax
    24f3:	66 31 db             	xor    ebx,ebx
    24f6:	66 67 8b 5c 24 0c    	mov    ebx,DWORD PTR [esp+0xc]
    24fc:	66 31 c0             	xor    eax,eax
    24ff:	89 d8                	mov    ax,bx
    2501:	66 5d                	pop    ebp
    2503:	66 59                	pop    ecx
    2505:	ff e1                	jmp    cx

00002507 <_fork>:
    2507:	60                   	pusha  
    2508:	b4 08                	mov    ah,0x8
    250a:	cd 21                	int    0x21
    250c:	61                   	popa   
    250d:	c3                   	ret    

0000250e <_exitprg>:
    250e:	66 55                	push   ebp
    2510:	66 89 e5             	mov    ebp,esp
    2513:	60                   	pusha  
    2514:	36 67 8b 5d 08       	mov    bx,WORD PTR ss:[ebp+0x8]
    2519:	b4 06                	mov    ah,0x6
    251b:	cd 21                	int    0x21
    251d:	61                   	popa   
    251e:	66 89 ec             	mov    esp,ebp
    2521:	66 5d                	pop    ebp
    2523:	c3                   	ret    

00002524 <_wait>:
    2524:	66 55                	push   ebp
    2526:	66 89 e5             	mov    ebp,esp
    2529:	60                   	pusha  
    252a:	36 67 8b 5d 08       	mov    bx,WORD PTR ss:[ebp+0x8]
    252f:	b4 07                	mov    ah,0x7
    2531:	cd 21                	int    0x21
    2533:	61                   	popa   
    2534:	66 89 ec             	mov    esp,ebp
    2537:	66 5d                	pop    ebp
    2539:	c3                   	ret    

0000253a <_memcpy>:
    253a:	66 55                	push   ebp
    253c:	66 89 e5             	mov    ebp,esp
    253f:	60                   	pusha  
    2540:	1e                   	push   ds
    2541:	06                   	push   es
    2542:	36 67 8b 45 08       	mov    ax,WORD PTR ss:[ebp+0x8]
    2547:	8e d8                	mov    ds,ax
    2549:	36 67 8b 75 0c       	mov    si,WORD PTR ss:[ebp+0xc]
    254e:	36 67 8b 45 10       	mov    ax,WORD PTR ss:[ebp+0x10]
    2553:	8e c0                	mov    es,ax
    2555:	36 67 8b 7d 14       	mov    di,WORD PTR ss:[ebp+0x14]
    255a:	36 67 8b 4d 18       	mov    cx,WORD PTR ss:[ebp+0x18]
    255f:	f3 a4                	rep movs BYTE PTR es:[di],BYTE PTR ds:[si]
    2561:	07                   	pop    es
    2562:	1f                   	pop    ds
    2563:	61                   	popa   
    2564:	66 89 ec             	mov    esp,ebp
    2567:	66 5d                	pop    ebp
    2569:	66 59                	pop    ecx
    256b:	ff e1                	jmp    cx

0000256d <_write>:
    256d:	66 55                	push   ebp
    256f:	06                   	push   es
    2570:	1e                   	push   ds
    2571:	50                   	push   ax
    2572:	52                   	push   dx
    2573:	51                   	push   cx
    2574:	53                   	push   bx
    2575:	8c c8                	mov    ax,cs
    2577:	8e d8                	mov    ds,ax
    2579:	67 8b 44 24 20       	mov    ax,WORD PTR [esp+0x20]
    257e:	8e c0                	mov    es,ax
    2580:	67 8b 44 24 14       	mov    ax,WORD PTR [esp+0x14]
    2585:	ba 00 00             	mov    dx,0x0
    2588:	b9 00 02             	mov    cx,0x200
    258b:	f7 f1                	div    cx
    258d:	b9 12 00             	mov    cx,0x12
    2590:	f7 f1                	div    cx
    2592:	88 d1                	mov    cl,dl
    2594:	fe c1                	inc    cl
    2596:	89 c2                	mov    dx,ax
    2598:	d1 e8                	shr    ax,1
    259a:	88 c5                	mov    ch,al
    259c:	88 d6                	mov    dh,dl
    259e:	80 e6 01             	and    dh,0x1
    25a1:	b2 00                	mov    dl,0x0
    25a3:	52                   	push   dx
    25a4:	51                   	push   cx
    25a5:	67 8b 44 24 1c       	mov    ax,WORD PTR [esp+0x1c]
    25aa:	b9 00 02             	mov    cx,0x200
    25ad:	ba 00 00             	mov    dx,0x0
    25b0:	f7 f1                	div    cx
    25b2:	59                   	pop    cx
    25b3:	5a                   	pop    dx
    25b4:	67 8b 5c 24 1c       	mov    bx,WORD PTR [esp+0x1c]
    25b9:	b4 03                	mov    ah,0x3
    25bb:	cd 13                	int    0x13
    25bd:	5b                   	pop    bx
    25be:	59                   	pop    cx
    25bf:	5a                   	pop    dx
    25c0:	58                   	pop    ax
    25c1:	1f                   	pop    ds
    25c2:	07                   	pop    es
    25c3:	66 5d                	pop    ebp
    25c5:	66 59                	pop    ecx
    25c7:	ff e1                	jmp    cx
    25c9:	66 90                	xchg   eax,eax
    25cb:	66 90                	xchg   eax,eax
    25cd:	66 90                	xchg   eax,eax
    25cf:	66 90                	xchg   eax,eax
    25d1:	66 90                	xchg   eax,eax
    25d3:	66 90                	xchg   eax,eax
    25d5:	66 90                	xchg   eax,eax
    25d7:	66 90                	xchg   eax,eax
    25d9:	66 90                	xchg   eax,eax
    25db:	66 90                	xchg   eax,eax
    25dd:	66 90                	xchg   eax,eax
    25df:	90                   	nop

000025e0 <_cp>:
cp():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:45
void initialProcessTable();
/////////// inside declarations end ////////////

//////////// IO ////////////////////
void cp(char * sour, char * des)
{
    25e0:	66 55                	push   ebp
    25e2:	66 89 e5             	mov    ebp,esp
    25e5:	66 83 ec 20          	sub    esp,0x20
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:46
	fcreate(des);
    25e9:	67 66 8b 45 0c       	mov    eax,DWORD PTR [ebp+0xc]
    25ee:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    25f3:	66 e8 33 20 00 00    	call   462c <_fcreate>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:47
	int sourInd = find(sour), desInd = find(des);
    25f9:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    25fe:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    2603:	66 e8 f7 11 00 00    	call   3800 <_find>
    2609:	67 66 89 45 fc       	mov    DWORD PTR [ebp-0x4],eax
    260e:	67 66 8b 45 0c       	mov    eax,DWORD PTR [ebp+0xc]
    2613:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    2618:	66 e8 e2 11 00 00    	call   3800 <_find>
    261e:	67 66 89 45 f8       	mov    DWORD PTR [ebp-0x8],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:48
	int segMask = 0xf0000, offsetMask = 0x0000ffff;
    2623:	67 66 c7 45 f4 00 00 	mov    DWORD PTR [ebp-0xc],0xf0000
    262a:	0f 00 
    262c:	67 66 c7 45 f0 ff ff 	mov    DWORD PTR [ebp-0x10],0xffff
    2633:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:49
	fopen(sour, readFile);
    2635:	67 66 c7 44 24 04 00 	mov    DWORD PTR [esp+0x4],0x0
    263c:	00 00 00 
    263f:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    2644:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    2649:	66 e8 e8 17 00 00    	call   3e37 <_fopen>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:50
	char * buffer = malloc(information[sourInd].size);
    264f:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    2654:	66 89 d0             	mov    eax,edx
    2657:	66 01 c0             	add    eax,eax
    265a:	66 01 d0             	add    eax,edx
    265d:	66 c1 e0 02          	shl    eax,0x2
    2661:	66 01 d0             	add    eax,edx
    2664:	66 c1 e0 02          	shl    eax,0x2
    2668:	66 01 d0             	add    eax,edx
    266b:	66 c1 e0 02          	shl    eax,0x2
    266f:	66 05 a8 bf 00 00    	add    eax,0xbfa8
    2675:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    2679:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    267e:	66 e8 83 36 00 00    	call   5d07 <_malloc>
    2684:	67 66 89 45 ec       	mov    DWORD PTR [ebp-0x14],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:51
	fread(sour, buffer, information[sourInd].size);
    2689:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    268e:	66 89 d0             	mov    eax,edx
    2691:	66 01 c0             	add    eax,eax
    2694:	66 01 d0             	add    eax,edx
    2697:	66 c1 e0 02          	shl    eax,0x2
    269b:	66 01 d0             	add    eax,edx
    269e:	66 c1 e0 02          	shl    eax,0x2
    26a2:	66 01 d0             	add    eax,edx
    26a5:	66 c1 e0 02          	shl    eax,0x2
    26a9:	66 05 a8 bf 00 00    	add    eax,0xbfa8
    26af:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    26b3:	67 66 89 44 24 08    	mov    DWORD PTR [esp+0x8],eax
    26b9:	67 66 8b 45 ec       	mov    eax,DWORD PTR [ebp-0x14]
    26be:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    26c4:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    26c9:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    26ce:	66 e8 50 1d 00 00    	call   4424 <_fread>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:52
	fclose(sour);
    26d4:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    26d9:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    26de:	66 e8 39 1b 00 00    	call   421d <_fclose>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:53
	fopen(des, readFile);
    26e4:	67 66 c7 44 24 04 00 	mov    DWORD PTR [esp+0x4],0x0
    26eb:	00 00 00 
    26ee:	67 66 8b 45 0c       	mov    eax,DWORD PTR [ebp+0xc]
    26f3:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    26f8:	66 e8 39 17 00 00    	call   3e37 <_fopen>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:54
	fwrite(des, buffer, information[sourInd].size);
    26fe:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    2703:	66 89 d0             	mov    eax,edx
    2706:	66 01 c0             	add    eax,eax
    2709:	66 01 d0             	add    eax,edx
    270c:	66 c1 e0 02          	shl    eax,0x2
    2710:	66 01 d0             	add    eax,edx
    2713:	66 c1 e0 02          	shl    eax,0x2
    2717:	66 01 d0             	add    eax,edx
    271a:	66 c1 e0 02          	shl    eax,0x2
    271e:	66 05 a8 bf 00 00    	add    eax,0xbfa8
    2724:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    2728:	67 66 89 44 24 08    	mov    DWORD PTR [esp+0x8],eax
    272e:	67 66 8b 45 ec       	mov    eax,DWORD PTR [ebp-0x14]
    2733:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    2739:	67 66 8b 45 0c       	mov    eax,DWORD PTR [ebp+0xc]
    273e:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    2743:	66 e8 df 1d 00 00    	call   4528 <_fwrite>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:55
	fclose(des);
    2749:	67 66 8b 45 0c       	mov    eax,DWORD PTR [ebp+0xc]
    274e:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    2753:	66 e8 c4 1a 00 00    	call   421d <_fclose>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:56
}
    2759:	90                   	nop
    275a:	66 c9                	leave  
    275c:	66 c3                	ret    

0000275e <_countLines>:
countLines():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:60


int countLines(char * sen)
{
    275e:	66 55                	push   ebp
    2760:	66 89 e5             	mov    ebp,esp
    2763:	66 83 ec 08          	sub    esp,0x8
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:61
	int lines = 0;
    2767:	67 66 c7 45 fc 00 00 	mov    DWORD PTR [ebp-0x4],0x0
    276e:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:62
	for (int i = 0; sen[i]; ++i) {
    2770:	67 66 c7 45 f8 00 00 	mov    DWORD PTR [ebp-0x8],0x0
    2777:	00 00 
    2779:	eb 1e                	jmp    2799 <_countLines+0x3b>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:63
		if (sen[i] == '\n') {
    277b:	67 66 8b 55 f8       	mov    edx,DWORD PTR [ebp-0x8]
    2780:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    2785:	66 01 d0             	add    eax,edx
    2788:	67 8a 00             	mov    al,BYTE PTR [eax]
    278b:	3c 0a                	cmp    al,0xa
    278d:	75 05                	jne    2794 <_countLines+0x36>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:64
			++lines;
    278f:	67 66 ff 45 fc       	inc    DWORD PTR [ebp-0x4]
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:62
	for (int i = 0; sen[i]; ++i) {
    2794:	67 66 ff 45 f8       	inc    DWORD PTR [ebp-0x8]
    2799:	67 66 8b 55 f8       	mov    edx,DWORD PTR [ebp-0x8]
    279e:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    27a3:	66 01 d0             	add    eax,edx
    27a6:	67 8a 00             	mov    al,BYTE PTR [eax]
    27a9:	84 c0                	test   al,al
    27ab:	75 ce                	jne    277b <_countLines+0x1d>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:67
		}
	}
	lines += 1;
    27ad:	67 66 ff 45 fc       	inc    DWORD PTR [ebp-0x4]
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:68
	return lines;
    27b2:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:69
}
    27b7:	66 c9                	leave  
    27b9:	66 c3                	ret    

000027bb <_initialScreen>:
initialScreen():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:72

void initialScreen(int welcome)
{
    27bb:	66 55                	push   ebp
    27bd:	66 89 e5             	mov    ebp,esp
    27c0:	66 83 ec 14          	sub    esp,0x14
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:73
	clear();
    27c4:	66 e8 d3 00 00 00    	call   289d <_clear>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:74
	if (welcome) {
    27ca:	67 66 83 7d 08 00    	cmp    DWORD PTR [ebp+0x8],0x0
    27d0:	74 63                	je     2835 <_initialScreen+0x7a>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:75
		printSentence(WelcomeSentence, line, 0, strlen(WelcomeSentence), white);
    27d2:	66 a1 64 78          	mov    eax,ds:0x7864
    27d6:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    27db:	66 e8 97 0a 00 00    	call   3278 <_strlen>
    27e1:	66 89 c1             	mov    ecx,eax
    27e4:	66 8b 16 00 a2       	mov    edx,DWORD PTR ds:0xa200
    27e9:	66 a1 64 78          	mov    eax,ds:0x7864
    27ed:	67 66 c7 44 24 10 0f 	mov    DWORD PTR [esp+0x10],0xf
    27f4:	00 00 00 
    27f7:	67 66 89 4c 24 0c    	mov    DWORD PTR [esp+0xc],ecx
    27fd:	67 66 c7 44 24 08 00 	mov    DWORD PTR [esp+0x8],0x0
    2804:	00 00 00 
    2807:	67 66 89 54 24 04    	mov    DWORD PTR [esp+0x4],edx
    280d:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    2812:	66 e8 dd f1 ff ff    	call   19f5 <_printSentence>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:76
		line += countLines(WelcomeSentence);
    2818:	66 a1 64 78          	mov    eax,ds:0x7864
    281c:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    2821:	66 e8 37 ff ff ff    	call   275e <_countLines>
    2827:	66 89 c2             	mov    edx,eax
    282a:	66 a1 00 a2          	mov    eax,ds:0xa200
    282e:	66 01 d0             	add    eax,edx
    2831:	66 a3 00 a2          	mov    ds:0xa200,eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:78
	}
	printSentence(prompt, line, 0, strlen(prompt), white);
    2835:	66 a1 68 78          	mov    eax,ds:0x7868
    2839:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    283e:	66 e8 34 0a 00 00    	call   3278 <_strlen>
    2844:	66 89 c1             	mov    ecx,eax
    2847:	66 8b 16 00 a2       	mov    edx,DWORD PTR ds:0xa200
    284c:	66 a1 68 78          	mov    eax,ds:0x7868
    2850:	67 66 c7 44 24 10 0f 	mov    DWORD PTR [esp+0x10],0xf
    2857:	00 00 00 
    285a:	67 66 89 4c 24 0c    	mov    DWORD PTR [esp+0xc],ecx
    2860:	67 66 c7 44 24 08 00 	mov    DWORD PTR [esp+0x8],0x0
    2867:	00 00 00 
    286a:	67 66 89 54 24 04    	mov    DWORD PTR [esp+0x4],edx
    2870:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    2875:	66 e8 7a f1 ff ff    	call   19f5 <_printSentence>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:79
	line += countLines(prompt);
    287b:	66 a1 68 78          	mov    eax,ds:0x7868
    287f:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    2884:	66 e8 d4 fe ff ff    	call   275e <_countLines>
    288a:	66 89 c2             	mov    edx,eax
    288d:	66 a1 00 a2          	mov    eax,ds:0xa200
    2891:	66 01 d0             	add    eax,edx
    2894:	66 a3 00 a2          	mov    ds:0xa200,eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:80
}
    2898:	90                   	nop
    2899:	66 c9                	leave  
    289b:	66 c3                	ret    

0000289d <_clear>:
clear():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:83

void clear()
{
    289d:	66 55                	push   ebp
    289f:	66 89 e5             	mov    ebp,esp
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:84
	line = 0;
    28a2:	66 c7 06 00 a2 00 00 	mov    DWORD PTR ds:0xa200,0x0
    28a9:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:85
	ClearScreen();
    28ab:	66 e8 6f f1 ff ff    	call   1a20 <_ClearScreen>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:86
}
    28b1:	90                   	nop
    28b2:	66 5d                	pop    ebp
    28b4:	66 c3                	ret    

000028b6 <_date>:
date():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:89

void date()
{
    28b6:	66 55                	push   ebp
    28b8:	66 89 e5             	mov    ebp,esp
    28bb:	66 83 ec 18          	sub    esp,0x18
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:90
	char * dateSen = getDate();
    28bf:	66 e8 23 f4 ff ff    	call   1ce8 <_getDate>
    28c5:	67 66 89 45 fc       	mov    DWORD PTR [ebp-0x4],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:91
	printSentence(dateSen, line, 30, strlen(dateSen), purple);
    28ca:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
    28cf:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    28d4:	66 e8 9e 09 00 00    	call   3278 <_strlen>
    28da:	66 89 c2             	mov    edx,eax
    28dd:	66 a1 00 a2          	mov    eax,ds:0xa200
    28e1:	67 66 c7 44 24 10 0d 	mov    DWORD PTR [esp+0x10],0xd
    28e8:	00 00 00 
    28eb:	67 66 89 54 24 0c    	mov    DWORD PTR [esp+0xc],edx
    28f1:	67 66 c7 44 24 08 1e 	mov    DWORD PTR [esp+0x8],0x1e
    28f8:	00 00 00 
    28fb:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    2901:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
    2906:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    290b:	66 e8 e4 f0 ff ff    	call   19f5 <_printSentence>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:92
	newline();
    2911:	66 e8 c3 00 00 00    	call   29da <_newline>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:93
	line += countLines(dateSen);
    2917:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
    291c:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    2921:	66 e8 37 fe ff ff    	call   275e <_countLines>
    2927:	66 89 c2             	mov    edx,eax
    292a:	66 a1 00 a2          	mov    eax,ds:0xa200
    292e:	66 01 d0             	add    eax,edx
    2931:	66 a3 00 a2          	mov    ds:0xa200,eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:94
}
    2935:	90                   	nop
    2936:	66 c9                	leave  
    2938:	66 c3                	ret    

0000293a <_man>:
man():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:98


void man()
{
    293a:	66 55                	push   ebp
    293c:	66 89 e5             	mov    ebp,esp
    293f:	66 83 ec 18          	sub    esp,0x18
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:99
	char * manual = getRecords(segOfOs, offsetOfManual);
    2943:	67 66 c7 44 24 04 00 	mov    DWORD PTR [esp+0x4],0xd500
    294a:	d5 00 00 
    294d:	67 66 c7 04 24 00 20 	mov    DWORD PTR [esp],0x2000
    2954:	00 00 
    2956:	66 e8 8c fb ff ff    	call   24e8 <_getRecords>
    295c:	67 66 89 45 fc       	mov    DWORD PTR [ebp-0x4],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:100
	line = 0;
    2961:	66 c7 06 00 a2 00 00 	mov    DWORD PTR ds:0xa200,0x0
    2968:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:101
	ClearScreen();
    296a:	66 e8 b0 f0 ff ff    	call   1a20 <_ClearScreen>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:102
	printSentence(manual, line, 0, strlen(manual), purple);
    2970:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
    2975:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    297a:	66 e8 f8 08 00 00    	call   3278 <_strlen>
    2980:	66 89 c2             	mov    edx,eax
    2983:	66 a1 00 a2          	mov    eax,ds:0xa200
    2987:	67 66 c7 44 24 10 0d 	mov    DWORD PTR [esp+0x10],0xd
    298e:	00 00 00 
    2991:	67 66 89 54 24 0c    	mov    DWORD PTR [esp+0xc],edx
    2997:	67 66 c7 44 24 08 00 	mov    DWORD PTR [esp+0x8],0x0
    299e:	00 00 00 
    29a1:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    29a7:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
    29ac:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    29b1:	66 e8 3e f0 ff ff    	call   19f5 <_printSentence>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:103
	line += countLines(manual);
    29b7:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
    29bc:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    29c1:	66 e8 97 fd ff ff    	call   275e <_countLines>
    29c7:	66 89 c2             	mov    edx,eax
    29ca:	66 a1 00 a2          	mov    eax,ds:0xa200
    29ce:	66 01 d0             	add    eax,edx
    29d1:	66 a3 00 a2          	mov    ds:0xa200,eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:104
}
    29d5:	90                   	nop
    29d6:	66 c9                	leave  
    29d8:	66 c3                	ret    

000029da <_newline>:
newline():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:107

void newline()
{
    29da:	66 55                	push   ebp
    29dc:	66 89 e5             	mov    ebp,esp
    29df:	66 83 ec 14          	sub    esp,0x14
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:108
	if (line >= 25) {
    29e3:	66 a1 00 a2          	mov    eax,ds:0xa200
    29e7:	66 83 f8 18          	cmp    eax,0x18
    29eb:	7e 0f                	jle    29fc <_newline+0x22>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:109
		roll();
    29ed:	66 e8 5f f3 ff ff    	call   1d52 <_roll>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:110
		line = 24;
    29f3:	66 c7 06 00 a2 18 00 	mov    DWORD PTR ds:0xa200,0x18
    29fa:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:112
	}
	printSentence(prompt, line, 0, strlen(prompt), white);
    29fc:	66 a1 68 78          	mov    eax,ds:0x7868
    2a00:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    2a05:	66 e8 6d 08 00 00    	call   3278 <_strlen>
    2a0b:	66 89 c1             	mov    ecx,eax
    2a0e:	66 8b 16 00 a2       	mov    edx,DWORD PTR ds:0xa200
    2a13:	66 a1 68 78          	mov    eax,ds:0x7868
    2a17:	67 66 c7 44 24 10 0f 	mov    DWORD PTR [esp+0x10],0xf
    2a1e:	00 00 00 
    2a21:	67 66 89 4c 24 0c    	mov    DWORD PTR [esp+0xc],ecx
    2a27:	67 66 c7 44 24 08 00 	mov    DWORD PTR [esp+0x8],0x0
    2a2e:	00 00 00 
    2a31:	67 66 89 54 24 04    	mov    DWORD PTR [esp+0x4],edx
    2a37:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    2a3c:	66 e8 b3 ef ff ff    	call   19f5 <_printSentence>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:113
	line += countLines(prompt);
    2a42:	66 a1 68 78          	mov    eax,ds:0x7868
    2a46:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    2a4b:	66 e8 0d fd ff ff    	call   275e <_countLines>
    2a51:	66 89 c2             	mov    edx,eax
    2a54:	66 a1 00 a2          	mov    eax,ds:0xa200
    2a58:	66 01 d0             	add    eax,edx
    2a5b:	66 a3 00 a2          	mov    ds:0xa200,eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:114
}
    2a5f:	90                   	nop
    2a60:	66 c9                	leave  
    2a62:	66 c3                	ret    

00002a64 <_ls>:
ls():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:117

void ls()
{
    2a64:	66 55                	push   ebp
    2a66:	66 89 e5             	mov    ebp,esp
    2a69:	66 57                	push   edi
    2a6b:	66 53                	push   ebx
    2a6d:	66 83 ec 38          	sub    esp,0x38
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:118
	char * head = "Name           Size           Lma            Type";
    2a71:	67 66 c7 45 f0 9c 80 	mov    DWORD PTR [ebp-0x10],0x809c
    2a78:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:119
	printSentence(head, line, 10, strlen(head), green);
    2a7a:	67 66 8b 45 f0       	mov    eax,DWORD PTR [ebp-0x10]
    2a7f:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    2a84:	66 e8 ee 07 00 00    	call   3278 <_strlen>
    2a8a:	66 89 c2             	mov    edx,eax
    2a8d:	66 a1 00 a2          	mov    eax,ds:0xa200
    2a91:	67 66 c7 44 24 10 0a 	mov    DWORD PTR [esp+0x10],0xa
    2a98:	00 00 00 
    2a9b:	67 66 89 54 24 0c    	mov    DWORD PTR [esp+0xc],edx
    2aa1:	67 66 c7 44 24 08 0a 	mov    DWORD PTR [esp+0x8],0xa
    2aa8:	00 00 00 
    2aab:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    2ab1:	67 66 8b 45 f0       	mov    eax,DWORD PTR [ebp-0x10]
    2ab6:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    2abb:	66 e8 34 ef ff ff    	call   19f5 <_printSentence>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:120
	char typeTable[10][1] = {"N", "D", "E", "F"};
    2ac1:	67 66 8d 55 e6       	lea    edx,[ebp-0x1a]
    2ac6:	66 b9 0a 00 00 00    	mov    ecx,0xa
    2acc:	b0 00                	mov    al,0x0
    2ace:	66 89 d7             	mov    edi,edx
    2ad1:	f3 aa                	rep stos BYTE PTR es:[di],al
    2ad3:	67 c6 45 e6 4e       	mov    BYTE PTR [ebp-0x1a],0x4e
    2ad8:	67 c6 45 e7 44       	mov    BYTE PTR [ebp-0x19],0x44
    2add:	67 c6 45 e8 45       	mov    BYTE PTR [ebp-0x18],0x45
    2ae2:	67 c6 45 e9 46       	mov    BYTE PTR [ebp-0x17],0x46
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:121
	line += countLines(head);
    2ae7:	67 66 8b 45 f0       	mov    eax,DWORD PTR [ebp-0x10]
    2aec:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    2af1:	66 e8 67 fc ff ff    	call   275e <_countLines>
    2af7:	66 89 c2             	mov    edx,eax
    2afa:	66 a1 00 a2          	mov    eax,ds:0xa200
    2afe:	66 01 d0             	add    eax,edx
    2b01:	66 a3 00 a2          	mov    ds:0xa200,eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:123
	char tmp[15];
	for (int i = 0; i < Len; ++i)
    2b05:	67 66 c7 45 f4 00 00 	mov    DWORD PTR [ebp-0xc],0x0
    2b0c:	00 00 
    2b0e:	e9 42 03             	jmp    2e53 <_ls+0x3ef>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:125
	{
		if (information[i].type != null && information[i].deleted != 1) {
    2b11:	67 66 8b 55 f4       	mov    edx,DWORD PTR [ebp-0xc]
    2b16:	66 89 d0             	mov    eax,edx
    2b19:	66 01 c0             	add    eax,eax
    2b1c:	66 01 d0             	add    eax,edx
    2b1f:	66 c1 e0 02          	shl    eax,0x2
    2b23:	66 01 d0             	add    eax,edx
    2b26:	66 c1 e0 02          	shl    eax,0x2
    2b2a:	66 01 d0             	add    eax,edx
    2b2d:	66 c1 e0 02          	shl    eax,0x2
    2b31:	66 05 a0 bf 00 00    	add    eax,0xbfa0
    2b37:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    2b3b:	66 85 c0             	test   eax,eax
    2b3e:	0f 84 0c 03          	je     2e4e <_ls+0x3ea>
    2b42:	67 66 8b 55 f4       	mov    edx,DWORD PTR [ebp-0xc]
    2b47:	66 89 d0             	mov    eax,edx
    2b4a:	66 01 c0             	add    eax,eax
    2b4d:	66 01 d0             	add    eax,edx
    2b50:	66 c1 e0 02          	shl    eax,0x2
    2b54:	66 01 d0             	add    eax,edx
    2b57:	66 c1 e0 02          	shl    eax,0x2
    2b5b:	66 01 d0             	add    eax,edx
    2b5e:	66 c1 e0 02          	shl    eax,0x2
    2b62:	66 05 ac bf 00 00    	add    eax,0xbfac
    2b68:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    2b6c:	66 83 f8 01          	cmp    eax,0x1
    2b70:	0f 84 da 02          	je     2e4e <_ls+0x3ea>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:126
			printSentence(information[i].name, line, 10, strlen(information[i].name), purple);
    2b74:	67 66 8b 55 f4       	mov    edx,DWORD PTR [ebp-0xc]
    2b79:	66 89 d0             	mov    eax,edx
    2b7c:	66 01 c0             	add    eax,eax
    2b7f:	66 01 d0             	add    eax,edx
    2b82:	66 c1 e0 02          	shl    eax,0x2
    2b86:	66 01 d0             	add    eax,edx
    2b89:	66 c1 e0 02          	shl    eax,0x2
    2b8d:	66 01 d0             	add    eax,edx
    2b90:	66 c1 e0 02          	shl    eax,0x2
    2b94:	66 05 80 bf 00 00    	add    eax,0xbf80
    2b9a:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    2b9f:	66 e8 d3 06 00 00    	call   3278 <_strlen>
    2ba5:	66 89 c3             	mov    ebx,eax
    2ba8:	66 8b 0e 00 a2       	mov    ecx,DWORD PTR ds:0xa200
    2bad:	67 66 8b 55 f4       	mov    edx,DWORD PTR [ebp-0xc]
    2bb2:	66 89 d0             	mov    eax,edx
    2bb5:	66 01 c0             	add    eax,eax
    2bb8:	66 01 d0             	add    eax,edx
    2bbb:	66 c1 e0 02          	shl    eax,0x2
    2bbf:	66 01 d0             	add    eax,edx
    2bc2:	66 c1 e0 02          	shl    eax,0x2
    2bc6:	66 01 d0             	add    eax,edx
    2bc9:	66 c1 e0 02          	shl    eax,0x2
    2bcd:	66 05 80 bf 00 00    	add    eax,0xbf80
    2bd3:	67 66 c7 44 24 10 0d 	mov    DWORD PTR [esp+0x10],0xd
    2bda:	00 00 00 
    2bdd:	67 66 89 5c 24 0c    	mov    DWORD PTR [esp+0xc],ebx
    2be3:	67 66 c7 44 24 08 0a 	mov    DWORD PTR [esp+0x8],0xa
    2bea:	00 00 00 
    2bed:	67 66 89 4c 24 04    	mov    DWORD PTR [esp+0x4],ecx
    2bf3:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    2bf8:	66 e8 f7 ed ff ff    	call   19f5 <_printSentence>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:127
			if (information[i].size == 0) {
    2bfe:	67 66 8b 55 f4       	mov    edx,DWORD PTR [ebp-0xc]
    2c03:	66 89 d0             	mov    eax,edx
    2c06:	66 01 c0             	add    eax,eax
    2c09:	66 01 d0             	add    eax,edx
    2c0c:	66 c1 e0 02          	shl    eax,0x2
    2c10:	66 01 d0             	add    eax,edx
    2c13:	66 c1 e0 02          	shl    eax,0x2
    2c17:	66 01 d0             	add    eax,edx
    2c1a:	66 c1 e0 02          	shl    eax,0x2
    2c1e:	66 05 a8 bf 00 00    	add    eax,0xbfa8
    2c24:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    2c28:	66 85 c0             	test   eax,eax
    2c2b:	75 3a                	jne    2c67 <_ls+0x203>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:128
				printSentence("--", line, 25, 2, purple);
    2c2d:	66 a1 00 a2          	mov    eax,ds:0xa200
    2c31:	67 66 c7 44 24 10 0d 	mov    DWORD PTR [esp+0x10],0xd
    2c38:	00 00 00 
    2c3b:	67 66 c7 44 24 0c 02 	mov    DWORD PTR [esp+0xc],0x2
    2c42:	00 00 00 
    2c45:	67 66 c7 44 24 08 19 	mov    DWORD PTR [esp+0x8],0x19
    2c4c:	00 00 00 
    2c4f:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    2c55:	67 66 c7 04 24 ce 80 	mov    DWORD PTR [esp],0x80ce
    2c5c:	00 00 
    2c5e:	66 e8 91 ed ff ff    	call   19f5 <_printSentence>
    2c64:	e9 87 00             	jmp    2cee <_ls+0x28a>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:130
			} else {
				int2str(information[i].size, tmp);
    2c67:	67 66 8b 55 f4       	mov    edx,DWORD PTR [ebp-0xc]
    2c6c:	66 89 d0             	mov    eax,edx
    2c6f:	66 01 c0             	add    eax,eax
    2c72:	66 01 d0             	add    eax,edx
    2c75:	66 c1 e0 02          	shl    eax,0x2
    2c79:	66 01 d0             	add    eax,edx
    2c7c:	66 c1 e0 02          	shl    eax,0x2
    2c80:	66 01 d0             	add    eax,edx
    2c83:	66 c1 e0 02          	shl    eax,0x2
    2c87:	66 05 a8 bf 00 00    	add    eax,0xbfa8
    2c8d:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    2c91:	67 66 8d 55 d7       	lea    edx,[ebp-0x29]
    2c96:	67 66 89 54 24 04    	mov    DWORD PTR [esp+0x4],edx
    2c9c:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    2ca1:	66 e8 26 08 00 00    	call   34cd <_int2str>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:131
				printSentence(tmp, line, 25, strlen(tmp), purple);
    2ca7:	67 66 8d 45 d7       	lea    eax,[ebp-0x29]
    2cac:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    2cb1:	66 e8 c1 05 00 00    	call   3278 <_strlen>
    2cb7:	66 89 c2             	mov    edx,eax
    2cba:	66 a1 00 a2          	mov    eax,ds:0xa200
    2cbe:	67 66 c7 44 24 10 0d 	mov    DWORD PTR [esp+0x10],0xd
    2cc5:	00 00 00 
    2cc8:	67 66 89 54 24 0c    	mov    DWORD PTR [esp+0xc],edx
    2cce:	67 66 c7 44 24 08 19 	mov    DWORD PTR [esp+0x8],0x19
    2cd5:	00 00 00 
    2cd8:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    2cde:	67 66 8d 45 d7       	lea    eax,[ebp-0x29]
    2ce3:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    2ce8:	66 e8 07 ed ff ff    	call   19f5 <_printSentence>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:133
			}
			if (information[i].lmaddress == 0) {
    2cee:	67 66 8b 55 f4       	mov    edx,DWORD PTR [ebp-0xc]
    2cf3:	66 89 d0             	mov    eax,edx
    2cf6:	66 01 c0             	add    eax,eax
    2cf9:	66 01 d0             	add    eax,edx
    2cfc:	66 c1 e0 02          	shl    eax,0x2
    2d00:	66 01 d0             	add    eax,edx
    2d03:	66 c1 e0 02          	shl    eax,0x2
    2d07:	66 01 d0             	add    eax,edx
    2d0a:	66 c1 e0 02          	shl    eax,0x2
    2d0e:	66 05 a4 bf 00 00    	add    eax,0xbfa4
    2d14:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    2d18:	66 85 c0             	test   eax,eax
    2d1b:	75 3a                	jne    2d57 <_ls+0x2f3>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:134
				printSentence("--", line, 40, 2, purple);
    2d1d:	66 a1 00 a2          	mov    eax,ds:0xa200
    2d21:	67 66 c7 44 24 10 0d 	mov    DWORD PTR [esp+0x10],0xd
    2d28:	00 00 00 
    2d2b:	67 66 c7 44 24 0c 02 	mov    DWORD PTR [esp+0xc],0x2
    2d32:	00 00 00 
    2d35:	67 66 c7 44 24 08 28 	mov    DWORD PTR [esp+0x8],0x28
    2d3c:	00 00 00 
    2d3f:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    2d45:	67 66 c7 04 24 ce 80 	mov    DWORD PTR [esp],0x80ce
    2d4c:	00 00 
    2d4e:	66 e8 a1 ec ff ff    	call   19f5 <_printSentence>
    2d54:	e9 87 00             	jmp    2dde <_ls+0x37a>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:136
			} else {
				int2str(information[i].lmaddress, tmp);
    2d57:	67 66 8b 55 f4       	mov    edx,DWORD PTR [ebp-0xc]
    2d5c:	66 89 d0             	mov    eax,edx
    2d5f:	66 01 c0             	add    eax,eax
    2d62:	66 01 d0             	add    eax,edx
    2d65:	66 c1 e0 02          	shl    eax,0x2
    2d69:	66 01 d0             	add    eax,edx
    2d6c:	66 c1 e0 02          	shl    eax,0x2
    2d70:	66 01 d0             	add    eax,edx
    2d73:	66 c1 e0 02          	shl    eax,0x2
    2d77:	66 05 a4 bf 00 00    	add    eax,0xbfa4
    2d7d:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    2d81:	67 66 8d 55 d7       	lea    edx,[ebp-0x29]
    2d86:	67 66 89 54 24 04    	mov    DWORD PTR [esp+0x4],edx
    2d8c:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    2d91:	66 e8 36 07 00 00    	call   34cd <_int2str>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:137
				printSentence(tmp, line, 40, strlen(tmp), purple);
    2d97:	67 66 8d 45 d7       	lea    eax,[ebp-0x29]
    2d9c:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    2da1:	66 e8 d1 04 00 00    	call   3278 <_strlen>
    2da7:	66 89 c2             	mov    edx,eax
    2daa:	66 a1 00 a2          	mov    eax,ds:0xa200
    2dae:	67 66 c7 44 24 10 0d 	mov    DWORD PTR [esp+0x10],0xd
    2db5:	00 00 00 
    2db8:	67 66 89 54 24 0c    	mov    DWORD PTR [esp+0xc],edx
    2dbe:	67 66 c7 44 24 08 28 	mov    DWORD PTR [esp+0x8],0x28
    2dc5:	00 00 00 
    2dc8:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    2dce:	67 66 8d 45 d7       	lea    eax,[ebp-0x29]
    2dd3:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    2dd8:	66 e8 17 ec ff ff    	call   19f5 <_printSentence>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:139
			}
			printSentence(typeTable[information[i].type], line, 55, 1, purple);
    2dde:	66 8b 0e 00 a2       	mov    ecx,DWORD PTR ds:0xa200
    2de3:	67 66 8b 55 f4       	mov    edx,DWORD PTR [ebp-0xc]
    2de8:	66 89 d0             	mov    eax,edx
    2deb:	66 01 c0             	add    eax,eax
    2dee:	66 01 d0             	add    eax,edx
    2df1:	66 c1 e0 02          	shl    eax,0x2
    2df5:	66 01 d0             	add    eax,edx
    2df8:	66 c1 e0 02          	shl    eax,0x2
    2dfc:	66 01 d0             	add    eax,edx
    2dff:	66 c1 e0 02          	shl    eax,0x2
    2e03:	66 05 a0 bf 00 00    	add    eax,0xbfa0
    2e09:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    2e0d:	67 66 8d 55 e6       	lea    edx,[ebp-0x1a]
    2e12:	66 01 d0             	add    eax,edx
    2e15:	67 66 c7 44 24 10 0d 	mov    DWORD PTR [esp+0x10],0xd
    2e1c:	00 00 00 
    2e1f:	67 66 c7 44 24 0c 01 	mov    DWORD PTR [esp+0xc],0x1
    2e26:	00 00 00 
    2e29:	67 66 c7 44 24 08 37 	mov    DWORD PTR [esp+0x8],0x37
    2e30:	00 00 00 
    2e33:	67 66 89 4c 24 04    	mov    DWORD PTR [esp+0x4],ecx
    2e39:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    2e3e:	66 e8 b1 eb ff ff    	call   19f5 <_printSentence>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:140
			line += 1;
    2e44:	66 a1 00 a2          	mov    eax,ds:0xa200
    2e48:	66 40                	inc    eax
    2e4a:	66 a3 00 a2          	mov    ds:0xa200,eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:123
	for (int i = 0; i < Len; ++i)
    2e4e:	67 66 ff 45 f4       	inc    DWORD PTR [ebp-0xc]
    2e53:	67 66 83 7d f4 13    	cmp    DWORD PTR [ebp-0xc],0x13
    2e59:	0f 8e b4 fc          	jle    2b11 <_ls+0xad>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:143
		}
	}
}
    2e5d:	90                   	nop
    2e5e:	66 83 c4 38          	add    esp,0x38
    2e62:	66 5b                	pop    ebx
    2e64:	66 5f                	pop    edi
    2e66:	66 5d                	pop    ebp
    2e68:	66 c3                	ret    

00002e6a <_ps>:
ps():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:146

void ps()
{
    2e6a:	66 55                	push   ebp
    2e6c:	66 89 e5             	mov    ebp,esp
    2e6f:	66 57                	push   edi
    2e71:	66 56                	push   esi
    2e73:	66 53                	push   ebx
    2e75:	66 83 ec 7c          	sub    esp,0x7c
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:147
	char * head = "Id  ProcessName       Status\n";
    2e79:	67 66 c7 45 ec d1 80 	mov    DWORD PTR [ebp-0x14],0x80d1
    2e80:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:148
	char status[6][10] = {"Origin", "ready", "running", "blocked", "suspend", "exit"};
    2e82:	67 66 8d 45 ac       	lea    eax,[ebp-0x54]
    2e87:	66 bb 80 78 00 00    	mov    ebx,0x7880
    2e8d:	66 ba 0f 00 00 00    	mov    edx,0xf
    2e93:	66 89 c7             	mov    edi,eax
    2e96:	66 89 de             	mov    esi,ebx
    2e99:	66 89 d1             	mov    ecx,edx
    2e9c:	66 f3 a5             	rep movs DWORD PTR es:[di],DWORD PTR ds:[si]
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:149
	int begin = 20;
    2e9f:	67 66 c7 45 e8 14 00 	mov    DWORD PTR [ebp-0x18],0x14
    2ea6:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:150
	printSentence(head, line++, begin, strlen(head), purple);
    2ea8:	67 66 8b 45 ec       	mov    eax,DWORD PTR [ebp-0x14]
    2ead:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    2eb2:	66 e8 c0 03 00 00    	call   3278 <_strlen>
    2eb8:	66 89 c2             	mov    edx,eax
    2ebb:	66 a1 00 a2          	mov    eax,ds:0xa200
    2ebf:	67 66 8d 48 01       	lea    ecx,[eax+0x1]
    2ec4:	66 89 0e 00 a2       	mov    DWORD PTR ds:0xa200,ecx
    2ec9:	67 66 c7 44 24 10 0d 	mov    DWORD PTR [esp+0x10],0xd
    2ed0:	00 00 00 
    2ed3:	67 66 89 54 24 0c    	mov    DWORD PTR [esp+0xc],edx
    2ed9:	67 66 8b 55 e8       	mov    edx,DWORD PTR [ebp-0x18]
    2ede:	67 66 89 54 24 08    	mov    DWORD PTR [esp+0x8],edx
    2ee4:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    2eea:	67 66 8b 45 ec       	mov    eax,DWORD PTR [ebp-0x14]
    2eef:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    2ef4:	66 e8 fb ea ff ff    	call   19f5 <_printSentence>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:152
	char str[30];
	for (int i = 0; i < Len; ++i)
    2efa:	67 66 c7 45 f0 00 00 	mov    DWORD PTR [ebp-0x10],0x0
    2f01:	00 00 
    2f03:	e9 2f 02             	jmp    3135 <_ps+0x2cb>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:154
	{
		if (processTable[i].id != -1 && processTable[i].status != Origin)
    2f06:	67 66 8b 55 f0       	mov    edx,DWORD PTR [ebp-0x10]
    2f0b:	66 89 d0             	mov    eax,edx
    2f0e:	66 c1 e0 03          	shl    eax,0x3
    2f12:	66 01 d0             	add    eax,edx
    2f15:	66 01 c0             	add    eax,eax
    2f18:	66 01 d0             	add    eax,edx
    2f1b:	66 c1 e0 04          	shl    eax,0x4
    2f1f:	66 05 a4 d0 00 00    	add    eax,0xd0a4
    2f25:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    2f29:	66 83 f8 ff          	cmp    eax,0xffffffff
    2f2d:	0f 84 ff 01          	je     3130 <_ps+0x2c6>
    2f31:	67 66 8b 55 f0       	mov    edx,DWORD PTR [ebp-0x10]
    2f36:	66 89 d0             	mov    eax,edx
    2f39:	66 c1 e0 03          	shl    eax,0x3
    2f3d:	66 01 d0             	add    eax,edx
    2f40:	66 01 c0             	add    eax,eax
    2f43:	66 01 d0             	add    eax,edx
    2f46:	66 c1 e0 04          	shl    eax,0x4
    2f4a:	66 05 ac d1 00 00    	add    eax,0xd1ac
    2f50:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    2f54:	66 85 c0             	test   eax,eax
    2f57:	0f 84 d5 01          	je     3130 <_ps+0x2c6>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:156
		{
			int2str(processTable[i].id, str);
    2f5b:	67 66 8b 55 f0       	mov    edx,DWORD PTR [ebp-0x10]
    2f60:	66 89 d0             	mov    eax,edx
    2f63:	66 c1 e0 03          	shl    eax,0x3
    2f67:	66 01 d0             	add    eax,edx
    2f6a:	66 01 c0             	add    eax,eax
    2f6d:	66 01 d0             	add    eax,edx
    2f70:	66 c1 e0 04          	shl    eax,0x4
    2f74:	66 05 a4 d0 00 00    	add    eax,0xd0a4
    2f7a:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    2f7e:	67 66 8d 55 8e       	lea    edx,[ebp-0x72]
    2f83:	67 66 89 54 24 04    	mov    DWORD PTR [esp+0x4],edx
    2f89:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    2f8e:	66 e8 39 05 00 00    	call   34cd <_int2str>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:157
			printSentence(str, line, begin + 1, strlen(str), purple);
    2f94:	67 66 8d 45 8e       	lea    eax,[ebp-0x72]
    2f99:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    2f9e:	66 e8 d4 02 00 00    	call   3278 <_strlen>
    2fa4:	66 89 c2             	mov    edx,eax
    2fa7:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
    2fac:	67 66 8d 48 01       	lea    ecx,[eax+0x1]
    2fb1:	66 a1 00 a2          	mov    eax,ds:0xa200
    2fb5:	67 66 c7 44 24 10 0d 	mov    DWORD PTR [esp+0x10],0xd
    2fbc:	00 00 00 
    2fbf:	67 66 89 54 24 0c    	mov    DWORD PTR [esp+0xc],edx
    2fc5:	67 66 89 4c 24 08    	mov    DWORD PTR [esp+0x8],ecx
    2fcb:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    2fd1:	67 66 8d 45 8e       	lea    eax,[ebp-0x72]
    2fd6:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    2fdb:	66 e8 14 ea ff ff    	call   19f5 <_printSentence>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:158
			printSentence(processTable[i].name, line, begin + 5, strlen(processTable[i].name), purple);
    2fe1:	67 66 8b 55 f0       	mov    edx,DWORD PTR [ebp-0x10]
    2fe6:	66 89 d0             	mov    eax,edx
    2fe9:	66 c1 e0 03          	shl    eax,0x3
    2fed:	66 01 d0             	add    eax,edx
    2ff0:	66 01 c0             	add    eax,eax
    2ff3:	66 01 d0             	add    eax,edx
    2ff6:	66 c1 e0 04          	shl    eax,0x4
    2ffa:	66 83 c0 30          	add    eax,0x30
    2ffe:	66 05 80 d0 00 00    	add    eax,0xd080
    3004:	66 83 c0 04          	add    eax,0x4
    3008:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    300d:	66 e8 65 02 00 00    	call   3278 <_strlen>
    3013:	66 89 c3             	mov    ebx,eax
    3016:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
    301b:	67 66 8d 70 05       	lea    esi,[eax+0x5]
    3020:	66 8b 0e 00 a2       	mov    ecx,DWORD PTR ds:0xa200
    3025:	67 66 8b 55 f0       	mov    edx,DWORD PTR [ebp-0x10]
    302a:	66 89 d0             	mov    eax,edx
    302d:	66 c1 e0 03          	shl    eax,0x3
    3031:	66 01 d0             	add    eax,edx
    3034:	66 01 c0             	add    eax,eax
    3037:	66 01 d0             	add    eax,edx
    303a:	66 c1 e0 04          	shl    eax,0x4
    303e:	66 83 c0 30          	add    eax,0x30
    3042:	66 05 80 d0 00 00    	add    eax,0xd080
    3048:	66 83 c0 04          	add    eax,0x4
    304c:	67 66 c7 44 24 10 0d 	mov    DWORD PTR [esp+0x10],0xd
    3053:	00 00 00 
    3056:	67 66 89 5c 24 0c    	mov    DWORD PTR [esp+0xc],ebx
    305c:	67 66 89 74 24 08    	mov    DWORD PTR [esp+0x8],esi
    3062:	67 66 89 4c 24 04    	mov    DWORD PTR [esp+0x4],ecx
    3068:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    306d:	66 e8 82 e9 ff ff    	call   19f5 <_printSentence>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:159
			printSentence(status[processTable[i].status], line++, begin + 23, strlen(status[processTable[i].status]), purple);
    3073:	67 66 8b 55 f0       	mov    edx,DWORD PTR [ebp-0x10]
    3078:	66 89 d0             	mov    eax,edx
    307b:	66 c1 e0 03          	shl    eax,0x3
    307f:	66 01 d0             	add    eax,edx
    3082:	66 01 c0             	add    eax,eax
    3085:	66 01 d0             	add    eax,edx
    3088:	66 c1 e0 04          	shl    eax,0x4
    308c:	66 05 ac d1 00 00    	add    eax,0xd1ac
    3092:	67 66 8b 10          	mov    edx,DWORD PTR [eax]
    3096:	67 66 8d 4d ac       	lea    ecx,[ebp-0x54]
    309b:	66 89 d0             	mov    eax,edx
    309e:	66 c1 e0 02          	shl    eax,0x2
    30a2:	66 01 d0             	add    eax,edx
    30a5:	66 01 c0             	add    eax,eax
    30a8:	66 01 c8             	add    eax,ecx
    30ab:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    30b0:	66 e8 c2 01 00 00    	call   3278 <_strlen>
    30b6:	66 89 c3             	mov    ebx,eax
    30b9:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
    30be:	67 66 8d 70 17       	lea    esi,[eax+0x17]
    30c3:	66 8b 0e 00 a2       	mov    ecx,DWORD PTR ds:0xa200
    30c8:	67 66 8d 41 01       	lea    eax,[ecx+0x1]
    30cd:	66 a3 00 a2          	mov    ds:0xa200,eax
    30d1:	67 66 8b 55 f0       	mov    edx,DWORD PTR [ebp-0x10]
    30d6:	66 89 d0             	mov    eax,edx
    30d9:	66 c1 e0 03          	shl    eax,0x3
    30dd:	66 01 d0             	add    eax,edx
    30e0:	66 01 c0             	add    eax,eax
    30e3:	66 01 d0             	add    eax,edx
    30e6:	66 c1 e0 04          	shl    eax,0x4
    30ea:	66 05 ac d1 00 00    	add    eax,0xd1ac
    30f0:	67 66 8b 10          	mov    edx,DWORD PTR [eax]
    30f4:	67 66 8d 7d ac       	lea    edi,[ebp-0x54]
    30f9:	66 89 d0             	mov    eax,edx
    30fc:	66 c1 e0 02          	shl    eax,0x2
    3100:	66 01 d0             	add    eax,edx
    3103:	66 01 c0             	add    eax,eax
    3106:	66 01 f8             	add    eax,edi
    3109:	67 66 c7 44 24 10 0d 	mov    DWORD PTR [esp+0x10],0xd
    3110:	00 00 00 
    3113:	67 66 89 5c 24 0c    	mov    DWORD PTR [esp+0xc],ebx
    3119:	67 66 89 74 24 08    	mov    DWORD PTR [esp+0x8],esi
    311f:	67 66 89 4c 24 04    	mov    DWORD PTR [esp+0x4],ecx
    3125:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    312a:	66 e8 c5 e8 ff ff    	call   19f5 <_printSentence>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:152
	for (int i = 0; i < Len; ++i)
    3130:	67 66 ff 45 f0       	inc    DWORD PTR [ebp-0x10]
    3135:	67 66 83 7d f0 13    	cmp    DWORD PTR [ebp-0x10],0x13
    313b:	0f 8e c7 fd          	jle    2f06 <_ps+0x9c>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:162
		}
	}
}
    313f:	90                   	nop
    3140:	66 83 c4 7c          	add    esp,0x7c
    3144:	66 5b                	pop    ebx
    3146:	66 5e                	pop    esi
    3148:	66 5f                	pop    edi
    314a:	66 5d                	pop    ebp
    314c:	66 c3                	ret    

0000314e <_kill>:
kill():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:165

void kill(int id)
{
    314e:	66 55                	push   ebp
    3150:	66 89 e5             	mov    ebp,esp
    3153:	66 83 ec 08          	sub    esp,0x8
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:166
	if (id != 0) {
    3157:	67 66 83 7d 08 00    	cmp    DWORD PTR [ebp+0x8],0x0
    315d:	0f 84 dd 00          	je     323e <_kill+0xf0>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:167
		--ProcessSize;
    3161:	66 a1 fc a6          	mov    eax,ds:0xa6fc
    3165:	66 48                	dec    eax
    3167:	66 a3 fc a6          	mov    ds:0xa6fc,eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:168
		processTable[id].status = exit;
    316b:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    3170:	66 89 d0             	mov    eax,edx
    3173:	66 c1 e0 03          	shl    eax,0x3
    3177:	66 01 d0             	add    eax,edx
    317a:	66 01 c0             	add    eax,eax
    317d:	66 01 d0             	add    eax,edx
    3180:	66 c1 e0 04          	shl    eax,0x4
    3184:	66 05 ac d1 00 00    	add    eax,0xd1ac
    318a:	67 66 c7 00 05 00 00 	mov    DWORD PTR [eax],0x5
    3191:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:169
		processTable[id].id = -1;
    3192:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    3197:	66 89 d0             	mov    eax,edx
    319a:	66 c1 e0 03          	shl    eax,0x3
    319e:	66 01 d0             	add    eax,edx
    31a1:	66 01 c0             	add    eax,eax
    31a4:	66 01 d0             	add    eax,edx
    31a7:	66 c1 e0 04          	shl    eax,0x4
    31ab:	66 05 a4 d0 00 00    	add    eax,0xd0a4
    31b1:	67 66 c7 00 ff ff ff 	mov    DWORD PTR [eax],0xffffffff
    31b8:	ff 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:170
		release(memoryTable[processTable[id].blockNum].beginAddr, memoryTable[processTable[id].blockNum].endAddr);
    31b9:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    31be:	66 89 d0             	mov    eax,edx
    31c1:	66 c1 e0 03          	shl    eax,0x3
    31c5:	66 01 d0             	add    eax,edx
    31c8:	66 01 c0             	add    eax,eax
    31cb:	66 01 d0             	add    eax,edx
    31ce:	66 c1 e0 04          	shl    eax,0x4
    31d2:	66 05 a8 d0 00 00    	add    eax,0xd0a8
    31d8:	67 66 8b 10          	mov    edx,DWORD PTR [eax]
    31dc:	66 89 d0             	mov    eax,edx
    31df:	66 01 c0             	add    eax,eax
    31e2:	66 01 d0             	add    eax,edx
    31e5:	66 c1 e0 03          	shl    eax,0x3
    31e9:	66 05 e4 a2 00 00    	add    eax,0xa2e4
    31ef:	67 66 8b 08          	mov    ecx,DWORD PTR [eax]
    31f3:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    31f8:	66 89 d0             	mov    eax,edx
    31fb:	66 c1 e0 03          	shl    eax,0x3
    31ff:	66 01 d0             	add    eax,edx
    3202:	66 01 c0             	add    eax,eax
    3205:	66 01 d0             	add    eax,edx
    3208:	66 c1 e0 04          	shl    eax,0x4
    320c:	66 05 a8 d0 00 00    	add    eax,0xd0a8
    3212:	67 66 8b 10          	mov    edx,DWORD PTR [eax]
    3216:	66 89 d0             	mov    eax,edx
    3219:	66 01 c0             	add    eax,eax
    321c:	66 01 d0             	add    eax,edx
    321f:	66 c1 e0 03          	shl    eax,0x3
    3223:	66 05 e0 a2 00 00    	add    eax,0xa2e0
    3229:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    322d:	67 66 89 4c 24 04    	mov    DWORD PTR [esp+0x4],ecx
    3233:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    3238:	66 e8 ab 3a 00 00    	call   6ce9 <_release>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:172
	}
}
    323e:	90                   	nop
    323f:	66 c9                	leave  
    3241:	66 c3                	ret    

00003243 <_initial>:
initial():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:175

void initial()
{
    3243:	66 55                	push   ebp
    3245:	66 89 e5             	mov    ebp,esp
    3248:	66 83 ec 04          	sub    esp,0x4
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:176
	initialFile();
    324c:	66 e8 97 06 00 00    	call   38e9 <_initialFile>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:177
	initialScreen(1);
    3252:	67 66 c7 04 24 01 00 	mov    DWORD PTR [esp],0x1
    3259:	00 00 
    325b:	66 e8 5a f5 ff ff    	call   27bb <_initialScreen>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:178
	initialProcessTable();
    3261:	66 e8 59 16 00 00    	call   48c0 <_initialProcessTable>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:179
	initialMemoryTable();
    3267:	66 e8 23 2d 00 00    	call   5f90 <_initialMemoryTable>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:180
	initSemaphore();
    326d:	66 e8 92 3e 00 00    	call   7105 <_initSemaphore>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:181
}
    3273:	90                   	nop
    3274:	66 c9                	leave  
    3276:	66 c3                	ret    

00003278 <_strlen>:
strlen():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:188


//////////// string /////////////////
// ×¢Òâ×Ö·û´®ÒªÓÐ'0'½áÎ²¡£
int strlen(char * sen)
{
    3278:	66 55                	push   ebp
    327a:	66 89 e5             	mov    ebp,esp
    327d:	66 83 ec 04          	sub    esp,0x4
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:189
	int i = 0;
    3281:	67 66 c7 45 fc 00 00 	mov    DWORD PTR [ebp-0x4],0x0
    3288:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:190
	while (sen[i]) { ++i; }
    328a:	eb 05                	jmp    3291 <_strlen+0x19>
    328c:	67 66 ff 45 fc       	inc    DWORD PTR [ebp-0x4]
    3291:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    3296:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    329b:	66 01 d0             	add    eax,edx
    329e:	67 8a 00             	mov    al,BYTE PTR [eax]
    32a1:	84 c0                	test   al,al
    32a3:	75 e7                	jne    328c <_strlen+0x14>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:191
	return i;
    32a5:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:192
}
    32aa:	66 c9                	leave  
    32ac:	66 c3                	ret    

000032ae <_concate>:
concate():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:196


void concate(char * sour, char * append)
{
    32ae:	66 55                	push   ebp
    32b0:	66 89 e5             	mov    ebp,esp
    32b3:	66 83 ec 10          	sub    esp,0x10
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:197
	int lenOfAppend = strlen(append);
    32b7:	67 66 8b 45 0c       	mov    eax,DWORD PTR [ebp+0xc]
    32bc:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    32c1:	66 e8 b1 ff ff ff    	call   3278 <_strlen>
    32c7:	67 66 89 45 f8       	mov    DWORD PTR [ebp-0x8],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:198
	int lenOfSour = strlen(sour);
    32cc:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    32d1:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    32d6:	66 e8 9c ff ff ff    	call   3278 <_strlen>
    32dc:	67 66 89 45 f4       	mov    DWORD PTR [ebp-0xc],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:199
	for (int i = 0; i < lenOfAppend; ++i)
    32e1:	67 66 c7 45 fc 00 00 	mov    DWORD PTR [ebp-0x4],0x0
    32e8:	00 00 
    32ea:	eb 30                	jmp    331c <_concate+0x6e>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:201
	{
		sour[i + lenOfSour] = append[i];
    32ec:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    32f1:	67 66 8b 45 f4       	mov    eax,DWORD PTR [ebp-0xc]
    32f6:	66 01 d0             	add    eax,edx
    32f9:	66 89 c2             	mov    edx,eax
    32fc:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    3301:	66 01 c2             	add    edx,eax
    3304:	67 66 8b 4d fc       	mov    ecx,DWORD PTR [ebp-0x4]
    3309:	67 66 8b 45 0c       	mov    eax,DWORD PTR [ebp+0xc]
    330e:	66 01 c8             	add    eax,ecx
    3311:	67 8a 00             	mov    al,BYTE PTR [eax]
    3314:	67 88 02             	mov    BYTE PTR [edx],al
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:199
	for (int i = 0; i < lenOfAppend; ++i)
    3317:	67 66 ff 45 fc       	inc    DWORD PTR [ebp-0x4]
    331c:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
    3321:	67 66 3b 45 f8       	cmp    eax,DWORD PTR [ebp-0x8]
    3326:	7c c4                	jl     32ec <_concate+0x3e>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:203
	}
	sour[lenOfAppend + lenOfSour] = '\0';
    3328:	67 66 8b 55 f8       	mov    edx,DWORD PTR [ebp-0x8]
    332d:	67 66 8b 45 f4       	mov    eax,DWORD PTR [ebp-0xc]
    3332:	66 01 d0             	add    eax,edx
    3335:	66 89 c2             	mov    edx,eax
    3338:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    333d:	66 01 d0             	add    eax,edx
    3340:	67 c6 00 00          	mov    BYTE PTR [eax],0x0
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:204
}
    3344:	90                   	nop
    3345:	66 c9                	leave  
    3347:	66 c3                	ret    

00003349 <_strcmp>:
strcmp():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:207

int strcmp(char * l, char * r)
{
    3349:	66 55                	push   ebp
    334b:	66 89 e5             	mov    ebp,esp
    334e:	66 83 ec 08          	sub    esp,0x8
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:208
	int i = 0, j = 0;
    3352:	67 66 c7 45 fc 00 00 	mov    DWORD PTR [ebp-0x4],0x0
    3359:	00 00 
    335b:	67 66 c7 45 f8 00 00 	mov    DWORD PTR [ebp-0x8],0x0
    3362:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:209
	for (; l[i] && r[i]; ++i, ++j)
    3364:	eb 64                	jmp    33ca <_strcmp+0x81>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:211
	{
		if (l[i] < r[j]) {
    3366:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    336b:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    3370:	66 01 d0             	add    eax,edx
    3373:	67 8a 10             	mov    dl,BYTE PTR [eax]
    3376:	67 66 8b 4d f8       	mov    ecx,DWORD PTR [ebp-0x8]
    337b:	67 66 8b 45 0c       	mov    eax,DWORD PTR [ebp+0xc]
    3380:	66 01 c8             	add    eax,ecx
    3383:	67 8a 00             	mov    al,BYTE PTR [eax]
    3386:	38 c2                	cmp    dl,al
    3388:	7d 09                	jge    3393 <_strcmp+0x4a>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:212
			return -1;
    338a:	66 b8 ff ff ff ff    	mov    eax,0xffffffff
    3390:	e9 c7 00             	jmp    345a <_strcmp+0x111>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:213
		} else if (l[i] > r[j]) {
    3393:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    3398:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    339d:	66 01 d0             	add    eax,edx
    33a0:	67 8a 10             	mov    dl,BYTE PTR [eax]
    33a3:	67 66 8b 4d f8       	mov    ecx,DWORD PTR [ebp-0x8]
    33a8:	67 66 8b 45 0c       	mov    eax,DWORD PTR [ebp+0xc]
    33ad:	66 01 c8             	add    eax,ecx
    33b0:	67 8a 00             	mov    al,BYTE PTR [eax]
    33b3:	38 c2                	cmp    dl,al
    33b5:	7e 09                	jle    33c0 <_strcmp+0x77>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:214
			return 1;
    33b7:	66 b8 01 00 00 00    	mov    eax,0x1
    33bd:	e9 9a 00             	jmp    345a <_strcmp+0x111>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:209
	for (; l[i] && r[i]; ++i, ++j)
    33c0:	67 66 ff 45 fc       	inc    DWORD PTR [ebp-0x4]
    33c5:	67 66 ff 45 f8       	inc    DWORD PTR [ebp-0x8]
    33ca:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    33cf:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    33d4:	66 01 d0             	add    eax,edx
    33d7:	67 8a 00             	mov    al,BYTE PTR [eax]
    33da:	84 c0                	test   al,al
    33dc:	74 16                	je     33f4 <_strcmp+0xab>
    33de:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    33e3:	67 66 8b 45 0c       	mov    eax,DWORD PTR [ebp+0xc]
    33e8:	66 01 d0             	add    eax,edx
    33eb:	67 8a 00             	mov    al,BYTE PTR [eax]
    33ee:	84 c0                	test   al,al
    33f0:	0f 85 72 ff          	jne    3366 <_strcmp+0x1d>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:217
		}
	}
	if (!l[i] && r[j]) {
    33f4:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    33f9:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    33fe:	66 01 d0             	add    eax,edx
    3401:	67 8a 00             	mov    al,BYTE PTR [eax]
    3404:	84 c0                	test   al,al
    3406:	75 1c                	jne    3424 <_strcmp+0xdb>
    3408:	67 66 8b 55 f8       	mov    edx,DWORD PTR [ebp-0x8]
    340d:	67 66 8b 45 0c       	mov    eax,DWORD PTR [ebp+0xc]
    3412:	66 01 d0             	add    eax,edx
    3415:	67 8a 00             	mov    al,BYTE PTR [eax]
    3418:	84 c0                	test   al,al
    341a:	74 08                	je     3424 <_strcmp+0xdb>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:218
		return -1;
    341c:	66 b8 ff ff ff ff    	mov    eax,0xffffffff
    3422:	eb 36                	jmp    345a <_strcmp+0x111>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:219
	} else if (l[i] && !r[j]) {
    3424:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    3429:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    342e:	66 01 d0             	add    eax,edx
    3431:	67 8a 00             	mov    al,BYTE PTR [eax]
    3434:	84 c0                	test   al,al
    3436:	74 1c                	je     3454 <_strcmp+0x10b>
    3438:	67 66 8b 55 f8       	mov    edx,DWORD PTR [ebp-0x8]
    343d:	67 66 8b 45 0c       	mov    eax,DWORD PTR [ebp+0xc]
    3442:	66 01 d0             	add    eax,edx
    3445:	67 8a 00             	mov    al,BYTE PTR [eax]
    3448:	84 c0                	test   al,al
    344a:	75 08                	jne    3454 <_strcmp+0x10b>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:220
		return 1;
    344c:	66 b8 01 00 00 00    	mov    eax,0x1
    3452:	eb 06                	jmp    345a <_strcmp+0x111>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:222
	} else {
		return 0;
    3454:	66 b8 00 00 00 00    	mov    eax,0x0
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:224
	}
}
    345a:	66 c9                	leave  
    345c:	66 c3                	ret    

0000345e <_strncpy>:
strncpy():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:227

void strncpy(char * sour, char * des, int len)
{
    345e:	66 55                	push   ebp
    3460:	66 89 e5             	mov    ebp,esp
    3463:	66 83 ec 04          	sub    esp,0x4
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:228
	int i = 0;
    3467:	67 66 c7 45 fc 00 00 	mov    DWORD PTR [ebp-0x4],0x0
    346e:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:229
	while (sour[i] && i < len) {
    3470:	eb 25                	jmp    3497 <_strncpy+0x39>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:230
		des[i] = sour[i];
    3472:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    3477:	67 66 8b 45 0c       	mov    eax,DWORD PTR [ebp+0xc]
    347c:	66 01 c2             	add    edx,eax
    347f:	67 66 8b 4d fc       	mov    ecx,DWORD PTR [ebp-0x4]
    3484:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    3489:	66 01 c8             	add    eax,ecx
    348c:	67 8a 00             	mov    al,BYTE PTR [eax]
    348f:	67 88 02             	mov    BYTE PTR [edx],al
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:231
		++i;
    3492:	67 66 ff 45 fc       	inc    DWORD PTR [ebp-0x4]
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:229
	while (sour[i] && i < len) {
    3497:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    349c:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    34a1:	66 01 d0             	add    eax,edx
    34a4:	67 8a 00             	mov    al,BYTE PTR [eax]
    34a7:	84 c0                	test   al,al
    34a9:	74 0c                	je     34b7 <_strncpy+0x59>
    34ab:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
    34b0:	67 66 3b 45 10       	cmp    eax,DWORD PTR [ebp+0x10]
    34b5:	7c bb                	jl     3472 <_strncpy+0x14>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:233
	}
	des[i] = '\0';
    34b7:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    34bc:	67 66 8b 45 0c       	mov    eax,DWORD PTR [ebp+0xc]
    34c1:	66 01 d0             	add    eax,edx
    34c4:	67 c6 00 00          	mov    BYTE PTR [eax],0x0
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:234
}
    34c8:	90                   	nop
    34c9:	66 c9                	leave  
    34cb:	66 c3                	ret    

000034cd <_int2str>:
int2str():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:237

void int2str(int org, char * str)
{
    34cd:	66 55                	push   ebp
    34cf:	66 89 e5             	mov    ebp,esp
    34d2:	66 53                	push   ebx
    34d4:	66 83 ec 0c          	sub    esp,0xc
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:238
	int num = 0;
    34d8:	67 66 c7 45 f8 00 00 	mov    DWORD PTR [ebp-0x8],0x0
    34df:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:239
	int cp = org;
    34e1:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    34e6:	67 66 89 45 f4       	mov    DWORD PTR [ebp-0xc],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:240
	while (cp != 0)
    34eb:	eb 29                	jmp    3516 <_int2str+0x49>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:242
	{
		cp /= 10;
    34ed:	67 66 8b 4d f4       	mov    ecx,DWORD PTR [ebp-0xc]
    34f2:	66 b8 67 66 66 66    	mov    eax,0x66666667
    34f8:	66 f7 e9             	imul   ecx
    34fb:	66 c1 fa 02          	sar    edx,0x2
    34ff:	66 89 c8             	mov    eax,ecx
    3502:	66 c1 f8 1f          	sar    eax,0x1f
    3506:	66 29 c2             	sub    edx,eax
    3509:	66 89 d0             	mov    eax,edx
    350c:	67 66 89 45 f4       	mov    DWORD PTR [ebp-0xc],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:243
		++num;
    3511:	67 66 ff 45 f8       	inc    DWORD PTR [ebp-0x8]
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:240
	while (cp != 0)
    3516:	67 66 83 7d f4 00    	cmp    DWORD PTR [ebp-0xc],0x0
    351c:	75 cf                	jne    34ed <_int2str+0x20>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:245
	}
	if (org == 0)
    351e:	67 66 83 7d 08 00    	cmp    DWORD PTR [ebp+0x8],0x0
    3524:	75 09                	jne    352f <_int2str+0x62>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:246
		num = 1;
    3526:	67 66 c7 45 f8 01 00 	mov    DWORD PTR [ebp-0x8],0x1
    352d:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:247
	str[num--] = '\0';
    352f:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
    3534:	67 66 8d 50 ff       	lea    edx,[eax-0x1]
    3539:	67 66 89 55 f8       	mov    DWORD PTR [ebp-0x8],edx
    353e:	66 89 c2             	mov    edx,eax
    3541:	67 66 8b 45 0c       	mov    eax,DWORD PTR [ebp+0xc]
    3546:	66 01 d0             	add    eax,edx
    3549:	67 c6 00 00          	mov    BYTE PTR [eax],0x0
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:248
	for (int i = num; i >= 0; --i)
    354d:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
    3552:	67 66 89 45 f0       	mov    DWORD PTR [ebp-0x10],eax
    3557:	eb 70                	jmp    35c9 <_int2str+0xfc>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:250
	{
		str[i] = org % 10 + 48;
    3559:	67 66 8b 55 f0       	mov    edx,DWORD PTR [ebp-0x10]
    355e:	67 66 8b 45 0c       	mov    eax,DWORD PTR [ebp+0xc]
    3563:	67 66 8d 1c 02       	lea    ebx,[edx+eax*1]
    3568:	67 66 8b 4d 08       	mov    ecx,DWORD PTR [ebp+0x8]
    356d:	66 b8 67 66 66 66    	mov    eax,0x66666667
    3573:	66 f7 e9             	imul   ecx
    3576:	66 c1 fa 02          	sar    edx,0x2
    357a:	66 89 c8             	mov    eax,ecx
    357d:	66 c1 f8 1f          	sar    eax,0x1f
    3581:	66 29 c2             	sub    edx,eax
    3584:	66 89 d0             	mov    eax,edx
    3587:	66 c1 e0 02          	shl    eax,0x2
    358b:	66 01 d0             	add    eax,edx
    358e:	66 01 c0             	add    eax,eax
    3591:	66 29 c1             	sub    ecx,eax
    3594:	66 89 ca             	mov    edx,ecx
    3597:	88 d0                	mov    al,dl
    3599:	66 83 c0 30          	add    eax,0x30
    359d:	67 88 03             	mov    BYTE PTR [ebx],al
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:251
		org /= 10;
    35a0:	67 66 8b 4d 08       	mov    ecx,DWORD PTR [ebp+0x8]
    35a5:	66 b8 67 66 66 66    	mov    eax,0x66666667
    35ab:	66 f7 e9             	imul   ecx
    35ae:	66 c1 fa 02          	sar    edx,0x2
    35b2:	66 89 c8             	mov    eax,ecx
    35b5:	66 c1 f8 1f          	sar    eax,0x1f
    35b9:	66 29 c2             	sub    edx,eax
    35bc:	66 89 d0             	mov    eax,edx
    35bf:	67 66 89 45 08       	mov    DWORD PTR [ebp+0x8],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:248
	for (int i = num; i >= 0; --i)
    35c4:	67 66 ff 4d f0       	dec    DWORD PTR [ebp-0x10]
    35c9:	67 66 83 7d f0 00    	cmp    DWORD PTR [ebp-0x10],0x0
    35cf:	79 88                	jns    3559 <_int2str+0x8c>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:253
	}
}
    35d1:	90                   	nop
    35d2:	66 83 c4 0c          	add    esp,0xc
    35d6:	66 5b                	pop    ebx
    35d8:	66 5d                	pop    ebp
    35da:	66 c3                	ret    

000035dc <_hashfun>:
hashfun():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:262

////////////// File ////////////////



int hashfun(char * key) {
    35dc:	66 55                	push   ebp
    35de:	66 89 e5             	mov    ebp,esp
    35e1:	66 83 ec 0c          	sub    esp,0xc
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:263
	int weight = 29;
    35e5:	67 66 c7 45 f4 1d 00 	mov    DWORD PTR [ebp-0xc],0x1d
    35ec:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:264
	int i = 0;
    35ee:	67 66 c7 45 fc 00 00 	mov    DWORD PTR [ebp-0x4],0x0
    35f5:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:265
	int ret = 0;
    35f7:	67 66 c7 45 f8 00 00 	mov    DWORD PTR [ebp-0x8],0x0
    35fe:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:266
	while (key[i]) {
    3600:	eb 3a                	jmp    363c <_hashfun+0x60>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:267
		ret = (ret + key[i] * weight) % Len;
    3602:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    3607:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    360c:	66 01 d0             	add    eax,edx
    360f:	67 8a 00             	mov    al,BYTE PTR [eax]
    3612:	66 0f be c0          	movsx  eax,al
    3616:	67 66 0f af 45 f4    	imul   eax,DWORD PTR [ebp-0xc]
    361c:	66 89 c2             	mov    edx,eax
    361f:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
    3624:	66 01 d0             	add    eax,edx
    3627:	66 b9 14 00 00 00    	mov    ecx,0x14
    362d:	66 99                	cdq    
    362f:	66 f7 f9             	idiv   ecx
    3632:	67 66 89 55 f8       	mov    DWORD PTR [ebp-0x8],edx
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:268
		++i;
    3637:	67 66 ff 45 fc       	inc    DWORD PTR [ebp-0x4]
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:266
	while (key[i]) {
    363c:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    3641:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    3646:	66 01 d0             	add    eax,edx
    3649:	67 8a 00             	mov    al,BYTE PTR [eax]
    364c:	84 c0                	test   al,al
    364e:	75 b2                	jne    3602 <_hashfun+0x26>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:270
	}
	return ret;
    3650:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:271
}
    3655:	66 c9                	leave  
    3657:	66 c3                	ret    

00003659 <_hash>:
hash():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:274

int hash(char * key, struct info record)
{
    3659:	66 55                	push   ebp
    365b:	66 89 e5             	mov    ebp,esp
    365e:	66 83 ec 18          	sub    esp,0x18
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:275
	int inicode = hashfun(key);
    3662:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    3667:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    366c:	66 e8 6a ff ff ff    	call   35dc <_hashfun>
    3672:	67 66 89 45 f4       	mov    DWORD PTR [ebp-0xc],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:276
	int code = inicode, i = 1;
    3677:	67 66 8b 45 f4       	mov    eax,DWORD PTR [ebp-0xc]
    367c:	67 66 89 45 fc       	mov    DWORD PTR [ebp-0x4],eax
    3681:	67 66 c7 45 f8 01 00 	mov    DWORD PTR [ebp-0x8],0x1
    3688:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:277
	while (information[code].type != null) {
    368a:	eb 2b                	jmp    36b7 <_hash+0x5e>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:278
		code = (inicode + i * i) % Len;
    368c:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
    3691:	67 66 0f af 45 f8    	imul   eax,DWORD PTR [ebp-0x8]
    3697:	66 89 c2             	mov    edx,eax
    369a:	67 66 8b 45 f4       	mov    eax,DWORD PTR [ebp-0xc]
    369f:	66 01 d0             	add    eax,edx
    36a2:	66 b9 14 00 00 00    	mov    ecx,0x14
    36a8:	66 99                	cdq    
    36aa:	66 f7 f9             	idiv   ecx
    36ad:	67 66 89 55 fc       	mov    DWORD PTR [ebp-0x4],edx
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:279
		++i;
    36b2:	67 66 ff 45 f8       	inc    DWORD PTR [ebp-0x8]
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:277
	while (information[code].type != null) {
    36b7:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    36bc:	66 89 d0             	mov    eax,edx
    36bf:	66 01 c0             	add    eax,eax
    36c2:	66 01 d0             	add    eax,edx
    36c5:	66 c1 e0 02          	shl    eax,0x2
    36c9:	66 01 d0             	add    eax,edx
    36cc:	66 c1 e0 02          	shl    eax,0x2
    36d0:	66 01 d0             	add    eax,edx
    36d3:	66 c1 e0 02          	shl    eax,0x2
    36d7:	66 05 a0 bf 00 00    	add    eax,0xbfa0
    36dd:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    36e1:	66 85 c0             	test   eax,eax
    36e4:	75 a6                	jne    368c <_hash+0x33>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:283
	}


	information[code].type = record.type;
    36e6:	67 66 8b 4d 2c       	mov    ecx,DWORD PTR [ebp+0x2c]
    36eb:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    36f0:	66 89 d0             	mov    eax,edx
    36f3:	66 01 c0             	add    eax,eax
    36f6:	66 01 d0             	add    eax,edx
    36f9:	66 c1 e0 02          	shl    eax,0x2
    36fd:	66 01 d0             	add    eax,edx
    3700:	66 c1 e0 02          	shl    eax,0x2
    3704:	66 01 d0             	add    eax,edx
    3707:	66 c1 e0 02          	shl    eax,0x2
    370b:	66 05 a0 bf 00 00    	add    eax,0xbfa0
    3711:	67 66 89 08          	mov    DWORD PTR [eax],ecx
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:284
	strncpy(record.name, information[code].name, strlen(record.name));
    3715:	67 66 8d 45 0c       	lea    eax,[ebp+0xc]
    371a:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    371f:	66 e8 53 fb ff ff    	call   3278 <_strlen>
    3725:	66 89 c1             	mov    ecx,eax
    3728:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    372d:	66 89 d0             	mov    eax,edx
    3730:	66 01 c0             	add    eax,eax
    3733:	66 01 d0             	add    eax,edx
    3736:	66 c1 e0 02          	shl    eax,0x2
    373a:	66 01 d0             	add    eax,edx
    373d:	66 c1 e0 02          	shl    eax,0x2
    3741:	66 01 d0             	add    eax,edx
    3744:	66 c1 e0 02          	shl    eax,0x2
    3748:	66 05 80 bf 00 00    	add    eax,0xbf80
    374e:	67 66 89 4c 24 08    	mov    DWORD PTR [esp+0x8],ecx
    3754:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    375a:	67 66 8d 45 0c       	lea    eax,[ebp+0xc]
    375f:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    3764:	66 e8 f4 fc ff ff    	call   345e <_strncpy>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:285
	information[code].size = record.size;
    376a:	67 66 8b 4d 34       	mov    ecx,DWORD PTR [ebp+0x34]
    376f:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    3774:	66 89 d0             	mov    eax,edx
    3777:	66 01 c0             	add    eax,eax
    377a:	66 01 d0             	add    eax,edx
    377d:	66 c1 e0 02          	shl    eax,0x2
    3781:	66 01 d0             	add    eax,edx
    3784:	66 c1 e0 02          	shl    eax,0x2
    3788:	66 01 d0             	add    eax,edx
    378b:	66 c1 e0 02          	shl    eax,0x2
    378f:	66 05 a8 bf 00 00    	add    eax,0xbfa8
    3795:	67 66 89 08          	mov    DWORD PTR [eax],ecx
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:286
	information[code].lmaddress = record.lmaddress;
    3799:	67 66 8b 4d 30       	mov    ecx,DWORD PTR [ebp+0x30]
    379e:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    37a3:	66 89 d0             	mov    eax,edx
    37a6:	66 01 c0             	add    eax,eax
    37a9:	66 01 d0             	add    eax,edx
    37ac:	66 c1 e0 02          	shl    eax,0x2
    37b0:	66 01 d0             	add    eax,edx
    37b3:	66 c1 e0 02          	shl    eax,0x2
    37b7:	66 01 d0             	add    eax,edx
    37ba:	66 c1 e0 02          	shl    eax,0x2
    37be:	66 05 a4 bf 00 00    	add    eax,0xbfa4
    37c4:	67 66 89 08          	mov    DWORD PTR [eax],ecx
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:287
	information[code].deleted = record.deleted;
    37c8:	67 66 8b 4d 38       	mov    ecx,DWORD PTR [ebp+0x38]
    37cd:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    37d2:	66 89 d0             	mov    eax,edx
    37d5:	66 01 c0             	add    eax,eax
    37d8:	66 01 d0             	add    eax,edx
    37db:	66 c1 e0 02          	shl    eax,0x2
    37df:	66 01 d0             	add    eax,edx
    37e2:	66 c1 e0 02          	shl    eax,0x2
    37e6:	66 01 d0             	add    eax,edx
    37e9:	66 c1 e0 02          	shl    eax,0x2
    37ed:	66 05 ac bf 00 00    	add    eax,0xbfac
    37f3:	67 66 89 08          	mov    DWORD PTR [eax],ecx
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:288
	return code;
    37f7:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:289
}
    37fc:	66 c9                	leave  
    37fe:	66 c3                	ret    

00003800 <_find>:
find():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:292

int find(char * key)
{
    3800:	66 55                	push   ebp
    3802:	66 89 e5             	mov    ebp,esp
    3805:	66 83 ec 14          	sub    esp,0x14
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:293
	int inicode = hashfun(key);
    3809:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    380e:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    3813:	66 e8 c3 fd ff ff    	call   35dc <_hashfun>
    3819:	67 66 89 45 f4       	mov    DWORD PTR [ebp-0xc],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:294
	int code = inicode, i = 1;
    381e:	67 66 8b 45 f4       	mov    eax,DWORD PTR [ebp-0xc]
    3823:	67 66 89 45 fc       	mov    DWORD PTR [ebp-0x4],eax
    3828:	67 66 c7 45 f8 01 00 	mov    DWORD PTR [ebp-0x8],0x1
    382f:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:295
	while (information[code].type == null || strcmp(key, information[code].name) != 0) {
    3831:	eb 3b                	jmp    386e <_find+0x6e>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:296
		code = (inicode + i * i) % Len;
    3833:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
    3838:	67 66 0f af 45 f8    	imul   eax,DWORD PTR [ebp-0x8]
    383e:	66 89 c2             	mov    edx,eax
    3841:	67 66 8b 45 f4       	mov    eax,DWORD PTR [ebp-0xc]
    3846:	66 01 d0             	add    eax,edx
    3849:	66 b9 14 00 00 00    	mov    ecx,0x14
    384f:	66 99                	cdq    
    3851:	66 f7 f9             	idiv   ecx
    3854:	67 66 89 55 fc       	mov    DWORD PTR [ebp-0x4],edx
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:297
		++i;
    3859:	67 66 ff 45 f8       	inc    DWORD PTR [ebp-0x8]
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:298
		if (i > Len)
    385e:	67 66 83 7d f8 14    	cmp    DWORD PTR [ebp-0x8],0x14
    3864:	7e 08                	jle    386e <_find+0x6e>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:299
			return -1;
    3866:	66 b8 ff ff ff ff    	mov    eax,0xffffffff
    386c:	eb 77                	jmp    38e5 <_find+0xe5>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:295
	while (information[code].type == null || strcmp(key, information[code].name) != 0) {
    386e:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    3873:	66 89 d0             	mov    eax,edx
    3876:	66 01 c0             	add    eax,eax
    3879:	66 01 d0             	add    eax,edx
    387c:	66 c1 e0 02          	shl    eax,0x2
    3880:	66 01 d0             	add    eax,edx
    3883:	66 c1 e0 02          	shl    eax,0x2
    3887:	66 01 d0             	add    eax,edx
    388a:	66 c1 e0 02          	shl    eax,0x2
    388e:	66 05 a0 bf 00 00    	add    eax,0xbfa0
    3894:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    3898:	66 85 c0             	test   eax,eax
    389b:	74 96                	je     3833 <_find+0x33>
    389d:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    38a2:	66 89 d0             	mov    eax,edx
    38a5:	66 01 c0             	add    eax,eax
    38a8:	66 01 d0             	add    eax,edx
    38ab:	66 c1 e0 02          	shl    eax,0x2
    38af:	66 01 d0             	add    eax,edx
    38b2:	66 c1 e0 02          	shl    eax,0x2
    38b6:	66 01 d0             	add    eax,edx
    38b9:	66 c1 e0 02          	shl    eax,0x2
    38bd:	66 05 80 bf 00 00    	add    eax,0xbf80
    38c3:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    38c9:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    38ce:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    38d3:	66 e8 70 fa ff ff    	call   3349 <_strcmp>
    38d9:	66 85 c0             	test   eax,eax
    38dc:	0f 85 53 ff          	jne    3833 <_find+0x33>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:301
	}
	return code;
    38e0:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:302
}
    38e5:	66 c9                	leave  
    38e7:	66 c3                	ret    

000038e9 <_initialFile>:
initialFile():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:305

void initialFile()
{
    38e9:	66 55                	push   ebp
    38eb:	66 89 e5             	mov    ebp,esp
    38ee:	66 83 ec 10          	sub    esp,0x10
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:306
	FAT = (short*)getRecords(segOfOs, offsetOfFat);
    38f2:	67 66 c7 44 24 04 00 	mov    DWORD PTR [esp+0x4],0xe000
    38f9:	e0 00 00 
    38fc:	67 66 c7 04 24 00 20 	mov    DWORD PTR [esp],0x2000
    3903:	00 00 
    3905:	66 e8 dd eb ff ff    	call   24e8 <_getRecords>
    390b:	66 a3 00 a7          	mov    ds:0xa700,eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:307
	for (int i = 0; i < Len; ++i) {
    390f:	67 66 c7 45 fc 00 00 	mov    DWORD PTR [ebp-0x4],0x0
    3916:	00 00 
    3918:	eb 33                	jmp    394d <_initialFile+0x64>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:308
		information[i].type = null;
    391a:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    391f:	66 89 d0             	mov    eax,edx
    3922:	66 01 c0             	add    eax,eax
    3925:	66 01 d0             	add    eax,edx
    3928:	66 c1 e0 02          	shl    eax,0x2
    392c:	66 01 d0             	add    eax,edx
    392f:	66 c1 e0 02          	shl    eax,0x2
    3933:	66 01 d0             	add    eax,edx
    3936:	66 c1 e0 02          	shl    eax,0x2
    393a:	66 05 a0 bf 00 00    	add    eax,0xbfa0
    3940:	67 66 c7 00 00 00 00 	mov    DWORD PTR [eax],0x0
    3947:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:307
	for (int i = 0; i < Len; ++i) {
    3948:	67 66 ff 45 fc       	inc    DWORD PTR [ebp-0x4]
    394d:	67 66 83 7d fc 13    	cmp    DWORD PTR [ebp-0x4],0x13
    3953:	7e c5                	jle    391a <_initialFile+0x31>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:310
	}
	no.lmaddress = 0;
    3955:	66 c7 06 44 a7 00 00 	mov    DWORD PTR ds:0xa744,0x0
    395c:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:311
	no.size = 0;
    395e:	66 c7 06 48 a7 00 00 	mov    DWORD PTR ds:0xa748,0x0
    3965:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:312
	no.type = null;
    3967:	66 c7 06 40 a7 00 00 	mov    DWORD PTR ds:0xa740,0x0
    396e:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:313
	strncpy("", no.name, 0);
    3970:	67 66 c7 44 24 08 00 	mov    DWORD PTR [esp+0x8],0x0
    3977:	00 00 00 
    397a:	67 66 c7 44 24 04 20 	mov    DWORD PTR [esp+0x4],0xa720
    3981:	a7 00 00 
    3984:	67 66 c7 04 24 ef 80 	mov    DWORD PTR [esp],0x80ef
    398b:	00 00 
    398d:	66 e8 cb fa ff ff    	call   345e <_strncpy>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:314
	loadFiles();
    3993:	66 e8 05 00 00 00    	call   399e <_loadFiles>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:315
}
    3999:	90                   	nop
    399a:	66 c9                	leave  
    399c:	66 c3                	ret    

0000399e <_loadFiles>:
loadFiles():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:319


void loadFiles()
{
    399e:	66 55                	push   ebp
    39a0:	66 89 e5             	mov    ebp,esp
    39a3:	66 57                	push   edi
    39a5:	66 56                	push   esi
    39a7:	66 81 ec e4 01 00 00 	sub    esp,0x1e4
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:320
	char * rawRecords = getRecords(segOfOs, offsetOfRecord);
    39ae:	67 66 c7 44 24 04 00 	mov    DWORD PTR [esp+0x4],0xd000
    39b5:	d0 00 00 
    39b8:	67 66 c7 04 24 00 20 	mov    DWORD PTR [esp],0x2000
    39bf:	00 00 
    39c1:	66 e8 21 eb ff ff    	call   24e8 <_getRecords>
    39c7:	67 66 89 45 e4       	mov    DWORD PTR [ebp-0x1c],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:321
	int i = 0;
    39cc:	67 66 c7 45 f4 00 00 	mov    DWORD PTR [ebp-0xc],0x0
    39d3:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:322
	int l = 0;
    39d5:	67 66 c7 45 f0 00 00 	mov    DWORD PTR [ebp-0x10],0x0
    39dc:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:323
	int size = 0;
    39de:	67 66 c7 45 ec 00 00 	mov    DWORD PTR [ebp-0x14],0x0
    39e5:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:324
	int place = 0;
    39e7:	67 66 c7 45 e8 00 00 	mov    DWORD PTR [ebp-0x18],0x0
    39ee:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:326
	char name[30];
	enum fileType t = null;
    39f0:	67 66 c7 45 e0 00 00 	mov    DWORD PTR [ebp-0x20],0x0
    39f7:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:328
	struct info tmp;
	while (rawRecords[i] != '\n')
    39f9:	e9 2c 02             	jmp    3c28 <_loadFiles+0x28a>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:330
	{
		size = 0;
    39fc:	67 66 c7 45 ec 00 00 	mov    DWORD PTR [ebp-0x14],0x0
    3a03:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:331
		place = 0;
    3a05:	67 66 c7 45 e8 00 00 	mov    DWORD PTR [ebp-0x18],0x0
    3a0c:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:333
		// name
		++i;
    3a0e:	67 66 ff 45 f4       	inc    DWORD PTR [ebp-0xc]
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:334
		l = 0;
    3a13:	67 66 c7 45 f0 00 00 	mov    DWORD PTR [ebp-0x10],0x0
    3a1a:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:335
		while (rawRecords[i] != '|') {
    3a1c:	eb 0a                	jmp    3a28 <_loadFiles+0x8a>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:336
			++i;
    3a1e:	67 66 ff 45 f4       	inc    DWORD PTR [ebp-0xc]
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:337
			++l;
    3a23:	67 66 ff 45 f0       	inc    DWORD PTR [ebp-0x10]
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:335
		while (rawRecords[i] != '|') {
    3a28:	67 66 8b 55 f4       	mov    edx,DWORD PTR [ebp-0xc]
    3a2d:	67 66 8b 45 e4       	mov    eax,DWORD PTR [ebp-0x1c]
    3a32:	66 01 d0             	add    eax,edx
    3a35:	67 8a 00             	mov    al,BYTE PTR [eax]
    3a38:	3c 7c                	cmp    al,0x7c
    3a3a:	75 e2                	jne    3a1e <_loadFiles+0x80>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:339
		}
		++i;
    3a3c:	67 66 ff 45 f4       	inc    DWORD PTR [ebp-0xc]
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:340
		strncpy(rawRecords + i - l - 1, name, l);
    3a41:	67 66 8b 55 f4       	mov    edx,DWORD PTR [ebp-0xc]
    3a46:	67 66 8b 45 f0       	mov    eax,DWORD PTR [ebp-0x10]
    3a4b:	66 29 c2             	sub    edx,eax
    3a4e:	66 89 d0             	mov    eax,edx
    3a51:	67 66 8d 50 ff       	lea    edx,[eax-0x1]
    3a56:	67 66 8b 45 e4       	mov    eax,DWORD PTR [ebp-0x1c]
    3a5b:	66 01 c2             	add    edx,eax
    3a5e:	67 66 8b 45 f0       	mov    eax,DWORD PTR [ebp-0x10]
    3a63:	67 66 89 44 24 08    	mov    DWORD PTR [esp+0x8],eax
    3a69:	67 66 8d 45 c2       	lea    eax,[ebp-0x3e]
    3a6e:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    3a74:	67 66 89 14 24       	mov    DWORD PTR [esp],edx
    3a79:	66 e8 df f9 ff ff    	call   345e <_strncpy>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:341
		name[l] = '\0';
    3a7f:	67 66 8d 55 c2       	lea    edx,[ebp-0x3e]
    3a84:	67 66 8b 45 f0       	mov    eax,DWORD PTR [ebp-0x10]
    3a89:	66 01 d0             	add    eax,edx
    3a8c:	67 c6 00 00          	mov    BYTE PTR [eax],0x0
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:343
		// size
		while (rawRecords[i] != '|') {
    3a90:	eb 3a                	jmp    3acc <_loadFiles+0x12e>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:344
			size = size * 10 + rawRecords[i] - '0';
    3a92:	67 66 8b 55 ec       	mov    edx,DWORD PTR [ebp-0x14]
    3a97:	66 89 d0             	mov    eax,edx
    3a9a:	66 c1 e0 02          	shl    eax,0x2
    3a9e:	66 01 d0             	add    eax,edx
    3aa1:	66 01 c0             	add    eax,eax
    3aa4:	66 89 c1             	mov    ecx,eax
    3aa7:	67 66 8b 55 f4       	mov    edx,DWORD PTR [ebp-0xc]
    3aac:	67 66 8b 45 e4       	mov    eax,DWORD PTR [ebp-0x1c]
    3ab1:	66 01 d0             	add    eax,edx
    3ab4:	67 8a 00             	mov    al,BYTE PTR [eax]
    3ab7:	66 0f be c0          	movsx  eax,al
    3abb:	66 01 c8             	add    eax,ecx
    3abe:	66 83 e8 30          	sub    eax,0x30
    3ac2:	67 66 89 45 ec       	mov    DWORD PTR [ebp-0x14],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:345
			++i;
    3ac7:	67 66 ff 45 f4       	inc    DWORD PTR [ebp-0xc]
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:343
		while (rawRecords[i] != '|') {
    3acc:	67 66 8b 55 f4       	mov    edx,DWORD PTR [ebp-0xc]
    3ad1:	67 66 8b 45 e4       	mov    eax,DWORD PTR [ebp-0x1c]
    3ad6:	66 01 d0             	add    eax,edx
    3ad9:	67 8a 00             	mov    al,BYTE PTR [eax]
    3adc:	3c 7c                	cmp    al,0x7c
    3ade:	75 b2                	jne    3a92 <_loadFiles+0xf4>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:347
		}
		++i;
    3ae0:	67 66 ff 45 f4       	inc    DWORD PTR [ebp-0xc]
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:349
		// place
		while (rawRecords[i] != '|') {
    3ae5:	eb 3a                	jmp    3b21 <_loadFiles+0x183>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:350
			place = place * 10 + rawRecords[i] - '0';
    3ae7:	67 66 8b 55 e8       	mov    edx,DWORD PTR [ebp-0x18]
    3aec:	66 89 d0             	mov    eax,edx
    3aef:	66 c1 e0 02          	shl    eax,0x2
    3af3:	66 01 d0             	add    eax,edx
    3af6:	66 01 c0             	add    eax,eax
    3af9:	66 89 c1             	mov    ecx,eax
    3afc:	67 66 8b 55 f4       	mov    edx,DWORD PTR [ebp-0xc]
    3b01:	67 66 8b 45 e4       	mov    eax,DWORD PTR [ebp-0x1c]
    3b06:	66 01 d0             	add    eax,edx
    3b09:	67 8a 00             	mov    al,BYTE PTR [eax]
    3b0c:	66 0f be c0          	movsx  eax,al
    3b10:	66 01 c8             	add    eax,ecx
    3b13:	66 83 e8 30          	sub    eax,0x30
    3b17:	67 66 89 45 e8       	mov    DWORD PTR [ebp-0x18],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:351
			++i;
    3b1c:	67 66 ff 45 f4       	inc    DWORD PTR [ebp-0xc]
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:349
		while (rawRecords[i] != '|') {
    3b21:	67 66 8b 55 f4       	mov    edx,DWORD PTR [ebp-0xc]
    3b26:	67 66 8b 45 e4       	mov    eax,DWORD PTR [ebp-0x1c]
    3b2b:	66 01 d0             	add    eax,edx
    3b2e:	67 8a 00             	mov    al,BYTE PTR [eax]
    3b31:	3c 7c                	cmp    al,0x7c
    3b33:	75 b2                	jne    3ae7 <_loadFiles+0x149>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:353
		}
		++i;
    3b35:	67 66 ff 45 f4       	inc    DWORD PTR [ebp-0xc]
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:355
		//type
		t = rawRecords[i] - '0';
    3b3a:	67 66 8b 55 f4       	mov    edx,DWORD PTR [ebp-0xc]
    3b3f:	67 66 8b 45 e4       	mov    eax,DWORD PTR [ebp-0x1c]
    3b44:	66 01 d0             	add    eax,edx
    3b47:	67 8a 00             	mov    al,BYTE PTR [eax]
    3b4a:	66 0f be c0          	movsx  eax,al
    3b4e:	66 83 e8 30          	sub    eax,0x30
    3b52:	67 66 89 45 e0       	mov    DWORD PTR [ebp-0x20],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:356
		i += 3;
    3b57:	67 66 83 45 f4 03    	add    DWORD PTR [ebp-0xc],0x3
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:357
		tmp.size = size;
    3b5d:	67 66 8b 45 ec       	mov    eax,DWORD PTR [ebp-0x14]
    3b62:	67 66 89 85 14 ff ff 	mov    DWORD PTR [ebp-0xec],eax
    3b69:	ff 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:358
		tmp.type = t;
    3b6a:	67 66 8b 45 e0       	mov    eax,DWORD PTR [ebp-0x20]
    3b6f:	67 66 89 85 0c ff ff 	mov    DWORD PTR [ebp-0xf4],eax
    3b76:	ff 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:359
		tmp.lmaddress = place;
    3b77:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
    3b7c:	67 66 89 85 10 ff ff 	mov    DWORD PTR [ebp-0xf0],eax
    3b83:	ff 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:360
		tmp.deleted = 0;
    3b84:	67 66 c7 85 18 ff ff 	mov    DWORD PTR [ebp-0xe8],0x0
    3b8b:	ff 00 00 00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:361
		tmp.start = place / Cluster;
    3b90:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
    3b95:	66 85 c0             	test   eax,eax
    3b98:	79 06                	jns    3ba0 <_loadFiles+0x202>
    3b9a:	66 05 ff 01 00 00    	add    eax,0x1ff
    3ba0:	66 c1 f8 09          	sar    eax,0x9
    3ba4:	67 66 89 85 1c ff ff 	mov    DWORD PTR [ebp-0xe4],eax
    3bab:	ff 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:362
		setFAT(place, size);
    3bac:	67 66 8b 45 ec       	mov    eax,DWORD PTR [ebp-0x14]
    3bb1:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    3bb7:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
    3bbc:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    3bc1:	66 e8 87 00 00 00    	call   3c4e <_setFAT>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:363
		strncpy(name, tmp.name, strlen(name));
    3bc7:	67 66 8d 45 c2       	lea    eax,[ebp-0x3e]
    3bcc:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    3bd1:	66 e8 a1 f6 ff ff    	call   3278 <_strlen>
    3bd7:	67 66 89 44 24 08    	mov    DWORD PTR [esp+0x8],eax
    3bdd:	67 66 8d 85 ec fe ff 	lea    eax,[ebp-0x114]
    3be4:	ff 
    3be5:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    3beb:	67 66 8d 45 c2       	lea    eax,[ebp-0x3e]
    3bf0:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    3bf5:	66 e8 63 f8 ff ff    	call   345e <_strncpy>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:364
		hash(name, tmp);
    3bfb:	67 66 8d 44 24 04    	lea    eax,[esp+0x4]
    3c01:	67 66 8d 95 ec fe ff 	lea    edx,[ebp-0x114]
    3c08:	ff 
    3c09:	66 b9 35 00 00 00    	mov    ecx,0x35
    3c0f:	66 89 c7             	mov    edi,eax
    3c12:	66 89 d6             	mov    esi,edx
    3c15:	66 f3 a5             	rep movs DWORD PTR es:[di],DWORD PTR ds:[si]
    3c18:	67 66 8d 45 c2       	lea    eax,[ebp-0x3e]
    3c1d:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    3c22:	66 e8 31 fa ff ff    	call   3659 <_hash>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:328
	while (rawRecords[i] != '\n')
    3c28:	67 66 8b 55 f4       	mov    edx,DWORD PTR [ebp-0xc]
    3c2d:	67 66 8b 45 e4       	mov    eax,DWORD PTR [ebp-0x1c]
    3c32:	66 01 d0             	add    eax,edx
    3c35:	67 8a 00             	mov    al,BYTE PTR [eax]
    3c38:	3c 0a                	cmp    al,0xa
    3c3a:	0f 85 be fd          	jne    39fc <_loadFiles+0x5e>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:366
	}
}
    3c3e:	90                   	nop
    3c3f:	66 81 c4 e4 01 00 00 	add    esp,0x1e4
    3c46:	66 5e                	pop    esi
    3c48:	66 5f                	pop    edi
    3c4a:	66 5d                	pop    ebp
    3c4c:	66 c3                	ret    

00003c4e <_setFAT>:
setFAT():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:369
// 注意FAT从0开始。
void setFAT(int lmaddress, int size)
{
    3c4e:	66 55                	push   ebp
    3c50:	66 89 e5             	mov    ebp,esp
    3c53:	66 83 ec 0c          	sub    esp,0xc
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:370
	int begin = lmaddress / Cluster;
    3c57:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    3c5c:	66 85 c0             	test   eax,eax
    3c5f:	79 06                	jns    3c67 <_setFAT+0x19>
    3c61:	66 05 ff 01 00 00    	add    eax,0x1ff
    3c67:	66 c1 f8 09          	sar    eax,0x9
    3c6b:	67 66 89 45 f8       	mov    DWORD PTR [ebp-0x8],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:371
	int num = size / Cluster;
    3c70:	67 66 8b 45 0c       	mov    eax,DWORD PTR [ebp+0xc]
    3c75:	66 85 c0             	test   eax,eax
    3c78:	79 06                	jns    3c80 <_setFAT+0x32>
    3c7a:	66 05 ff 01 00 00    	add    eax,0x1ff
    3c80:	66 c1 f8 09          	sar    eax,0x9
    3c84:	67 66 89 45 f4       	mov    DWORD PTR [ebp-0xc],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:372
	for (int i = 0; i < num - 1; ++i)
    3c89:	67 66 c7 45 fc 00 00 	mov    DWORD PTR [ebp-0x4],0x0
    3c90:	00 00 
    3c92:	eb 33                	jmp    3cc7 <_setFAT+0x79>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:374
	{
		FAT[i + begin] = i + begin + 1;
    3c94:	66 a1 00 a7          	mov    eax,ds:0xa700
    3c98:	67 66 8b 4d fc       	mov    ecx,DWORD PTR [ebp-0x4]
    3c9d:	67 66 8b 55 f8       	mov    edx,DWORD PTR [ebp-0x8]
    3ca2:	66 01 ca             	add    edx,ecx
    3ca5:	66 01 d2             	add    edx,edx
    3ca8:	67 66 8d 0c 10       	lea    ecx,[eax+edx*1]
    3cad:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
    3cb2:	66 89 c2             	mov    edx,eax
    3cb5:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
    3cba:	66 01 d0             	add    eax,edx
    3cbd:	66 40                	inc    eax
    3cbf:	67 89 01             	mov    WORD PTR [ecx],ax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:372
	for (int i = 0; i < num - 1; ++i)
    3cc2:	67 66 ff 45 fc       	inc    DWORD PTR [ebp-0x4]
    3cc7:	67 66 8b 45 f4       	mov    eax,DWORD PTR [ebp-0xc]
    3ccc:	66 48                	dec    eax
    3cce:	67 66 3b 45 fc       	cmp    eax,DWORD PTR [ebp-0x4]
    3cd3:	7f bf                	jg     3c94 <_setFAT+0x46>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:376
	}
	FAT[num + begin - 1] = 0xffff;
    3cd5:	66 a1 00 a7          	mov    eax,ds:0xa700
    3cd9:	67 66 8b 4d f4       	mov    ecx,DWORD PTR [ebp-0xc]
    3cde:	67 66 8b 55 f8       	mov    edx,DWORD PTR [ebp-0x8]
    3ce3:	66 01 ca             	add    edx,ecx
    3ce6:	66 81 c2 ff ff ff 7f 	add    edx,0x7fffffff
    3ced:	66 01 d2             	add    edx,edx
    3cf0:	66 01 d0             	add    eax,edx
    3cf3:	67 c7 00 ff ff       	mov    WORD PTR [eax],0xffff
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:377
}
    3cf8:	90                   	nop
    3cf9:	66 c9                	leave  
    3cfb:	66 c3                	ret    

00003cfd <_resetFAT>:
resetFAT():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:380

void resetFAT(int lmaddress, int size)
{
    3cfd:	66 55                	push   ebp
    3cff:	66 89 e5             	mov    ebp,esp
    3d02:	66 83 ec 0c          	sub    esp,0xc
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:381
	int begin = lmaddress / Cluster;
    3d06:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    3d0b:	66 85 c0             	test   eax,eax
    3d0e:	79 06                	jns    3d16 <_resetFAT+0x19>
    3d10:	66 05 ff 01 00 00    	add    eax,0x1ff
    3d16:	66 c1 f8 09          	sar    eax,0x9
    3d1a:	67 66 89 45 f8       	mov    DWORD PTR [ebp-0x8],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:382
	int num = size / Cluster;
    3d1f:	67 66 8b 45 0c       	mov    eax,DWORD PTR [ebp+0xc]
    3d24:	66 85 c0             	test   eax,eax
    3d27:	79 06                	jns    3d2f <_resetFAT+0x32>
    3d29:	66 05 ff 01 00 00    	add    eax,0x1ff
    3d2f:	66 c1 f8 09          	sar    eax,0x9
    3d33:	67 66 89 45 f4       	mov    DWORD PTR [ebp-0xc],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:383
	for (int i = 0; i < num; ++i)
    3d38:	67 66 c7 45 fc 00 00 	mov    DWORD PTR [ebp-0x4],0x0
    3d3f:	00 00 
    3d41:	eb 21                	jmp    3d64 <_resetFAT+0x67>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:385
	{
		FAT[i + begin] = 0;
    3d43:	66 a1 00 a7          	mov    eax,ds:0xa700
    3d47:	67 66 8b 4d fc       	mov    ecx,DWORD PTR [ebp-0x4]
    3d4c:	67 66 8b 55 f8       	mov    edx,DWORD PTR [ebp-0x8]
    3d51:	66 01 ca             	add    edx,ecx
    3d54:	66 01 d2             	add    edx,edx
    3d57:	66 01 d0             	add    eax,edx
    3d5a:	67 c7 00 00 00       	mov    WORD PTR [eax],0x0
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:383
	for (int i = 0; i < num; ++i)
    3d5f:	67 66 ff 45 fc       	inc    DWORD PTR [ebp-0x4]
    3d64:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
    3d69:	67 66 3b 45 f4       	cmp    eax,DWORD PTR [ebp-0xc]
    3d6e:	7c d3                	jl     3d43 <_resetFAT+0x46>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:387
	}
}
    3d70:	90                   	nop
    3d71:	66 c9                	leave  
    3d73:	66 c3                	ret    

00003d75 <_Outread>:
Outread():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:391


int Outread(struct File* f, char*buf, int count, int offset)
{
    3d75:	66 55                	push   ebp
    3d77:	66 89 e5             	mov    ebp,esp
    3d7a:	66 83 ec 14          	sub    esp,0x14
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:392
	readReal(f->file.seg, f->file.memoryOffset, count, offset, buf);
    3d7e:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    3d83:	67 66 8b 90 90 00 00 	mov    edx,DWORD PTR [eax+0x90]
    3d8a:	00 
    3d8b:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    3d90:	67 66 8b 80 8c 00 00 	mov    eax,DWORD PTR [eax+0x8c]
    3d97:	00 
    3d98:	67 66 8b 4d 0c       	mov    ecx,DWORD PTR [ebp+0xc]
    3d9d:	67 66 89 4c 24 10    	mov    DWORD PTR [esp+0x10],ecx
    3da3:	67 66 8b 4d 14       	mov    ecx,DWORD PTR [ebp+0x14]
    3da8:	67 66 89 4c 24 0c    	mov    DWORD PTR [esp+0xc],ecx
    3dae:	67 66 8b 4d 10       	mov    ecx,DWORD PTR [ebp+0x10]
    3db3:	67 66 89 4c 24 08    	mov    DWORD PTR [esp+0x8],ecx
    3db9:	67 66 89 54 24 04    	mov    DWORD PTR [esp+0x4],edx
    3dbf:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    3dc4:	66 e8 b6 09 00 00    	call   4780 <_readReal>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:393
	return strlen(buf);
    3dca:	67 66 8b 45 0c       	mov    eax,DWORD PTR [ebp+0xc]
    3dcf:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    3dd4:	66 e8 9e f4 ff ff    	call   3278 <_strlen>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:394
}
    3dda:	66 c9                	leave  
    3ddc:	66 c3                	ret    

00003dde <_Outwrite>:
Outwrite():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:396
int Outwrite(struct File* f, char*buf, int count, int offset)
{
    3dde:	66 55                	push   ebp
    3de0:	66 89 e5             	mov    ebp,esp
    3de3:	66 83 ec 14          	sub    esp,0x14
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:397
	return writeReal(f->file.seg, f->file.memoryOffset, count, offset, buf);
    3de7:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    3dec:	67 66 8b 90 90 00 00 	mov    edx,DWORD PTR [eax+0x90]
    3df3:	00 
    3df4:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    3df9:	67 66 8b 80 8c 00 00 	mov    eax,DWORD PTR [eax+0x8c]
    3e00:	00 
    3e01:	67 66 8b 4d 0c       	mov    ecx,DWORD PTR [ebp+0xc]
    3e06:	67 66 89 4c 24 10    	mov    DWORD PTR [esp+0x10],ecx
    3e0c:	67 66 8b 4d 14       	mov    ecx,DWORD PTR [ebp+0x14]
    3e11:	67 66 89 4c 24 0c    	mov    DWORD PTR [esp+0xc],ecx
    3e17:	67 66 8b 4d 10       	mov    ecx,DWORD PTR [ebp+0x10]
    3e1c:	67 66 89 4c 24 08    	mov    DWORD PTR [esp+0x8],ecx
    3e22:	67 66 89 54 24 04    	mov    DWORD PTR [esp+0x4],edx
    3e28:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    3e2d:	66 e8 b5 09 00 00    	call   47e8 <_writeReal>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:399
	f->file.size = count + offset;
}
    3e33:	66 c9                	leave  
    3e35:	66 c3                	ret    

00003e37 <_fopen>:
fopen():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:402

int fopen(char * name, enum openFileType type)
{
    3e37:	66 55                	push   ebp
    3e39:	66 89 e5             	mov    ebp,esp
    3e3c:	66 56                	push   esi
    3e3e:	66 53                	push   ebx
    3e40:	66 83 ec 20          	sub    esp,0x20
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:403
	int tmp = find(name);
    3e44:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    3e49:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    3e4e:	66 e8 ac f9 ff ff    	call   3800 <_find>
    3e54:	67 66 89 45 f4       	mov    DWORD PTR [ebp-0xc],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:404
	if (tmp == -1)
    3e59:	67 66 83 7d f4 ff    	cmp    DWORD PTR [ebp-0xc],0xffffffff
    3e5f:	75 09                	jne    3e6a <_fopen+0x33>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:405
		return 400;
    3e61:	66 b8 90 01 00 00    	mov    eax,0x190
    3e67:	e9 a7 03             	jmp    4211 <_fopen+0x3da>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:406
	int blockNum = findEnoughBlock(information[tmp].size);
    3e6a:	67 66 8b 55 f4       	mov    edx,DWORD PTR [ebp-0xc]
    3e6f:	66 89 d0             	mov    eax,edx
    3e72:	66 01 c0             	add    eax,eax
    3e75:	66 01 d0             	add    eax,edx
    3e78:	66 c1 e0 02          	shl    eax,0x2
    3e7c:	66 01 d0             	add    eax,edx
    3e7f:	66 c1 e0 02          	shl    eax,0x2
    3e83:	66 01 d0             	add    eax,edx
    3e86:	66 c1 e0 02          	shl    eax,0x2
    3e8a:	66 05 a8 bf 00 00    	add    eax,0xbfa8
    3e90:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    3e94:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    3e99:	66 e8 9d 2e 00 00    	call   6d3c <_findEnoughBlock>
    3e9f:	67 66 89 45 f0       	mov    DWORD PTR [ebp-0x10],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:407
	blockNum = require(information[tmp].size, blockNum);
    3ea4:	67 66 8b 55 f4       	mov    edx,DWORD PTR [ebp-0xc]
    3ea9:	66 89 d0             	mov    eax,edx
    3eac:	66 01 c0             	add    eax,eax
    3eaf:	66 01 d0             	add    eax,edx
    3eb2:	66 c1 e0 02          	shl    eax,0x2
    3eb6:	66 01 d0             	add    eax,edx
    3eb9:	66 c1 e0 02          	shl    eax,0x2
    3ebd:	66 01 d0             	add    eax,edx
    3ec0:	66 c1 e0 02          	shl    eax,0x2
    3ec4:	66 05 a8 bf 00 00    	add    eax,0xbfa8
    3eca:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    3ece:	67 66 8b 55 f0       	mov    edx,DWORD PTR [ebp-0x10]
    3ed3:	67 66 89 54 24 04    	mov    DWORD PTR [esp+0x4],edx
    3ed9:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    3ede:	66 e8 01 2f 00 00    	call   6de5 <_require>
    3ee4:	67 66 89 45 f0       	mov    DWORD PTR [ebp-0x10],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:408
	processTable[curProcessId].openfile.file.infoIndex = tmp;
    3ee9:	66 8b 16 40 e8       	mov    edx,DWORD PTR ds:0xe840
    3eee:	66 89 d0             	mov    eax,edx
    3ef1:	66 c1 e0 03          	shl    eax,0x3
    3ef5:	66 01 d0             	add    eax,edx
    3ef8:	66 01 c0             	add    eax,eax
    3efb:	66 01 d0             	add    eax,edx
    3efe:	66 c1 e0 04          	shl    eax,0x4
    3f02:	67 66 8d 90 90 d1 00 	lea    edx,[eax+0xd190]
    3f09:	00 
    3f0a:	67 66 8b 45 f4       	mov    eax,DWORD PTR [ebp-0xc]
    3f0f:	67 66 89 02          	mov    DWORD PTR [edx],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:409
	processTable[curProcessId].openfile.file.memoryPlace = memoryTable[blockNum].beginAddr;
    3f13:	66 8b 16 40 e8       	mov    edx,DWORD PTR ds:0xe840
    3f18:	67 66 8b 4d f0       	mov    ecx,DWORD PTR [ebp-0x10]
    3f1d:	66 89 c8             	mov    eax,ecx
    3f20:	66 01 c0             	add    eax,eax
    3f23:	66 01 c8             	add    eax,ecx
    3f26:	66 c1 e0 03          	shl    eax,0x3
    3f2a:	66 05 e0 a2 00 00    	add    eax,0xa2e0
    3f30:	67 66 8b 08          	mov    ecx,DWORD PTR [eax]
    3f34:	66 89 d0             	mov    eax,edx
    3f37:	66 c1 e0 03          	shl    eax,0x3
    3f3b:	66 01 d0             	add    eax,edx
    3f3e:	66 01 c0             	add    eax,eax
    3f41:	66 01 d0             	add    eax,edx
    3f44:	66 c1 e0 04          	shl    eax,0x4
    3f48:	66 05 94 d1 00 00    	add    eax,0xd194
    3f4e:	67 66 89 08          	mov    DWORD PTR [eax],ecx
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:410
	processTable[curProcessId].openfile.file.count++;
    3f52:	66 8b 16 40 e8       	mov    edx,DWORD PTR ds:0xe840
    3f57:	66 89 d0             	mov    eax,edx
    3f5a:	66 c1 e0 03          	shl    eax,0x3
    3f5e:	66 01 d0             	add    eax,edx
    3f61:	66 01 c0             	add    eax,eax
    3f64:	66 01 d0             	add    eax,edx
    3f67:	66 c1 e0 04          	shl    eax,0x4
    3f6b:	66 05 88 d1 00 00    	add    eax,0xd188
    3f71:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    3f75:	67 66 8d 48 01       	lea    ecx,[eax+0x1]
    3f7a:	66 89 d0             	mov    eax,edx
    3f7d:	66 c1 e0 03          	shl    eax,0x3
    3f81:	66 01 d0             	add    eax,edx
    3f84:	66 01 c0             	add    eax,eax
    3f87:	66 01 d0             	add    eax,edx
    3f8a:	66 c1 e0 04          	shl    eax,0x4
    3f8e:	66 05 88 d1 00 00    	add    eax,0xd188
    3f94:	67 66 89 08          	mov    DWORD PTR [eax],ecx
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:411
	processTable[curProcessId].openfile.file.size = information[tmp].size;
    3f98:	66 8b 0e 40 e8       	mov    ecx,DWORD PTR ds:0xe840
    3f9d:	67 66 8b 55 f4       	mov    edx,DWORD PTR [ebp-0xc]
    3fa2:	66 89 d0             	mov    eax,edx
    3fa5:	66 01 c0             	add    eax,eax
    3fa8:	66 01 d0             	add    eax,edx
    3fab:	66 c1 e0 02          	shl    eax,0x2
    3faf:	66 01 d0             	add    eax,edx
    3fb2:	66 c1 e0 02          	shl    eax,0x2
    3fb6:	66 01 d0             	add    eax,edx
    3fb9:	66 c1 e0 02          	shl    eax,0x2
    3fbd:	66 05 a8 bf 00 00    	add    eax,0xbfa8
    3fc3:	67 66 8b 10          	mov    edx,DWORD PTR [eax]
    3fc7:	66 89 c8             	mov    eax,ecx
    3fca:	66 c1 e0 03          	shl    eax,0x3
    3fce:	66 01 c8             	add    eax,ecx
    3fd1:	66 01 c0             	add    eax,eax
    3fd4:	66 01 c8             	add    eax,ecx
    3fd7:	66 c1 e0 04          	shl    eax,0x4
    3fdb:	66 05 a0 d1 00 00    	add    eax,0xd1a0
    3fe1:	67 66 89 10          	mov    DWORD PTR [eax],edx
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:412
	strncpy(name, processTable[curProcessId].openfile.file.name, strlen(name));
    3fe5:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    3fea:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    3fef:	66 e8 83 f2 ff ff    	call   3278 <_strlen>
    3ff5:	66 89 c1             	mov    ecx,eax
    3ff8:	66 8b 16 40 e8       	mov    edx,DWORD PTR ds:0xe840
    3ffd:	66 89 d0             	mov    eax,edx
    4000:	66 c1 e0 03          	shl    eax,0x3
    4004:	66 01 d0             	add    eax,edx
    4007:	66 01 c0             	add    eax,eax
    400a:	66 01 d0             	add    eax,edx
    400d:	66 c1 e0 04          	shl    eax,0x4
    4011:	66 83 e8 80          	sub    eax,0xffffff80
    4015:	66 05 80 d0 00 00    	add    eax,0xd080
    401b:	66 83 c0 10          	add    eax,0x10
    401f:	67 66 89 4c 24 08    	mov    DWORD PTR [esp+0x8],ecx
    4025:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    402b:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    4030:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    4035:	66 e8 23 f4 ff ff    	call   345e <_strncpy>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:413
	int offsetMask = 0x0000ffff;
    403b:	67 66 c7 45 ec ff ff 	mov    DWORD PTR [ebp-0x14],0xffff
    4042:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:414
	int segMask = 0xf0000;
    4044:	67 66 c7 45 e8 00 00 	mov    DWORD PTR [ebp-0x18],0xf0000
    404b:	0f 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:415
	processTable[curProcessId].openfile.file.memoryOffset = memoryTable[blockNum].beginAddr & offsetMask;
    404d:	66 8b 16 40 e8       	mov    edx,DWORD PTR ds:0xe840
    4052:	67 66 8b 4d f0       	mov    ecx,DWORD PTR [ebp-0x10]
    4057:	66 89 c8             	mov    eax,ecx
    405a:	66 01 c0             	add    eax,eax
    405d:	66 01 c8             	add    eax,ecx
    4060:	66 c1 e0 03          	shl    eax,0x3
    4064:	66 05 e0 a2 00 00    	add    eax,0xa2e0
    406a:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    406e:	67 66 23 45 ec       	and    eax,DWORD PTR [ebp-0x14]
    4073:	66 89 c1             	mov    ecx,eax
    4076:	66 89 d0             	mov    eax,edx
    4079:	66 c1 e0 03          	shl    eax,0x3
    407d:	66 01 d0             	add    eax,edx
    4080:	66 01 c0             	add    eax,eax
    4083:	66 01 d0             	add    eax,edx
    4086:	66 c1 e0 04          	shl    eax,0x4
    408a:	66 05 9c d1 00 00    	add    eax,0xd19c
    4090:	67 66 89 08          	mov    DWORD PTR [eax],ecx
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:416
	processTable[curProcessId].openfile.file.seg = (memoryTable[blockNum].beginAddr & segMask) >> 4;
    4094:	66 8b 16 40 e8       	mov    edx,DWORD PTR ds:0xe840
    4099:	67 66 8b 4d f0       	mov    ecx,DWORD PTR [ebp-0x10]
    409e:	66 89 c8             	mov    eax,ecx
    40a1:	66 01 c0             	add    eax,eax
    40a4:	66 01 c8             	add    eax,ecx
    40a7:	66 c1 e0 03          	shl    eax,0x3
    40ab:	66 05 e0 a2 00 00    	add    eax,0xa2e0
    40b1:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    40b5:	67 66 23 45 e8       	and    eax,DWORD PTR [ebp-0x18]
    40ba:	66 c1 f8 04          	sar    eax,0x4
    40be:	66 89 c1             	mov    ecx,eax
    40c1:	66 89 d0             	mov    eax,edx
    40c4:	66 c1 e0 03          	shl    eax,0x3
    40c8:	66 01 d0             	add    eax,edx
    40cb:	66 01 c0             	add    eax,eax
    40ce:	66 01 d0             	add    eax,edx
    40d1:	66 c1 e0 04          	shl    eax,0x4
    40d5:	66 05 98 d1 00 00    	add    eax,0xd198
    40db:	67 66 89 08          	mov    DWORD PTR [eax],ecx
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:417
	loadReal(information[tmp].lmaddress, information[tmp].size, processTable[curProcessId].openfile.file.memoryOffset, processTable[curProcessId].openfile.file.seg);
    40df:	66 8b 16 40 e8       	mov    edx,DWORD PTR ds:0xe840
    40e4:	66 89 d0             	mov    eax,edx
    40e7:	66 c1 e0 03          	shl    eax,0x3
    40eb:	66 01 d0             	add    eax,edx
    40ee:	66 01 c0             	add    eax,eax
    40f1:	66 01 d0             	add    eax,edx
    40f4:	66 c1 e0 04          	shl    eax,0x4
    40f8:	66 05 98 d1 00 00    	add    eax,0xd198
    40fe:	67 66 8b 30          	mov    esi,DWORD PTR [eax]
    4102:	66 8b 16 40 e8       	mov    edx,DWORD PTR ds:0xe840
    4107:	66 89 d0             	mov    eax,edx
    410a:	66 c1 e0 03          	shl    eax,0x3
    410e:	66 01 d0             	add    eax,edx
    4111:	66 01 c0             	add    eax,eax
    4114:	66 01 d0             	add    eax,edx
    4117:	66 c1 e0 04          	shl    eax,0x4
    411b:	66 05 9c d1 00 00    	add    eax,0xd19c
    4121:	67 66 8b 18          	mov    ebx,DWORD PTR [eax]
    4125:	67 66 8b 55 f4       	mov    edx,DWORD PTR [ebp-0xc]
    412a:	66 89 d0             	mov    eax,edx
    412d:	66 01 c0             	add    eax,eax
    4130:	66 01 d0             	add    eax,edx
    4133:	66 c1 e0 02          	shl    eax,0x2
    4137:	66 01 d0             	add    eax,edx
    413a:	66 c1 e0 02          	shl    eax,0x2
    413e:	66 01 d0             	add    eax,edx
    4141:	66 c1 e0 02          	shl    eax,0x2
    4145:	66 05 a8 bf 00 00    	add    eax,0xbfa8
    414b:	67 66 8b 08          	mov    ecx,DWORD PTR [eax]
    414f:	67 66 8b 55 f4       	mov    edx,DWORD PTR [ebp-0xc]
    4154:	66 89 d0             	mov    eax,edx
    4157:	66 01 c0             	add    eax,eax
    415a:	66 01 d0             	add    eax,edx
    415d:	66 c1 e0 02          	shl    eax,0x2
    4161:	66 01 d0             	add    eax,edx
    4164:	66 c1 e0 02          	shl    eax,0x2
    4168:	66 01 d0             	add    eax,edx
    416b:	66 c1 e0 02          	shl    eax,0x2
    416f:	66 05 a4 bf 00 00    	add    eax,0xbfa4
    4175:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    4179:	67 66 89 74 24 0c    	mov    DWORD PTR [esp+0xc],esi
    417f:	67 66 89 5c 24 08    	mov    DWORD PTR [esp+0x8],ebx
    4185:	67 66 89 4c 24 04    	mov    DWORD PTR [esp+0x4],ecx
    418b:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    4190:	66 e8 0c da ff ff    	call   1ba2 <_loadReal>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:418
	processTable[curProcessId].openfile.offset = 0;
    4196:	66 8b 16 40 e8       	mov    edx,DWORD PTR ds:0xe840
    419b:	66 89 d0             	mov    eax,edx
    419e:	66 c1 e0 03          	shl    eax,0x3
    41a2:	66 01 d0             	add    eax,edx
    41a5:	66 01 c0             	add    eax,eax
    41a8:	66 01 d0             	add    eax,edx
    41ab:	66 c1 e0 04          	shl    eax,0x4
    41af:	66 05 0c d1 00 00    	add    eax,0xd10c
    41b5:	67 66 c7 00 00 00 00 	mov    DWORD PTR [eax],0x0
    41bc:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:419
	processTable[curProcessId].openfile.file_ops.read = &Outread;
    41bd:	66 8b 16 40 e8       	mov    edx,DWORD PTR ds:0xe840
    41c2:	66 89 d0             	mov    eax,edx
    41c5:	66 c1 e0 03          	shl    eax,0x3
    41c9:	66 01 d0             	add    eax,edx
    41cc:	66 01 c0             	add    eax,eax
    41cf:	66 01 d0             	add    eax,edx
    41d2:	66 c1 e0 04          	shl    eax,0x4
    41d6:	66 05 a4 d1 00 00    	add    eax,0xd1a4
    41dc:	67 66 c7 00 75 3d 00 	mov    DWORD PTR [eax],0x3d75
    41e3:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:420
	processTable[curProcessId].openfile.file_ops.write = &Outwrite;
    41e4:	66 8b 16 40 e8       	mov    edx,DWORD PTR ds:0xe840
    41e9:	66 89 d0             	mov    eax,edx
    41ec:	66 c1 e0 03          	shl    eax,0x3
    41f0:	66 01 d0             	add    eax,edx
    41f3:	66 01 c0             	add    eax,eax
    41f6:	66 01 d0             	add    eax,edx
    41f9:	66 c1 e0 04          	shl    eax,0x4
    41fd:	66 05 a8 d1 00 00    	add    eax,0xd1a8
    4203:	67 66 c7 00 de 3d 00 	mov    DWORD PTR [eax],0x3dde
    420a:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:421
	return 200;
    420b:	66 b8 c8 00 00 00    	mov    eax,0xc8
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:422
}
    4211:	66 83 c4 20          	add    esp,0x20
    4215:	66 5b                	pop    ebx
    4217:	66 5e                	pop    esi
    4219:	66 5d                	pop    ebp
    421b:	66 c3                	ret    

0000421d <_fclose>:
fclose():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:424
int fclose(char * name)
{
    421d:	66 55                	push   ebp
    421f:	66 89 e5             	mov    ebp,esp
    4222:	66 56                	push   esi
    4224:	66 53                	push   ebx
    4226:	66 83 ec 10          	sub    esp,0x10
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:426
	//写回。
	if (strcmp(processTable[curProcessId].openfile.file.name, name) == 0) {
    422a:	66 8b 16 40 e8       	mov    edx,DWORD PTR ds:0xe840
    422f:	66 89 d0             	mov    eax,edx
    4232:	66 c1 e0 03          	shl    eax,0x3
    4236:	66 01 d0             	add    eax,edx
    4239:	66 01 c0             	add    eax,eax
    423c:	66 01 d0             	add    eax,edx
    423f:	66 c1 e0 04          	shl    eax,0x4
    4243:	66 83 e8 80          	sub    eax,0xffffff80
    4247:	66 05 80 d0 00 00    	add    eax,0xd080
    424d:	67 66 8d 50 10       	lea    edx,[eax+0x10]
    4252:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    4257:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    425d:	67 66 89 14 24       	mov    DWORD PTR [esp],edx
    4262:	66 e8 e1 f0 ff ff    	call   3349 <_strcmp>
    4268:	66 85 c0             	test   eax,eax
    426b:	0f 85 1c 01          	jne    438b <_fclose+0x16e>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:427
		write(information[processTable[curProcessId].openfile.file.infoIndex].lmaddress, processTable[curProcessId].openfile.file.size, processTable[curProcessId].openfile.file.memoryOffset, processTable[curProcessId].openfile.file.seg);
    426f:	66 8b 16 40 e8       	mov    edx,DWORD PTR ds:0xe840
    4274:	66 89 d0             	mov    eax,edx
    4277:	66 c1 e0 03          	shl    eax,0x3
    427b:	66 01 d0             	add    eax,edx
    427e:	66 01 c0             	add    eax,eax
    4281:	66 01 d0             	add    eax,edx
    4284:	66 c1 e0 04          	shl    eax,0x4
    4288:	66 05 98 d1 00 00    	add    eax,0xd198
    428e:	67 66 8b 30          	mov    esi,DWORD PTR [eax]
    4292:	66 8b 16 40 e8       	mov    edx,DWORD PTR ds:0xe840
    4297:	66 89 d0             	mov    eax,edx
    429a:	66 c1 e0 03          	shl    eax,0x3
    429e:	66 01 d0             	add    eax,edx
    42a1:	66 01 c0             	add    eax,eax
    42a4:	66 01 d0             	add    eax,edx
    42a7:	66 c1 e0 04          	shl    eax,0x4
    42ab:	66 05 9c d1 00 00    	add    eax,0xd19c
    42b1:	67 66 8b 18          	mov    ebx,DWORD PTR [eax]
    42b5:	66 8b 16 40 e8       	mov    edx,DWORD PTR ds:0xe840
    42ba:	66 89 d0             	mov    eax,edx
    42bd:	66 c1 e0 03          	shl    eax,0x3
    42c1:	66 01 d0             	add    eax,edx
    42c4:	66 01 c0             	add    eax,eax
    42c7:	66 01 d0             	add    eax,edx
    42ca:	66 c1 e0 04          	shl    eax,0x4
    42ce:	66 05 a0 d1 00 00    	add    eax,0xd1a0
    42d4:	67 66 8b 08          	mov    ecx,DWORD PTR [eax]
    42d8:	66 8b 16 40 e8       	mov    edx,DWORD PTR ds:0xe840
    42dd:	66 89 d0             	mov    eax,edx
    42e0:	66 c1 e0 03          	shl    eax,0x3
    42e4:	66 01 d0             	add    eax,edx
    42e7:	66 01 c0             	add    eax,eax
    42ea:	66 01 d0             	add    eax,edx
    42ed:	66 c1 e0 04          	shl    eax,0x4
    42f1:	66 05 90 d1 00 00    	add    eax,0xd190
    42f7:	67 66 8b 10          	mov    edx,DWORD PTR [eax]
    42fb:	66 89 d0             	mov    eax,edx
    42fe:	66 01 c0             	add    eax,eax
    4301:	66 01 d0             	add    eax,edx
    4304:	66 c1 e0 02          	shl    eax,0x2
    4308:	66 01 d0             	add    eax,edx
    430b:	66 c1 e0 02          	shl    eax,0x2
    430f:	66 01 d0             	add    eax,edx
    4312:	66 c1 e0 02          	shl    eax,0x2
    4316:	66 05 a4 bf 00 00    	add    eax,0xbfa4
    431c:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    4320:	67 66 89 74 24 0c    	mov    DWORD PTR [esp+0xc],esi
    4326:	67 66 89 5c 24 08    	mov    DWORD PTR [esp+0x8],ebx
    432c:	67 66 89 4c 24 04    	mov    DWORD PTR [esp+0x4],ecx
    4332:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    4337:	66 e8 30 e2 ff ff    	call   256d <_write>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:428
		processTable[curProcessId].openfile.file.count--;
    433d:	66 8b 16 40 e8       	mov    edx,DWORD PTR ds:0xe840
    4342:	66 89 d0             	mov    eax,edx
    4345:	66 c1 e0 03          	shl    eax,0x3
    4349:	66 01 d0             	add    eax,edx
    434c:	66 01 c0             	add    eax,eax
    434f:	66 01 d0             	add    eax,edx
    4352:	66 c1 e0 04          	shl    eax,0x4
    4356:	66 05 88 d1 00 00    	add    eax,0xd188
    435c:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    4360:	67 66 8d 48 ff       	lea    ecx,[eax-0x1]
    4365:	66 89 d0             	mov    eax,edx
    4368:	66 c1 e0 03          	shl    eax,0x3
    436c:	66 01 d0             	add    eax,edx
    436f:	66 01 c0             	add    eax,eax
    4372:	66 01 d0             	add    eax,edx
    4375:	66 c1 e0 04          	shl    eax,0x4
    4379:	66 05 88 d1 00 00    	add    eax,0xd188
    437f:	67 66 89 08          	mov    DWORD PTR [eax],ecx
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:429
		return 200;
    4383:	66 b8 c8 00 00 00    	mov    eax,0xc8
    4389:	eb 06                	jmp    4391 <_fclose+0x174>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:431
	}
	return 500;
    438b:	66 b8 f4 01 00 00    	mov    eax,0x1f4
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:432
}
    4391:	66 83 c4 10          	add    esp,0x10
    4395:	66 5b                	pop    ebx
    4397:	66 5e                	pop    esi
    4399:	66 5d                	pop    ebp
    439b:	66 c3                	ret    

0000439d <_fseek>:
fseek():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:434
int fseek(char *name, int offset)
{
    439d:	66 55                	push   ebp
    439f:	66 89 e5             	mov    ebp,esp
    43a2:	66 83 ec 08          	sub    esp,0x8
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:435
	if (strcmp(processTable[curProcessId].openfile.file.name, name) == 0) {
    43a6:	66 8b 16 40 e8       	mov    edx,DWORD PTR ds:0xe840
    43ab:	66 89 d0             	mov    eax,edx
    43ae:	66 c1 e0 03          	shl    eax,0x3
    43b2:	66 01 d0             	add    eax,edx
    43b5:	66 01 c0             	add    eax,eax
    43b8:	66 01 d0             	add    eax,edx
    43bb:	66 c1 e0 04          	shl    eax,0x4
    43bf:	66 83 e8 80          	sub    eax,0xffffff80
    43c3:	66 05 80 d0 00 00    	add    eax,0xd080
    43c9:	67 66 8d 50 10       	lea    edx,[eax+0x10]
    43ce:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    43d3:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    43d9:	67 66 89 14 24       	mov    DWORD PTR [esp],edx
    43de:	66 e8 65 ef ff ff    	call   3349 <_strcmp>
    43e4:	66 85 c0             	test   eax,eax
    43e7:	75 31                	jne    441a <_fseek+0x7d>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:436
		processTable[curProcessId].openfile.offset = offset;
    43e9:	66 8b 16 40 e8       	mov    edx,DWORD PTR ds:0xe840
    43ee:	66 89 d0             	mov    eax,edx
    43f1:	66 c1 e0 03          	shl    eax,0x3
    43f5:	66 01 d0             	add    eax,edx
    43f8:	66 01 c0             	add    eax,eax
    43fb:	66 01 d0             	add    eax,edx
    43fe:	66 c1 e0 04          	shl    eax,0x4
    4402:	67 66 8d 90 0c d1 00 	lea    edx,[eax+0xd10c]
    4409:	00 
    440a:	67 66 8b 45 0c       	mov    eax,DWORD PTR [ebp+0xc]
    440f:	67 66 89 02          	mov    DWORD PTR [edx],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:437
		return offset;
    4413:	67 66 8b 45 0c       	mov    eax,DWORD PTR [ebp+0xc]
    4418:	eb 06                	jmp    4420 <_fseek+0x83>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:439
	}
	return 0;
    441a:	66 b8 00 00 00 00    	mov    eax,0x0
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:440
}
    4420:	66 c9                	leave  
    4422:	66 c3                	ret    

00004424 <_fread>:
fread():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:442
int fread(char *name, char * buffer, int count)
{
    4424:	66 55                	push   ebp
    4426:	66 89 e5             	mov    ebp,esp
    4429:	66 53                	push   ebx
    442b:	66 83 ec 10          	sub    esp,0x10
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:443
	if (strcmp(processTable[curProcessId].openfile.file.name, name) == 0) {
    442f:	66 8b 16 40 e8       	mov    edx,DWORD PTR ds:0xe840
    4434:	66 89 d0             	mov    eax,edx
    4437:	66 c1 e0 03          	shl    eax,0x3
    443b:	66 01 d0             	add    eax,edx
    443e:	66 01 c0             	add    eax,eax
    4441:	66 01 d0             	add    eax,edx
    4444:	66 c1 e0 04          	shl    eax,0x4
    4448:	66 83 e8 80          	sub    eax,0xffffff80
    444c:	66 05 80 d0 00 00    	add    eax,0xd080
    4452:	67 66 8d 50 10       	lea    edx,[eax+0x10]
    4457:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    445c:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    4462:	67 66 89 14 24       	mov    DWORD PTR [esp],edx
    4467:	66 e8 dc ee ff ff    	call   3349 <_strcmp>
    446d:	66 85 c0             	test   eax,eax
    4470:	0f 85 a4 00          	jne    4518 <_fread+0xf4>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:444
		processTable[curProcessId].openfile.file_ops.read(&processTable[curProcessId].openfile, buffer, count, processTable[curProcessId].openfile.offset);
    4474:	66 8b 16 40 e8       	mov    edx,DWORD PTR ds:0xe840
    4479:	66 89 d0             	mov    eax,edx
    447c:	66 c1 e0 03          	shl    eax,0x3
    4480:	66 01 d0             	add    eax,edx
    4483:	66 01 c0             	add    eax,eax
    4486:	66 01 d0             	add    eax,edx
    4489:	66 c1 e0 04          	shl    eax,0x4
    448d:	66 05 a4 d1 00 00    	add    eax,0xd1a4
    4493:	67 66 8b 08          	mov    ecx,DWORD PTR [eax]
    4497:	66 8b 16 40 e8       	mov    edx,DWORD PTR ds:0xe840
    449c:	66 89 d0             	mov    eax,edx
    449f:	66 c1 e0 03          	shl    eax,0x3
    44a3:	66 01 d0             	add    eax,edx
    44a6:	66 01 c0             	add    eax,eax
    44a9:	66 01 d0             	add    eax,edx
    44ac:	66 c1 e0 04          	shl    eax,0x4
    44b0:	66 05 0c d1 00 00    	add    eax,0xd10c
    44b6:	67 66 8b 18          	mov    ebx,DWORD PTR [eax]
    44ba:	66 8b 16 40 e8       	mov    edx,DWORD PTR ds:0xe840
    44bf:	66 89 d0             	mov    eax,edx
    44c2:	66 c1 e0 03          	shl    eax,0x3
    44c6:	66 01 d0             	add    eax,edx
    44c9:	66 01 c0             	add    eax,eax
    44cc:	66 01 d0             	add    eax,edx
    44cf:	66 c1 e0 04          	shl    eax,0x4
    44d3:	66 83 e8 80          	sub    eax,0xffffff80
    44d7:	66 05 80 d0 00 00    	add    eax,0xd080
    44dd:	67 66 8d 50 0c       	lea    edx,[eax+0xc]
    44e2:	67 66 89 5c 24 0c    	mov    DWORD PTR [esp+0xc],ebx
    44e8:	67 66 8b 45 10       	mov    eax,DWORD PTR [ebp+0x10]
    44ed:	67 66 89 44 24 08    	mov    DWORD PTR [esp+0x8],eax
    44f3:	67 66 8b 45 0c       	mov    eax,DWORD PTR [ebp+0xc]
    44f8:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    44fe:	67 66 89 14 24       	mov    DWORD PTR [esp],edx
    4503:	66 ff d1             	call   ecx
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:445
		return strlen(buffer);
    4506:	67 66 8b 45 0c       	mov    eax,DWORD PTR [ebp+0xc]
    450b:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    4510:	66 e8 62 ed ff ff    	call   3278 <_strlen>
    4516:	eb 06                	jmp    451e <_fread+0xfa>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:447
	}
	return 0;
    4518:	66 b8 00 00 00 00    	mov    eax,0x0
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:448
}
    451e:	66 83 c4 10          	add    esp,0x10
    4522:	66 5b                	pop    ebx
    4524:	66 5d                	pop    ebp
    4526:	66 c3                	ret    

00004528 <_fwrite>:
fwrite():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:450
int fwrite(char *name, char * buffer, int count)
{
    4528:	66 55                	push   ebp
    452a:	66 89 e5             	mov    ebp,esp
    452d:	66 53                	push   ebx
    452f:	66 83 ec 10          	sub    esp,0x10
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:451
	if (strcmp(processTable[curProcessId].openfile.file.name, name) == 0) {
    4533:	66 8b 16 40 e8       	mov    edx,DWORD PTR ds:0xe840
    4538:	66 89 d0             	mov    eax,edx
    453b:	66 c1 e0 03          	shl    eax,0x3
    453f:	66 01 d0             	add    eax,edx
    4542:	66 01 c0             	add    eax,eax
    4545:	66 01 d0             	add    eax,edx
    4548:	66 c1 e0 04          	shl    eax,0x4
    454c:	66 83 e8 80          	sub    eax,0xffffff80
    4550:	66 05 80 d0 00 00    	add    eax,0xd080
    4556:	67 66 8d 50 10       	lea    edx,[eax+0x10]
    455b:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    4560:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    4566:	67 66 89 14 24       	mov    DWORD PTR [esp],edx
    456b:	66 e8 d8 ed ff ff    	call   3349 <_strcmp>
    4571:	66 85 c0             	test   eax,eax
    4574:	0f 85 a4 00          	jne    461c <_fwrite+0xf4>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:452
		processTable[curProcessId].openfile.file_ops.write(&processTable[curProcessId].openfile, buffer, count, processTable[curProcessId].openfile.offset);
    4578:	66 8b 16 40 e8       	mov    edx,DWORD PTR ds:0xe840
    457d:	66 89 d0             	mov    eax,edx
    4580:	66 c1 e0 03          	shl    eax,0x3
    4584:	66 01 d0             	add    eax,edx
    4587:	66 01 c0             	add    eax,eax
    458a:	66 01 d0             	add    eax,edx
    458d:	66 c1 e0 04          	shl    eax,0x4
    4591:	66 05 a8 d1 00 00    	add    eax,0xd1a8
    4597:	67 66 8b 08          	mov    ecx,DWORD PTR [eax]
    459b:	66 8b 16 40 e8       	mov    edx,DWORD PTR ds:0xe840
    45a0:	66 89 d0             	mov    eax,edx
    45a3:	66 c1 e0 03          	shl    eax,0x3
    45a7:	66 01 d0             	add    eax,edx
    45aa:	66 01 c0             	add    eax,eax
    45ad:	66 01 d0             	add    eax,edx
    45b0:	66 c1 e0 04          	shl    eax,0x4
    45b4:	66 05 0c d1 00 00    	add    eax,0xd10c
    45ba:	67 66 8b 18          	mov    ebx,DWORD PTR [eax]
    45be:	66 8b 16 40 e8       	mov    edx,DWORD PTR ds:0xe840
    45c3:	66 89 d0             	mov    eax,edx
    45c6:	66 c1 e0 03          	shl    eax,0x3
    45ca:	66 01 d0             	add    eax,edx
    45cd:	66 01 c0             	add    eax,eax
    45d0:	66 01 d0             	add    eax,edx
    45d3:	66 c1 e0 04          	shl    eax,0x4
    45d7:	66 83 e8 80          	sub    eax,0xffffff80
    45db:	66 05 80 d0 00 00    	add    eax,0xd080
    45e1:	67 66 8d 50 0c       	lea    edx,[eax+0xc]
    45e6:	67 66 89 5c 24 0c    	mov    DWORD PTR [esp+0xc],ebx
    45ec:	67 66 8b 45 10       	mov    eax,DWORD PTR [ebp+0x10]
    45f1:	67 66 89 44 24 08    	mov    DWORD PTR [esp+0x8],eax
    45f7:	67 66 8b 45 0c       	mov    eax,DWORD PTR [ebp+0xc]
    45fc:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    4602:	67 66 89 14 24       	mov    DWORD PTR [esp],edx
    4607:	66 ff d1             	call   ecx
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:453
		return strlen(buffer);
    460a:	67 66 8b 45 0c       	mov    eax,DWORD PTR [ebp+0xc]
    460f:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    4614:	66 e8 5e ec ff ff    	call   3278 <_strlen>
    461a:	eb 06                	jmp    4622 <_fwrite+0xfa>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:455
	}
	return 0;
    461c:	66 b8 00 00 00 00    	mov    eax,0x0
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:456
}
    4622:	66 83 c4 10          	add    esp,0x10
    4626:	66 5b                	pop    ebx
    4628:	66 5d                	pop    ebp
    462a:	66 c3                	ret    

0000462c <_fcreate>:
fcreate():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:459

void fcreate(char * name)
{
    462c:	66 55                	push   ebp
    462e:	66 89 e5             	mov    ebp,esp
    4631:	66 57                	push   edi
    4633:	66 56                	push   esi
    4635:	66 81 ec b0 01 00 00 	sub    esp,0x1b0
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:461
	int i;
	for (i = 0; i < LenOfFat; ++i)
    463c:	67 66 c7 45 f4 00 00 	mov    DWORD PTR [ebp-0xc],0x0
    4643:	00 00 
    4645:	eb 1c                	jmp    4663 <_fcreate+0x37>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:463
	{
		if (FAT[i] == 0)
    4647:	66 8b 16 00 a7       	mov    edx,DWORD PTR ds:0xa700
    464c:	67 66 8b 45 f4       	mov    eax,DWORD PTR [ebp-0xc]
    4651:	66 01 c0             	add    eax,eax
    4654:	66 01 d0             	add    eax,edx
    4657:	67 8b 00             	mov    ax,WORD PTR [eax]
    465a:	85 c0                	test   ax,ax
    465c:	74 12                	je     4670 <_fcreate+0x44>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:461
	for (i = 0; i < LenOfFat; ++i)
    465e:	67 66 ff 45 f4       	inc    DWORD PTR [ebp-0xc]
    4663:	67 66 81 7d f4 c7 00 	cmp    DWORD PTR [ebp-0xc],0xc7
    466a:	00 00 
    466c:	7e d9                	jle    4647 <_fcreate+0x1b>
    466e:	eb 01                	jmp    4671 <_fcreate+0x45>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:464
			break;
    4670:	90                   	nop
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:466
	}
	FAT[i] = 0xffff;
    4671:	66 8b 16 00 a7       	mov    edx,DWORD PTR ds:0xa700
    4676:	67 66 8b 45 f4       	mov    eax,DWORD PTR [ebp-0xc]
    467b:	66 01 c0             	add    eax,eax
    467e:	66 01 d0             	add    eax,edx
    4681:	67 c7 00 ff ff       	mov    WORD PTR [eax],0xffff
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:468
	struct info tmp;
	strncpy(name, tmp.name, strlen(name));
    4686:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    468b:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    4690:	66 e8 e2 eb ff ff    	call   3278 <_strlen>
    4696:	67 66 89 44 24 08    	mov    DWORD PTR [esp+0x8],eax
    469c:	67 66 8d 85 20 ff ff 	lea    eax,[ebp-0xe0]
    46a3:	ff 
    46a4:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    46aa:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    46af:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    46b4:	66 e8 a4 ed ff ff    	call   345e <_strncpy>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:469
	tmp.size = 512;
    46ba:	67 66 c7 85 48 ff ff 	mov    DWORD PTR [ebp-0xb8],0x200
    46c1:	ff 00 02 00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:470
	tmp.lmaddress = (i - 1) * Cluster;
    46c6:	67 66 8b 45 f4       	mov    eax,DWORD PTR [ebp-0xc]
    46cb:	66 48                	dec    eax
    46cd:	66 c1 e0 09          	shl    eax,0x9
    46d1:	67 66 89 85 44 ff ff 	mov    DWORD PTR [ebp-0xbc],eax
    46d8:	ff 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:471
	tmp.deleted = 0;
    46d9:	67 66 c7 85 4c ff ff 	mov    DWORD PTR [ebp-0xb4],0x0
    46e0:	ff 00 00 00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:472
	tmp.start = i;
    46e5:	67 66 8b 45 f4       	mov    eax,DWORD PTR [ebp-0xc]
    46ea:	67 66 89 85 50 ff ff 	mov    DWORD PTR [ebp-0xb0],eax
    46f1:	ff 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:473
	hash(name, tmp);
    46f2:	67 66 8d 44 24 04    	lea    eax,[esp+0x4]
    46f8:	67 66 8d 95 20 ff ff 	lea    edx,[ebp-0xe0]
    46ff:	ff 
    4700:	66 b9 35 00 00 00    	mov    ecx,0x35
    4706:	66 89 c7             	mov    edi,eax
    4709:	66 89 d6             	mov    esi,edx
    470c:	66 f3 a5             	rep movs DWORD PTR es:[di],DWORD PTR ds:[si]
    470f:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    4714:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    4719:	66 e8 3a ef ff ff    	call   3659 <_hash>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:474
}
    471f:	90                   	nop
    4720:	66 81 c4 b0 01 00 00 	add    esp,0x1b0
    4727:	66 5e                	pop    esi
    4729:	66 5f                	pop    edi
    472b:	66 5d                	pop    ebp
    472d:	66 c3                	ret    

0000472f <_fdelete>:
fdelete():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:477

void fdelete(char * name)
{
    472f:	66 55                	push   ebp
    4731:	66 89 e5             	mov    ebp,esp
    4734:	66 83 ec 08          	sub    esp,0x8
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:478
	int tmp = find(name);
    4738:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    473d:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    4742:	66 e8 b8 f0 ff ff    	call   3800 <_find>
    4748:	67 66 89 45 fc       	mov    DWORD PTR [ebp-0x4],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:479
	information[tmp].deleted = 1;
    474d:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    4752:	66 89 d0             	mov    eax,edx
    4755:	66 01 c0             	add    eax,eax
    4758:	66 01 d0             	add    eax,edx
    475b:	66 c1 e0 02          	shl    eax,0x2
    475f:	66 01 d0             	add    eax,edx
    4762:	66 c1 e0 02          	shl    eax,0x2
    4766:	66 01 d0             	add    eax,edx
    4769:	66 c1 e0 02          	shl    eax,0x2
    476d:	66 05 ac bf 00 00    	add    eax,0xbfac
    4773:	67 66 c7 00 01 00 00 	mov    DWORD PTR [eax],0x1
    477a:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:487
	// {
	// 	int tmpInd = FAT[num];
	// 	FAT[num] = 0;
	// 	num = tmpInd;
	// }
}
    477b:	90                   	nop
    477c:	66 c9                	leave  
    477e:	66 c3                	ret    

00004780 <_readReal>:
readReal():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:490

int readReal(int seg, int memoryOffset, int size, int offset, char * buffer)
{
    4780:	66 55                	push   ebp
    4782:	66 89 e5             	mov    ebp,esp
    4785:	66 53                	push   ebx
    4787:	66 83 ec 18          	sub    esp,0x18
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:492
	int ds;
	__asm__("mov %ds, %eax\n");
    478b:	66 8c d8             	mov    eax,ds
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:493
	__asm__("pushl %eax");
    478e:	66 50                	push   eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:494
	__asm__("popl %0":"=m"(ds));
    4790:	67 66 8f 45 f8       	pop    DWORD PTR [ebp-0x8]
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:495
	memcpy(seg, memoryOffset + offset, ds, (int)buffer, size);
    4795:	67 66 8b 55 18       	mov    edx,DWORD PTR [ebp+0x18]
    479a:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
    479f:	67 66 8b 5d 0c       	mov    ebx,DWORD PTR [ebp+0xc]
    47a4:	67 66 8b 4d 14       	mov    ecx,DWORD PTR [ebp+0x14]
    47a9:	66 01 cb             	add    ebx,ecx
    47ac:	67 66 8b 4d 10       	mov    ecx,DWORD PTR [ebp+0x10]
    47b1:	67 66 89 4c 24 10    	mov    DWORD PTR [esp+0x10],ecx
    47b7:	67 66 89 54 24 0c    	mov    DWORD PTR [esp+0xc],edx
    47bd:	67 66 89 44 24 08    	mov    DWORD PTR [esp+0x8],eax
    47c3:	67 66 89 5c 24 04    	mov    DWORD PTR [esp+0x4],ebx
    47c9:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    47ce:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    47d3:	66 e8 61 dd ff ff    	call   253a <_memcpy>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:496
	return size;
    47d9:	67 66 8b 45 10       	mov    eax,DWORD PTR [ebp+0x10]
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:497
}
    47de:	66 83 c4 18          	add    esp,0x18
    47e2:	66 5b                	pop    ebx
    47e4:	66 5d                	pop    ebp
    47e6:	66 c3                	ret    

000047e8 <_writeReal>:
writeReal():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:500

int writeReal(int seg, int memoryOffset, int size, int offset, char * buffer)
{
    47e8:	66 55                	push   ebp
    47ea:	66 89 e5             	mov    ebp,esp
    47ed:	66 53                	push   ebx
    47ef:	66 83 ec 18          	sub    esp,0x18
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:502
	int ds;
	__asm__("mov %ds, %eax\n");
    47f3:	66 8c d8             	mov    eax,ds
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:503
	__asm__("pushl %eax");
    47f6:	66 50                	push   eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:504
	__asm__("popl %0":"=m"(ds));
    47f8:	67 66 8f 45 f8       	pop    DWORD PTR [ebp-0x8]
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:505
	memcpy(ds, (int)buffer, seg, memoryOffset + offset, size);
    47fd:	67 66 8b 55 0c       	mov    edx,DWORD PTR [ebp+0xc]
    4802:	67 66 8b 45 14       	mov    eax,DWORD PTR [ebp+0x14]
    4807:	67 66 8d 1c 02       	lea    ebx,[edx+eax*1]
    480c:	67 66 8b 55 18       	mov    edx,DWORD PTR [ebp+0x18]
    4811:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
    4816:	67 66 8b 4d 10       	mov    ecx,DWORD PTR [ebp+0x10]
    481b:	67 66 89 4c 24 10    	mov    DWORD PTR [esp+0x10],ecx
    4821:	67 66 89 5c 24 0c    	mov    DWORD PTR [esp+0xc],ebx
    4827:	67 66 8b 4d 08       	mov    ecx,DWORD PTR [ebp+0x8]
    482c:	67 66 89 4c 24 08    	mov    DWORD PTR [esp+0x8],ecx
    4832:	67 66 89 54 24 04    	mov    DWORD PTR [esp+0x4],edx
    4838:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    483d:	66 e8 f7 dc ff ff    	call   253a <_memcpy>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:506
	return size;
    4843:	67 66 8b 45 10       	mov    eax,DWORD PTR [ebp+0x10]
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:507
}
    4848:	66 83 c4 18          	add    esp,0x18
    484c:	66 5b                	pop    ebx
    484e:	66 5d                	pop    ebp
    4850:	66 c3                	ret    

00004852 <_findNextProcessItem>:
findNextProcessItem():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:514



///////////// process ////////////////
int findNextProcessItem()
{
    4852:	66 55                	push   ebp
    4854:	66 89 e5             	mov    ebp,esp
    4857:	66 83 ec 08          	sub    esp,0x8
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:515
	int id = -1;
    485b:	67 66 c7 45 fc ff ff 	mov    DWORD PTR [ebp-0x4],0xffffffff
    4862:	ff ff 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:516
	while (id == -1) {
    4864:	eb 49                	jmp    48af <_findNextProcessItem+0x5d>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:517
		int tmpProcessID = (curProcessId + 1) % Len;
    4866:	66 a1 40 e8          	mov    eax,ds:0xe840
    486a:	66 40                	inc    eax
    486c:	66 b9 14 00 00 00    	mov    ecx,0x14
    4872:	66 99                	cdq    
    4874:	66 f7 f9             	idiv   ecx
    4877:	67 66 89 55 f8       	mov    DWORD PTR [ebp-0x8],edx
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:518
		if (processTable[tmpProcessID].id == -1) {
    487c:	67 66 8b 55 f8       	mov    edx,DWORD PTR [ebp-0x8]
    4881:	66 89 d0             	mov    eax,edx
    4884:	66 c1 e0 03          	shl    eax,0x3
    4888:	66 01 d0             	add    eax,edx
    488b:	66 01 c0             	add    eax,eax
    488e:	66 01 d0             	add    eax,edx
    4891:	66 c1 e0 04          	shl    eax,0x4
    4895:	66 05 a4 d0 00 00    	add    eax,0xd0a4
    489b:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    489f:	66 83 f8 ff          	cmp    eax,0xffffffff
    48a3:	75 0a                	jne    48af <_findNextProcessItem+0x5d>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:519
			id = tmpProcessID;
    48a5:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
    48aa:	67 66 89 45 fc       	mov    DWORD PTR [ebp-0x4],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:516
	while (id == -1) {
    48af:	67 66 83 7d fc ff    	cmp    DWORD PTR [ebp-0x4],0xffffffff
    48b5:	74 af                	je     4866 <_findNextProcessItem+0x14>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:522
		}
	}
	return id;
    48b7:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:523
}
    48bc:	66 c9                	leave  
    48be:	66 c3                	ret    

000048c0 <_initialProcessTable>:
initialProcessTable():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:527


void initialProcessTable()
{
    48c0:	66 55                	push   ebp
    48c2:	66 89 e5             	mov    ebp,esp
    48c5:	66 83 ec 14          	sub    esp,0x14
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:528
	for (int i = 0; i < Len; ++i)
    48c9:	67 66 c7 45 fc 00 00 	mov    DWORD PTR [ebp-0x4],0x0
    48d0:	00 00 
    48d2:	e9 12 01             	jmp    49e7 <_initialProcessTable+0x127>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:530
	{
		processTable[i].id = -1;
    48d5:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    48da:	66 89 d0             	mov    eax,edx
    48dd:	66 c1 e0 03          	shl    eax,0x3
    48e1:	66 01 d0             	add    eax,edx
    48e4:	66 01 c0             	add    eax,eax
    48e7:	66 01 d0             	add    eax,edx
    48ea:	66 c1 e0 04          	shl    eax,0x4
    48ee:	66 05 a4 d0 00 00    	add    eax,0xd0a4
    48f4:	67 66 c7 00 ff ff ff 	mov    DWORD PTR [eax],0xffffffff
    48fb:	ff 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:531
		processTable[i].status = Origin;
    48fc:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    4901:	66 89 d0             	mov    eax,edx
    4904:	66 c1 e0 03          	shl    eax,0x3
    4908:	66 01 d0             	add    eax,edx
    490b:	66 01 c0             	add    eax,eax
    490e:	66 01 d0             	add    eax,edx
    4911:	66 c1 e0 04          	shl    eax,0x4
    4915:	66 05 ac d1 00 00    	add    eax,0xd1ac
    491b:	67 66 c7 00 00 00 00 	mov    DWORD PTR [eax],0x0
    4922:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:532
		processTable[i].fatherID = -1;
    4923:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    4928:	66 89 d0             	mov    eax,edx
    492b:	66 c1 e0 03          	shl    eax,0x3
    492f:	66 01 d0             	add    eax,edx
    4932:	66 01 c0             	add    eax,eax
    4935:	66 01 d0             	add    eax,edx
    4938:	66 c1 e0 04          	shl    eax,0x4
    493c:	66 05 d8 d0 00 00    	add    eax,0xd0d8
    4942:	67 66 c7 00 ff ff ff 	mov    DWORD PTR [eax],0xffffffff
    4949:	ff 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:533
		processTable[i].sonID = -1;
    494a:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    494f:	66 89 d0             	mov    eax,edx
    4952:	66 c1 e0 03          	shl    eax,0x3
    4956:	66 01 d0             	add    eax,edx
    4959:	66 01 c0             	add    eax,eax
    495c:	66 01 d0             	add    eax,edx
    495f:	66 c1 e0 04          	shl    eax,0x4
    4963:	66 05 e0 d0 00 00    	add    eax,0xd0e0
    4969:	67 66 c7 00 ff ff ff 	mov    DWORD PTR [eax],0xffffffff
    4970:	ff 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:534
		processTable[i].waitProcess = -1;
    4971:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    4976:	66 89 d0             	mov    eax,edx
    4979:	66 c1 e0 03          	shl    eax,0x3
    497d:	66 01 d0             	add    eax,edx
    4980:	66 01 c0             	add    eax,eax
    4983:	66 01 d0             	add    eax,edx
    4986:	66 c1 e0 04          	shl    eax,0x4
    498a:	66 05 dc d0 00 00    	add    eax,0xd0dc
    4990:	67 66 c7 00 ff ff ff 	mov    DWORD PTR [eax],0xffffffff
    4997:	ff 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:535
		for (int j = 0; j < HeapLimit; ++j)
    4998:	67 66 c7 45 f8 00 00 	mov    DWORD PTR [ebp-0x8],0x0
    499f:	00 00 
    49a1:	eb 37                	jmp    49da <_initialProcessTable+0x11a>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:537
		{
			processTable[i].heapArray[j] = -1;
    49a3:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    49a8:	66 89 d0             	mov    eax,edx
    49ab:	66 c1 e0 03          	shl    eax,0x3
    49af:	66 01 d0             	add    eax,edx
    49b2:	66 01 c0             	add    eax,eax
    49b5:	66 01 d0             	add    eax,edx
    49b8:	66 c1 e0 02          	shl    eax,0x2
    49bc:	67 66 8b 55 f8       	mov    edx,DWORD PTR [ebp-0x8]
    49c1:	66 01 d0             	add    eax,edx
    49c4:	66 83 c0 18          	add    eax,0x18
    49c8:	67 66 c7 04 85 84 d0 	mov    DWORD PTR [eax*4+0xd084],0xffffffff
    49cf:	00 00 ff ff ff ff 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:535
		for (int j = 0; j < HeapLimit; ++j)
    49d5:	67 66 ff 45 f8       	inc    DWORD PTR [ebp-0x8]
    49da:	67 66 83 7d f8 04    	cmp    DWORD PTR [ebp-0x8],0x4
    49e0:	7e c1                	jle    49a3 <_initialProcessTable+0xe3>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:528
	for (int i = 0; i < Len; ++i)
    49e2:	67 66 ff 45 fc       	inc    DWORD PTR [ebp-0x4]
    49e7:	67 66 83 7d fc 13    	cmp    DWORD PTR [ebp-0x4],0x13
    49ed:	0f 8e e4 fe          	jle    48d5 <_initialProcessTable+0x15>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:542
		}

	}

	processTable[0].status = running;
    49f1:	66 c7 06 ac d1 02 00 	mov    DWORD PTR ds:0xd1ac,0x2
    49f8:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:543
	strncpy("kernel", processTable[0].name, 6);
    49fa:	67 66 c7 44 24 08 06 	mov    DWORD PTR [esp+0x8],0x6
    4a01:	00 00 00 
    4a04:	67 66 c7 44 24 04 b4 	mov    DWORD PTR [esp+0x4],0xd0b4
    4a0b:	d0 00 00 
    4a0e:	67 66 c7 04 24 f0 80 	mov    DWORD PTR [esp],0x80f0
    4a15:	00 00 
    4a17:	66 e8 41 ea ff ff    	call   345e <_strncpy>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:544
	processTable[0].id = 0;
    4a1d:	66 c7 06 a4 d0 00 00 	mov    DWORD PTR ds:0xd0a4,0x0
    4a24:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:545
	processTable[0].pcb.cs = 0x2000;
    4a26:	c7 06 9a d0 00 20    	mov    WORD PTR ds:0xd09a,0x2000
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:546
	processTable[0].pcb.ip = 0x0;
    4a2c:	c7 06 98 d0 00 00    	mov    WORD PTR ds:0xd098,0x0
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:547
	processTable[0].pcb.ss_now = 0x2000;
    4a32:	c7 06 a0 d0 00 20    	mov    WORD PTR ds:0xd0a0,0x2000
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:548
	processTable[0].pcb.sp_now = 0xffff;
    4a38:	c7 06 9e d0 ff ff    	mov    WORD PTR ds:0xd09e,0xffff
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:550
	// curProcessId = 1;
}
    4a3e:	90                   	nop
    4a3f:	66 c9                	leave  
    4a41:	66 c3                	ret    

00004a43 <_createProcess>:
createProcess():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:555


//size要包括栈的大小
void createProcess(int id, char * name, int size, int cs, int ip, int ss, int sp, int blockNum)
{
    4a43:	66 55                	push   ebp
    4a45:	66 89 e5             	mov    ebp,esp
    4a48:	66 83 ec 0c          	sub    esp,0xc
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:556
	processTable[id].id = id;
    4a4c:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    4a51:	66 89 d0             	mov    eax,edx
    4a54:	66 c1 e0 03          	shl    eax,0x3
    4a58:	66 01 d0             	add    eax,edx
    4a5b:	66 01 c0             	add    eax,eax
    4a5e:	66 01 d0             	add    eax,edx
    4a61:	66 c1 e0 04          	shl    eax,0x4
    4a65:	67 66 8d 90 a4 d0 00 	lea    edx,[eax+0xd0a4]
    4a6c:	00 
    4a6d:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    4a72:	67 66 89 02          	mov    DWORD PTR [edx],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:557
	processTable[id].status = ready;
    4a76:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    4a7b:	66 89 d0             	mov    eax,edx
    4a7e:	66 c1 e0 03          	shl    eax,0x3
    4a82:	66 01 d0             	add    eax,edx
    4a85:	66 01 c0             	add    eax,eax
    4a88:	66 01 d0             	add    eax,edx
    4a8b:	66 c1 e0 04          	shl    eax,0x4
    4a8f:	66 05 ac d1 00 00    	add    eax,0xd1ac
    4a95:	67 66 c7 00 01 00 00 	mov    DWORD PTR [eax],0x1
    4a9c:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:560
	// int blockNum = findEnoughBlock(size);
	// blockNum = require(size, blockNum);
	processTable[id].blockNum = blockNum;
    4a9d:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    4aa2:	66 89 d0             	mov    eax,edx
    4aa5:	66 c1 e0 03          	shl    eax,0x3
    4aa9:	66 01 d0             	add    eax,edx
    4aac:	66 01 c0             	add    eax,eax
    4aaf:	66 01 d0             	add    eax,edx
    4ab2:	66 c1 e0 04          	shl    eax,0x4
    4ab6:	67 66 8d 90 a8 d0 00 	lea    edx,[eax+0xd0a8]
    4abd:	00 
    4abe:	67 66 8b 45 24       	mov    eax,DWORD PTR [ebp+0x24]
    4ac3:	67 66 89 02          	mov    DWORD PTR [edx],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:561
	strncpy(name, processTable[id].name, strlen(name));
    4ac7:	67 66 8b 45 0c       	mov    eax,DWORD PTR [ebp+0xc]
    4acc:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    4ad1:	66 e8 a1 e7 ff ff    	call   3278 <_strlen>
    4ad7:	66 89 c1             	mov    ecx,eax
    4ada:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    4adf:	66 89 d0             	mov    eax,edx
    4ae2:	66 c1 e0 03          	shl    eax,0x3
    4ae6:	66 01 d0             	add    eax,edx
    4ae9:	66 01 c0             	add    eax,eax
    4aec:	66 01 d0             	add    eax,edx
    4aef:	66 c1 e0 04          	shl    eax,0x4
    4af3:	66 83 c0 30          	add    eax,0x30
    4af7:	66 05 80 d0 00 00    	add    eax,0xd080
    4afd:	66 83 c0 04          	add    eax,0x4
    4b01:	67 66 89 4c 24 08    	mov    DWORD PTR [esp+0x8],ecx
    4b07:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    4b0d:	67 66 8b 45 0c       	mov    eax,DWORD PTR [ebp+0xc]
    4b12:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    4b17:	66 e8 41 e9 ff ff    	call   345e <_strncpy>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:573
	//以下部分代码取巧，方法是直接改变cs和ss段（加上偏移量右移4位的值）以使得程序（org 0h）不需要org偏移量。
	// processTable[id].pcb.cs = segOfPrg + (offsetOfPrg >> 4);
	// processTable[id].pcb.ip = 0;
	// processTable[id].pcb.ss_now = segOfPrg + (offsetOfPrg >> 4);
	// processTable[id].pcb.sp_now = size-1;
	processTable[id].pcb.cs = cs;
    4b1d:	67 66 8b 45 14       	mov    eax,DWORD PTR [ebp+0x14]
    4b22:	66 89 c1             	mov    ecx,eax
    4b25:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    4b2a:	66 89 d0             	mov    eax,edx
    4b2d:	66 c1 e0 03          	shl    eax,0x3
    4b31:	66 01 d0             	add    eax,edx
    4b34:	66 01 c0             	add    eax,eax
    4b37:	66 01 d0             	add    eax,edx
    4b3a:	66 c1 e0 04          	shl    eax,0x4
    4b3e:	66 05 9a d0 00 00    	add    eax,0xd09a
    4b44:	67 89 08             	mov    WORD PTR [eax],cx
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:574
	processTable[id].pcb.ip = ip;
    4b47:	67 66 8b 45 18       	mov    eax,DWORD PTR [ebp+0x18]
    4b4c:	66 89 c1             	mov    ecx,eax
    4b4f:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    4b54:	66 89 d0             	mov    eax,edx
    4b57:	66 c1 e0 03          	shl    eax,0x3
    4b5b:	66 01 d0             	add    eax,edx
    4b5e:	66 01 c0             	add    eax,eax
    4b61:	66 01 d0             	add    eax,edx
    4b64:	66 c1 e0 04          	shl    eax,0x4
    4b68:	66 05 98 d0 00 00    	add    eax,0xd098
    4b6e:	67 89 08             	mov    WORD PTR [eax],cx
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:575
	processTable[id].pcb.ss_now = ss;
    4b71:	67 66 8b 45 1c       	mov    eax,DWORD PTR [ebp+0x1c]
    4b76:	66 89 c1             	mov    ecx,eax
    4b79:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    4b7e:	66 89 d0             	mov    eax,edx
    4b81:	66 c1 e0 03          	shl    eax,0x3
    4b85:	66 01 d0             	add    eax,edx
    4b88:	66 01 c0             	add    eax,eax
    4b8b:	66 01 d0             	add    eax,edx
    4b8e:	66 c1 e0 04          	shl    eax,0x4
    4b92:	66 05 a0 d0 00 00    	add    eax,0xd0a0
    4b98:	67 89 08             	mov    WORD PTR [eax],cx
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:576
	processTable[id].pcb.sp_now = sp;
    4b9b:	67 66 8b 45 20       	mov    eax,DWORD PTR [ebp+0x20]
    4ba0:	66 89 c1             	mov    ecx,eax
    4ba3:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    4ba8:	66 89 d0             	mov    eax,edx
    4bab:	66 c1 e0 03          	shl    eax,0x3
    4baf:	66 01 d0             	add    eax,edx
    4bb2:	66 01 c0             	add    eax,eax
    4bb5:	66 01 d0             	add    eax,edx
    4bb8:	66 c1 e0 04          	shl    eax,0x4
    4bbc:	66 05 9e d0 00 00    	add    eax,0xd09e
    4bc2:	67 89 08             	mov    WORD PTR [eax],cx
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:577
	processTable[id].size = size;
    4bc5:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    4bca:	66 89 d0             	mov    eax,edx
    4bcd:	66 c1 e0 03          	shl    eax,0x3
    4bd1:	66 01 d0             	add    eax,edx
    4bd4:	66 01 c0             	add    eax,eax
    4bd7:	66 01 d0             	add    eax,edx
    4bda:	66 c1 e0 04          	shl    eax,0x4
    4bde:	67 66 8d 90 b0 d0 00 	lea    edx,[eax+0xd0b0]
    4be5:	00 
    4be6:	67 66 8b 45 10       	mov    eax,DWORD PTR [ebp+0x10]
    4beb:	67 66 89 02          	mov    DWORD PTR [edx],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:579
	// loadReal(lmaddress, fileSize, offsetOfPrg, segOfPrg);
}
    4bef:	90                   	nop
    4bf0:	66 c9                	leave  
    4bf2:	66 c3                	ret    

00004bf4 <_block>:
block():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:584

// 被内核阻塞的 waitProcess = -1
int quesize, tmp;
void block(int id)
{
    4bf4:	66 55                	push   ebp
    4bf6:	66 89 e5             	mov    ebp,esp
    4bf9:	66 83 ec 0c          	sub    esp,0xc
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:585
	__asm__("cli\n");
    4bfd:	fa                   	cli    
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:586
	processTable[id].status = blocked;
    4bfe:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    4c03:	66 89 d0             	mov    eax,edx
    4c06:	66 c1 e0 03          	shl    eax,0x3
    4c0a:	66 01 d0             	add    eax,edx
    4c0d:	66 01 c0             	add    eax,eax
    4c10:	66 01 d0             	add    eax,edx
    4c13:	66 c1 e0 04          	shl    eax,0x4
    4c17:	66 05 ac d1 00 00    	add    eax,0xd1ac
    4c1d:	67 66 c7 00 03 00 00 	mov    DWORD PTR [eax],0x3
    4c24:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:587
	enqueue(&BlockedQue, id);
    4c25:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    4c2a:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    4c30:	67 66 c7 04 24 a0 a6 	mov    DWORD PTR [esp],0xa6a0
    4c37:	00 00 
    4c39:	66 e8 0f 29 00 00    	call   754e <_enqueue>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:588
	quesize = size(&ReadyQue);
    4c3f:	67 66 c7 04 24 60 e8 	mov    DWORD PTR [esp],0xe860
    4c46:	00 00 
    4c48:	66 e8 ba 28 00 00    	call   7508 <_size>
    4c4e:	66 a3 c0 e8          	mov    ds:0xe8c0,eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:589
	for (int i = 0; i < quesize; ++i)
    4c52:	67 66 c7 45 fc 00 00 	mov    DWORD PTR [ebp-0x4],0x0
    4c59:	00 00 
    4c5b:	eb 42                	jmp    4c9f <_block+0xab>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:591
	{
		dequeue(&ReadyQue, &tmp);
    4c5d:	67 66 c7 44 24 04 c8 	mov    DWORD PTR [esp+0x4],0xe8c8
    4c64:	e8 00 00 
    4c67:	67 66 c7 04 24 60 e8 	mov    DWORD PTR [esp],0xe860
    4c6e:	00 00 
    4c70:	66 e8 45 29 00 00    	call   75bb <_dequeue>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:592
		if (id != tmp)
    4c76:	66 a1 c8 e8          	mov    eax,ds:0xe8c8
    4c7a:	67 66 39 45 08       	cmp    DWORD PTR [ebp+0x8],eax
    4c7f:	74 19                	je     4c9a <_block+0xa6>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:593
			enqueue(&ReadyQue, tmp);
    4c81:	66 a1 c8 e8          	mov    eax,ds:0xe8c8
    4c85:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    4c8b:	67 66 c7 04 24 60 e8 	mov    DWORD PTR [esp],0xe860
    4c92:	00 00 
    4c94:	66 e8 b4 28 00 00    	call   754e <_enqueue>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:589
	for (int i = 0; i < quesize; ++i)
    4c9a:	67 66 ff 45 fc       	inc    DWORD PTR [ebp-0x4]
    4c9f:	66 a1 c0 e8          	mov    eax,ds:0xe8c0
    4ca3:	67 66 39 45 fc       	cmp    DWORD PTR [ebp-0x4],eax
    4ca8:	7c b3                	jl     4c5d <_block+0x69>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:595
	}
	__asm__("sti\n");
    4caa:	fb                   	sti    
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:596
}
    4cab:	90                   	nop
    4cac:	66 c9                	leave  
    4cae:	66 c3                	ret    

00004cb0 <_wakeup>:
wakeup():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:599

void wakeup(int id)
{
    4cb0:	66 55                	push   ebp
    4cb2:	66 89 e5             	mov    ebp,esp
    4cb5:	66 83 ec 0c          	sub    esp,0xc
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:600
	__asm__("cli\n");
    4cb9:	fa                   	cli    
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:601
	processTable[id].status = ready;
    4cba:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    4cbf:	66 89 d0             	mov    eax,edx
    4cc2:	66 c1 e0 03          	shl    eax,0x3
    4cc6:	66 01 d0             	add    eax,edx
    4cc9:	66 01 c0             	add    eax,eax
    4ccc:	66 01 d0             	add    eax,edx
    4ccf:	66 c1 e0 04          	shl    eax,0x4
    4cd3:	66 05 ac d1 00 00    	add    eax,0xd1ac
    4cd9:	67 66 c7 00 01 00 00 	mov    DWORD PTR [eax],0x1
    4ce0:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:602
	enqueue(&ReadyQue, id);
    4ce1:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    4ce6:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    4cec:	67 66 c7 04 24 60 e8 	mov    DWORD PTR [esp],0xe860
    4cf3:	00 00 
    4cf5:	66 e8 53 28 00 00    	call   754e <_enqueue>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:603
	quesize = size(&BlockedQue);
    4cfb:	67 66 c7 04 24 a0 a6 	mov    DWORD PTR [esp],0xa6a0
    4d02:	00 00 
    4d04:	66 e8 fe 27 00 00    	call   7508 <_size>
    4d0a:	66 a3 c0 e8          	mov    ds:0xe8c0,eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:604
	for (int i = 0; i < quesize; ++i)
    4d0e:	67 66 c7 45 fc 00 00 	mov    DWORD PTR [ebp-0x4],0x0
    4d15:	00 00 
    4d17:	eb 42                	jmp    4d5b <_wakeup+0xab>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:606
	{
		dequeue(&BlockedQue, &tmp);
    4d19:	67 66 c7 44 24 04 c8 	mov    DWORD PTR [esp+0x4],0xe8c8
    4d20:	e8 00 00 
    4d23:	67 66 c7 04 24 a0 a6 	mov    DWORD PTR [esp],0xa6a0
    4d2a:	00 00 
    4d2c:	66 e8 89 28 00 00    	call   75bb <_dequeue>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:607
		if (id != tmp)
    4d32:	66 a1 c8 e8          	mov    eax,ds:0xe8c8
    4d36:	67 66 39 45 08       	cmp    DWORD PTR [ebp+0x8],eax
    4d3b:	74 19                	je     4d56 <_wakeup+0xa6>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:608
			enqueue(&BlockedQue, tmp);
    4d3d:	66 a1 c8 e8          	mov    eax,ds:0xe8c8
    4d41:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    4d47:	67 66 c7 04 24 a0 a6 	mov    DWORD PTR [esp],0xa6a0
    4d4e:	00 00 
    4d50:	66 e8 f8 27 00 00    	call   754e <_enqueue>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:604
	for (int i = 0; i < quesize; ++i)
    4d56:	67 66 ff 45 fc       	inc    DWORD PTR [ebp-0x4]
    4d5b:	66 a1 c0 e8          	mov    eax,ds:0xe8c0
    4d5f:	67 66 39 45 fc       	cmp    DWORD PTR [ebp-0x4],eax
    4d64:	7c b3                	jl     4d19 <_wakeup+0x69>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:610
	}
	__asm__("sti\n");
    4d66:	fb                   	sti    
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:611
}
    4d67:	90                   	nop
    4d68:	66 c9                	leave  
    4d6a:	66 c3                	ret    

00004d6c <_schedule>:
schedule():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:617

// 注意当前的状态，画出队列图？
// 当前状态可能是running或blocked
int next;
void schedule()
{
    4d6c:	66 55                	push   ebp
    4d6e:	66 89 e5             	mov    ebp,esp
    4d71:	66 83 ec 0c          	sub    esp,0xc
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:618
	int i = 0;
    4d75:	67 66 c7 45 fc 00 00 	mov    DWORD PTR [ebp-0x4],0x0
    4d7c:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:619
	if (runSub == 1 && size(&ReadyQue) > 1)
    4d7e:	66 a1 d8 a2          	mov    eax,ds:0xa2d8
    4d82:	66 83 f8 01          	cmp    eax,0x1
    4d86:	0f 85 f6 00          	jne    4e80 <_schedule+0x114>
    4d8a:	67 66 c7 04 24 60 e8 	mov    DWORD PTR [esp],0xe860
    4d91:	00 00 
    4d93:	66 e8 6f 27 00 00    	call   7508 <_size>
    4d99:	66 83 f8 01          	cmp    eax,0x1
    4d9d:	0f 8e df 00          	jle    4e80 <_schedule+0x114>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:623
	{
		// 注意区分状态
		do {
			dequeue(&ReadyQue, &next);
    4da1:	67 66 c7 44 24 04 08 	mov    DWORD PTR [esp+0x4],0xe908
    4da8:	e9 00 00 
    4dab:	67 66 c7 04 24 60 e8 	mov    DWORD PTR [esp],0xe860
    4db2:	00 00 
    4db4:	66 e8 01 28 00 00    	call   75bb <_dequeue>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:624
			if (next == 0) {
    4dba:	66 a1 08 e9          	mov    eax,ds:0xe908
    4dbe:	66 85 c0             	test   eax,eax
    4dc1:	75 19                	jne    4ddc <_schedule+0x70>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:625
				enqueue(&ReadyQue, next);
    4dc3:	66 a1 08 e9          	mov    eax,ds:0xe908
    4dc7:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    4dcd:	67 66 c7 04 24 60 e8 	mov    DWORD PTR [esp],0xe860
    4dd4:	00 00 
    4dd6:	66 e8 72 27 00 00    	call   754e <_enqueue>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:627
			}
		} while (next == 0);
    4ddc:	66 a1 08 e9          	mov    eax,ds:0xe908
    4de0:	66 85 c0             	test   eax,eax
    4de3:	74 bc                	je     4da1 <_schedule+0x35>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:628
		processTable[next].status = running;
    4de5:	66 8b 16 08 e9       	mov    edx,DWORD PTR ds:0xe908
    4dea:	66 89 d0             	mov    eax,edx
    4ded:	66 c1 e0 03          	shl    eax,0x3
    4df1:	66 01 d0             	add    eax,edx
    4df4:	66 01 c0             	add    eax,eax
    4df7:	66 01 d0             	add    eax,edx
    4dfa:	66 c1 e0 04          	shl    eax,0x4
    4dfe:	66 05 ac d1 00 00    	add    eax,0xd1ac
    4e04:	67 66 c7 00 02 00 00 	mov    DWORD PTR [eax],0x2
    4e0b:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:629
		if (processTable[curProcessId].status == running) {
    4e0c:	66 8b 16 40 e8       	mov    edx,DWORD PTR ds:0xe840
    4e11:	66 89 d0             	mov    eax,edx
    4e14:	66 c1 e0 03          	shl    eax,0x3
    4e18:	66 01 d0             	add    eax,edx
    4e1b:	66 01 c0             	add    eax,eax
    4e1e:	66 01 d0             	add    eax,edx
    4e21:	66 c1 e0 04          	shl    eax,0x4
    4e25:	66 05 ac d1 00 00    	add    eax,0xd1ac
    4e2b:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    4e2f:	66 83 f8 02          	cmp    eax,0x2
    4e33:	75 40                	jne    4e75 <_schedule+0x109>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:630
			processTable[curProcessId].status = ready;
    4e35:	66 8b 16 40 e8       	mov    edx,DWORD PTR ds:0xe840
    4e3a:	66 89 d0             	mov    eax,edx
    4e3d:	66 c1 e0 03          	shl    eax,0x3
    4e41:	66 01 d0             	add    eax,edx
    4e44:	66 01 c0             	add    eax,eax
    4e47:	66 01 d0             	add    eax,edx
    4e4a:	66 c1 e0 04          	shl    eax,0x4
    4e4e:	66 05 ac d1 00 00    	add    eax,0xd1ac
    4e54:	67 66 c7 00 01 00 00 	mov    DWORD PTR [eax],0x1
    4e5b:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:631
			enqueue(&ReadyQue, curProcessId);
    4e5c:	66 a1 40 e8          	mov    eax,ds:0xe840
    4e60:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    4e66:	67 66 c7 04 24 60 e8 	mov    DWORD PTR [esp],0xe860
    4e6d:	00 00 
    4e6f:	66 e8 d9 26 00 00    	call   754e <_enqueue>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:633
		}
		curProcessId = next;
    4e75:	66 a1 08 e9          	mov    eax,ds:0xe908
    4e79:	66 a3 40 e8          	mov    ds:0xe840,eax
    4e7d:	e9 36 01             	jmp    4fb6 <_schedule+0x24a>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:635
	}
	else if (runSub == 1 && size(&ReadyQue) == 1)
    4e80:	66 a1 d8 a2          	mov    eax,ds:0xa2d8
    4e84:	66 83 f8 01          	cmp    eax,0x1
    4e88:	0f 85 fa 00          	jne    4f86 <_schedule+0x21a>
    4e8c:	67 66 c7 04 24 60 e8 	mov    DWORD PTR [esp],0xe860
    4e93:	00 00 
    4e95:	66 e8 6d 26 00 00    	call   7508 <_size>
    4e9b:	66 83 f8 01          	cmp    eax,0x1
    4e9f:	0f 85 e3 00          	jne    4f86 <_schedule+0x21a>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:638
	{
		// 从ring0到ring1，从ring1到ring0不同
		dequeue(&ReadyQue, &next);
    4ea3:	67 66 c7 44 24 04 08 	mov    DWORD PTR [esp+0x4],0xe908
    4eaa:	e9 00 00 
    4ead:	67 66 c7 04 24 60 e8 	mov    DWORD PTR [esp],0xe860
    4eb4:	00 00 
    4eb6:	66 e8 ff 26 00 00    	call   75bb <_dequeue>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:639
		if (next != 0) {
    4ebc:	66 a1 08 e9          	mov    eax,ds:0xe908
    4ec0:	66 85 c0             	test   eax,eax
    4ec3:	74 4b                	je     4f10 <_schedule+0x1a4>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:640
			processTable[next].status = running;
    4ec5:	66 8b 16 08 e9       	mov    edx,DWORD PTR ds:0xe908
    4eca:	66 89 d0             	mov    eax,edx
    4ecd:	66 c1 e0 03          	shl    eax,0x3
    4ed1:	66 01 d0             	add    eax,edx
    4ed4:	66 01 c0             	add    eax,eax
    4ed7:	66 01 d0             	add    eax,edx
    4eda:	66 c1 e0 04          	shl    eax,0x4
    4ede:	66 05 ac d1 00 00    	add    eax,0xd1ac
    4ee4:	67 66 c7 00 02 00 00 	mov    DWORD PTR [eax],0x2
    4eeb:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:641
			enqueue(&ReadyQue, curProcessId);
    4eec:	66 a1 40 e8          	mov    eax,ds:0xe840
    4ef0:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    4ef6:	67 66 c7 04 24 60 e8 	mov    DWORD PTR [esp],0xe860
    4efd:	00 00 
    4eff:	66 e8 49 26 00 00    	call   754e <_enqueue>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:642
			curProcessId = next;
    4f05:	66 a1 08 e9          	mov    eax,ds:0xe908
    4f09:	66 a3 40 e8          	mov    ds:0xe840,eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:639
		if (next != 0) {
    4f0d:	e9 a6 00             	jmp    4fb6 <_schedule+0x24a>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:643
		} else if (processTable[curProcessId].status == running) {
    4f10:	66 8b 16 40 e8       	mov    edx,DWORD PTR ds:0xe840
    4f15:	66 89 d0             	mov    eax,edx
    4f18:	66 c1 e0 03          	shl    eax,0x3
    4f1c:	66 01 d0             	add    eax,edx
    4f1f:	66 01 c0             	add    eax,eax
    4f22:	66 01 d0             	add    eax,edx
    4f25:	66 c1 e0 04          	shl    eax,0x4
    4f29:	66 05 ac d1 00 00    	add    eax,0xd1ac
    4f2f:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    4f33:	66 83 f8 02          	cmp    eax,0x2
    4f37:	75 1b                	jne    4f54 <_schedule+0x1e8>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:644
			enqueue(&ReadyQue, next);
    4f39:	66 a1 08 e9          	mov    eax,ds:0xe908
    4f3d:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    4f43:	67 66 c7 04 24 60 e8 	mov    DWORD PTR [esp],0xe860
    4f4a:	00 00 
    4f4c:	66 e8 fc 25 00 00    	call   754e <_enqueue>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:639
		if (next != 0) {
    4f52:	eb 62                	jmp    4fb6 <_schedule+0x24a>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:646
		} else {
			curProcessId = 0;
    4f54:	66 c7 06 40 e8 00 00 	mov    DWORD PTR ds:0xe840,0x0
    4f5b:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:647
			processTable[curProcessId].status = running;
    4f5d:	66 8b 16 40 e8       	mov    edx,DWORD PTR ds:0xe840
    4f62:	66 89 d0             	mov    eax,edx
    4f65:	66 c1 e0 03          	shl    eax,0x3
    4f69:	66 01 d0             	add    eax,edx
    4f6c:	66 01 c0             	add    eax,eax
    4f6f:	66 01 d0             	add    eax,edx
    4f72:	66 c1 e0 04          	shl    eax,0x4
    4f76:	66 05 ac d1 00 00    	add    eax,0xd1ac
    4f7c:	67 66 c7 00 02 00 00 	mov    DWORD PTR [eax],0x2
    4f83:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:639
		if (next != 0) {
    4f84:	eb 30                	jmp    4fb6 <_schedule+0x24a>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:652
		}
	}
	else
	{
		curProcessId = 0;
    4f86:	66 c7 06 40 e8 00 00 	mov    DWORD PTR ds:0xe840,0x0
    4f8d:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:653
		processTable[curProcessId].status = running;
    4f8f:	66 8b 16 40 e8       	mov    edx,DWORD PTR ds:0xe840
    4f94:	66 89 d0             	mov    eax,edx
    4f97:	66 c1 e0 03          	shl    eax,0x3
    4f9b:	66 01 d0             	add    eax,edx
    4f9e:	66 01 c0             	add    eax,eax
    4fa1:	66 01 d0             	add    eax,edx
    4fa4:	66 c1 e0 04          	shl    eax,0x4
    4fa8:	66 05 ac d1 00 00    	add    eax,0xd1ac
    4fae:	67 66 c7 00 02 00 00 	mov    DWORD PTR [eax],0x2
    4fb5:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:655
	}
}
    4fb6:	90                   	nop
    4fb7:	66 c9                	leave  
    4fb9:	66 c3                	ret    

00004fbb <_do_fork>:
do_fork():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:662

//记得关中断
//进来之前已经save自己，出去之后restart到另外的进程
char name[40];
void do_fork()
{
    4fbb:	66 55                	push   ebp
    4fbd:	66 89 e5             	mov    ebp,esp
    4fc0:	66 83 ec 48          	sub    esp,0x48
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:663
	int stackSize = 0x300;
    4fc4:	67 66 c7 45 fc 00 03 	mov    DWORD PTR [ebp-0x4],0x300
    4fcb:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:664
	strncpy(processTable[curProcessId].name, name, strlen(processTable[curProcessId].name));
    4fcd:	66 8b 16 40 e8       	mov    edx,DWORD PTR ds:0xe840
    4fd2:	66 89 d0             	mov    eax,edx
    4fd5:	66 c1 e0 03          	shl    eax,0x3
    4fd9:	66 01 d0             	add    eax,edx
    4fdc:	66 01 c0             	add    eax,eax
    4fdf:	66 01 d0             	add    eax,edx
    4fe2:	66 c1 e0 04          	shl    eax,0x4
    4fe6:	66 83 c0 30          	add    eax,0x30
    4fea:	66 05 80 d0 00 00    	add    eax,0xd080
    4ff0:	66 83 c0 04          	add    eax,0x4
    4ff4:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    4ff9:	66 e8 79 e2 ff ff    	call   3278 <_strlen>
    4fff:	66 89 c1             	mov    ecx,eax
    5002:	66 8b 16 40 e8       	mov    edx,DWORD PTR ds:0xe840
    5007:	66 89 d0             	mov    eax,edx
    500a:	66 c1 e0 03          	shl    eax,0x3
    500e:	66 01 d0             	add    eax,edx
    5011:	66 01 c0             	add    eax,eax
    5014:	66 01 d0             	add    eax,edx
    5017:	66 c1 e0 04          	shl    eax,0x4
    501b:	66 83 c0 30          	add    eax,0x30
    501f:	66 05 80 d0 00 00    	add    eax,0xd080
    5025:	66 83 c0 04          	add    eax,0x4
    5029:	67 66 89 4c 24 08    	mov    DWORD PTR [esp+0x8],ecx
    502f:	67 66 c7 44 24 04 e0 	mov    DWORD PTR [esp+0x4],0xe8e0
    5036:	e8 00 00 
    5039:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    503e:	66 e8 1a e4 ff ff    	call   345e <_strncpy>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:665
	concate(name, "Sub");
    5044:	67 66 c7 44 24 04 f7 	mov    DWORD PTR [esp+0x4],0x80f7
    504b:	80 00 00 
    504e:	67 66 c7 04 24 e0 e8 	mov    DWORD PTR [esp],0xe8e0
    5055:	00 00 
    5057:	66 e8 51 e2 ff ff    	call   32ae <_concate>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:666
	int blockNum = findEnoughBlock(stackSize);
    505d:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
    5062:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    5067:	66 e8 cf 1c 00 00    	call   6d3c <_findEnoughBlock>
    506d:	67 66 89 45 f8       	mov    DWORD PTR [ebp-0x8],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:667
	blockNum = require(stackSize, blockNum);
    5072:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
    5077:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    507d:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
    5082:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    5087:	66 e8 58 1d 00 00    	call   6de5 <_require>
    508d:	67 66 89 45 f8       	mov    DWORD PTR [ebp-0x8],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:669
	int segOfSour, segOfDes;
	int segMask = 0xf0000;
    5092:	67 66 c7 45 f4 00 00 	mov    DWORD PTR [ebp-0xc],0xf0000
    5099:	0f 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:670
	int offsetMask = 0x0000ffff;
    509b:	67 66 c7 45 f0 ff ff 	mov    DWORD PTR [ebp-0x10],0xffff
    50a2:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:671
	segOfDes = (memoryTable[blockNum].beginAddr & segMask) >> 4;
    50a4:	67 66 8b 55 f8       	mov    edx,DWORD PTR [ebp-0x8]
    50a9:	66 89 d0             	mov    eax,edx
    50ac:	66 01 c0             	add    eax,eax
    50af:	66 01 d0             	add    eax,edx
    50b2:	66 c1 e0 03          	shl    eax,0x3
    50b6:	66 05 e0 a2 00 00    	add    eax,0xa2e0
    50bc:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    50c0:	67 66 23 45 f4       	and    eax,DWORD PTR [ebp-0xc]
    50c5:	66 c1 f8 04          	sar    eax,0x4
    50c9:	67 66 89 45 ec       	mov    DWORD PTR [ebp-0x14],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:672
	segOfSour = ((memoryTable[processTable[curProcessId].blockNum].endAddr - stackSize + 1) & segMask) >> 4;
    50ce:	66 8b 16 40 e8       	mov    edx,DWORD PTR ds:0xe840
    50d3:	66 89 d0             	mov    eax,edx
    50d6:	66 c1 e0 03          	shl    eax,0x3
    50da:	66 01 d0             	add    eax,edx
    50dd:	66 01 c0             	add    eax,eax
    50e0:	66 01 d0             	add    eax,edx
    50e3:	66 c1 e0 04          	shl    eax,0x4
    50e7:	66 05 a8 d0 00 00    	add    eax,0xd0a8
    50ed:	67 66 8b 10          	mov    edx,DWORD PTR [eax]
    50f1:	66 89 d0             	mov    eax,edx
    50f4:	66 01 c0             	add    eax,eax
    50f7:	66 01 d0             	add    eax,edx
    50fa:	66 c1 e0 03          	shl    eax,0x3
    50fe:	66 05 e4 a2 00 00    	add    eax,0xa2e4
    5104:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    5108:	67 66 2b 45 fc       	sub    eax,DWORD PTR [ebp-0x4]
    510d:	66 40                	inc    eax
    510f:	67 66 23 45 f4       	and    eax,DWORD PTR [ebp-0xc]
    5114:	66 c1 f8 04          	sar    eax,0x4
    5118:	67 66 89 45 e8       	mov    DWORD PTR [ebp-0x18],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:673
	int cs = processTable[curProcessId].pcb.cs, ip = processTable[curProcessId].pcb.ip;
    511d:	66 8b 16 40 e8       	mov    edx,DWORD PTR ds:0xe840
    5122:	66 89 d0             	mov    eax,edx
    5125:	66 c1 e0 03          	shl    eax,0x3
    5129:	66 01 d0             	add    eax,edx
    512c:	66 01 c0             	add    eax,eax
    512f:	66 01 d0             	add    eax,edx
    5132:	66 c1 e0 04          	shl    eax,0x4
    5136:	66 05 9a d0 00 00    	add    eax,0xd09a
    513c:	67 8b 00             	mov    ax,WORD PTR [eax]
    513f:	66 98                	cwde   
    5141:	67 66 89 45 e4       	mov    DWORD PTR [ebp-0x1c],eax
    5146:	66 8b 16 40 e8       	mov    edx,DWORD PTR ds:0xe840
    514b:	66 89 d0             	mov    eax,edx
    514e:	66 c1 e0 03          	shl    eax,0x3
    5152:	66 01 d0             	add    eax,edx
    5155:	66 01 c0             	add    eax,eax
    5158:	66 01 d0             	add    eax,edx
    515b:	66 c1 e0 04          	shl    eax,0x4
    515f:	66 05 98 d0 00 00    	add    eax,0xd098
    5165:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    5169:	66 98                	cwde   
    516b:	67 66 89 45 e0       	mov    DWORD PTR [ebp-0x20],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:674
	int ss = segOfDes,
    5170:	67 66 8b 45 ec       	mov    eax,DWORD PTR [ebp-0x14]
    5175:	67 66 89 45 dc       	mov    DWORD PTR [ebp-0x24],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:675
	    sp = ((memoryTable[blockNum].beginAddr)&offsetMask) + processTable[curProcessId].pcb.sp_now - ((memoryTable[processTable[curProcessId].blockNum].endAddr - stackSize + 1)&offsetMask);
    517a:	67 66 8b 55 f8       	mov    edx,DWORD PTR [ebp-0x8]
    517f:	66 89 d0             	mov    eax,edx
    5182:	66 01 c0             	add    eax,eax
    5185:	66 01 d0             	add    eax,edx
    5188:	66 c1 e0 03          	shl    eax,0x3
    518c:	66 05 e0 a2 00 00    	add    eax,0xa2e0
    5192:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    5196:	67 66 23 45 f0       	and    eax,DWORD PTR [ebp-0x10]
    519b:	66 89 c1             	mov    ecx,eax
    519e:	66 8b 16 40 e8       	mov    edx,DWORD PTR ds:0xe840
    51a3:	66 89 d0             	mov    eax,edx
    51a6:	66 c1 e0 03          	shl    eax,0x3
    51aa:	66 01 d0             	add    eax,edx
    51ad:	66 01 c0             	add    eax,eax
    51b0:	66 01 d0             	add    eax,edx
    51b3:	66 c1 e0 04          	shl    eax,0x4
    51b7:	66 05 9e d0 00 00    	add    eax,0xd09e
    51bd:	67 8b 00             	mov    ax,WORD PTR [eax]
    51c0:	66 98                	cwde   
    51c2:	66 01 c1             	add    ecx,eax
    51c5:	66 8b 16 40 e8       	mov    edx,DWORD PTR ds:0xe840
    51ca:	66 89 d0             	mov    eax,edx
    51cd:	66 c1 e0 03          	shl    eax,0x3
    51d1:	66 01 d0             	add    eax,edx
    51d4:	66 01 c0             	add    eax,eax
    51d7:	66 01 d0             	add    eax,edx
    51da:	66 c1 e0 04          	shl    eax,0x4
    51de:	66 05 a8 d0 00 00    	add    eax,0xd0a8
    51e4:	67 66 8b 10          	mov    edx,DWORD PTR [eax]
    51e8:	66 89 d0             	mov    eax,edx
    51eb:	66 01 c0             	add    eax,eax
    51ee:	66 01 d0             	add    eax,edx
    51f1:	66 c1 e0 03          	shl    eax,0x3
    51f5:	66 05 e4 a2 00 00    	add    eax,0xa2e4
    51fb:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    51ff:	67 66 2b 45 fc       	sub    eax,DWORD PTR [ebp-0x4]
    5204:	66 40                	inc    eax
    5206:	67 66 23 45 f0       	and    eax,DWORD PTR [ebp-0x10]
    520b:	66 29 c1             	sub    ecx,eax
    520e:	66 89 c8             	mov    eax,ecx
    5211:	67 66 89 45 d8       	mov    DWORD PTR [ebp-0x28],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:676
	memcpy(segOfOs, (int)&processTable[curProcessId].pcb, segOfOs, (int)&processTable[ProcessSize].pcb, sizeof(struct PCB));
    5216:	66 8b 16 fc a6       	mov    edx,DWORD PTR ds:0xa6fc
    521b:	66 89 d0             	mov    eax,edx
    521e:	66 c1 e0 03          	shl    eax,0x3
    5222:	66 01 d0             	add    eax,edx
    5225:	66 01 c0             	add    eax,eax
    5228:	66 01 d0             	add    eax,edx
    522b:	66 c1 e0 04          	shl    eax,0x4
    522f:	66 05 80 d0 00 00    	add    eax,0xd080
    5235:	66 89 c1             	mov    ecx,eax
    5238:	66 8b 16 40 e8       	mov    edx,DWORD PTR ds:0xe840
    523d:	66 89 d0             	mov    eax,edx
    5240:	66 c1 e0 03          	shl    eax,0x3
    5244:	66 01 d0             	add    eax,edx
    5247:	66 01 c0             	add    eax,eax
    524a:	66 01 d0             	add    eax,edx
    524d:	66 c1 e0 04          	shl    eax,0x4
    5251:	66 05 80 d0 00 00    	add    eax,0xd080
    5257:	67 66 c7 44 24 10 22 	mov    DWORD PTR [esp+0x10],0x22
    525e:	00 00 00 
    5261:	67 66 89 4c 24 0c    	mov    DWORD PTR [esp+0xc],ecx
    5267:	67 66 c7 44 24 08 00 	mov    DWORD PTR [esp+0x8],0x2000
    526e:	20 00 00 
    5271:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    5277:	67 66 c7 04 24 00 20 	mov    DWORD PTR [esp],0x2000
    527e:	00 00 
    5280:	66 e8 b4 d2 ff ff    	call   253a <_memcpy>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:677
	memcpy(segOfSour, (memoryTable[processTable[curProcessId].blockNum].endAddr - stackSize + 1)&offsetMask, segOfDes, (memoryTable[blockNum].beginAddr)&offsetMask, stackSize);
    5286:	67 66 8b 55 f8       	mov    edx,DWORD PTR [ebp-0x8]
    528b:	66 89 d0             	mov    eax,edx
    528e:	66 01 c0             	add    eax,eax
    5291:	66 01 d0             	add    eax,edx
    5294:	66 c1 e0 03          	shl    eax,0x3
    5298:	66 05 e0 a2 00 00    	add    eax,0xa2e0
    529e:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    52a2:	67 66 23 45 f0       	and    eax,DWORD PTR [ebp-0x10]
    52a7:	66 89 c1             	mov    ecx,eax
    52aa:	66 8b 16 40 e8       	mov    edx,DWORD PTR ds:0xe840
    52af:	66 89 d0             	mov    eax,edx
    52b2:	66 c1 e0 03          	shl    eax,0x3
    52b6:	66 01 d0             	add    eax,edx
    52b9:	66 01 c0             	add    eax,eax
    52bc:	66 01 d0             	add    eax,edx
    52bf:	66 c1 e0 04          	shl    eax,0x4
    52c3:	66 05 a8 d0 00 00    	add    eax,0xd0a8
    52c9:	67 66 8b 10          	mov    edx,DWORD PTR [eax]
    52cd:	66 89 d0             	mov    eax,edx
    52d0:	66 01 c0             	add    eax,eax
    52d3:	66 01 d0             	add    eax,edx
    52d6:	66 c1 e0 03          	shl    eax,0x3
    52da:	66 05 e4 a2 00 00    	add    eax,0xa2e4
    52e0:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    52e4:	67 66 2b 45 fc       	sub    eax,DWORD PTR [ebp-0x4]
    52e9:	66 40                	inc    eax
    52eb:	67 66 23 45 f0       	and    eax,DWORD PTR [ebp-0x10]
    52f0:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    52f5:	67 66 89 54 24 10    	mov    DWORD PTR [esp+0x10],edx
    52fb:	67 66 89 4c 24 0c    	mov    DWORD PTR [esp+0xc],ecx
    5301:	67 66 8b 55 ec       	mov    edx,DWORD PTR [ebp-0x14]
    5306:	67 66 89 54 24 08    	mov    DWORD PTR [esp+0x8],edx
    530c:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    5312:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
    5317:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    531c:	66 e8 18 d2 ff ff    	call   253a <_memcpy>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:678
	createProcess(ProcessSize++, name, stackSize, cs, ip, ss, sp, blockNum);
    5322:	66 a1 fc a6          	mov    eax,ds:0xa6fc
    5326:	67 66 8d 50 01       	lea    edx,[eax+0x1]
    532b:	66 89 16 fc a6       	mov    DWORD PTR ds:0xa6fc,edx
    5330:	67 66 8b 55 f8       	mov    edx,DWORD PTR [ebp-0x8]
    5335:	67 66 89 54 24 1c    	mov    DWORD PTR [esp+0x1c],edx
    533b:	67 66 8b 55 d8       	mov    edx,DWORD PTR [ebp-0x28]
    5340:	67 66 89 54 24 18    	mov    DWORD PTR [esp+0x18],edx
    5346:	67 66 8b 55 dc       	mov    edx,DWORD PTR [ebp-0x24]
    534b:	67 66 89 54 24 14    	mov    DWORD PTR [esp+0x14],edx
    5351:	67 66 8b 55 e0       	mov    edx,DWORD PTR [ebp-0x20]
    5356:	67 66 89 54 24 10    	mov    DWORD PTR [esp+0x10],edx
    535c:	67 66 8b 55 e4       	mov    edx,DWORD PTR [ebp-0x1c]
    5361:	67 66 89 54 24 0c    	mov    DWORD PTR [esp+0xc],edx
    5367:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    536c:	67 66 89 54 24 08    	mov    DWORD PTR [esp+0x8],edx
    5372:	67 66 c7 44 24 04 e0 	mov    DWORD PTR [esp+0x4],0xe8e0
    5379:	e8 00 00 
    537c:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    5381:	66 e8 bc f6 ff ff    	call   4a43 <_createProcess>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:679
	enqueue(&ReadyQue, ProcessSize - 1);
    5387:	66 a1 fc a6          	mov    eax,ds:0xa6fc
    538b:	66 48                	dec    eax
    538d:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    5393:	67 66 c7 04 24 60 e8 	mov    DWORD PTR [esp],0xe860
    539a:	00 00 
    539c:	66 e8 ac 21 00 00    	call   754e <_enqueue>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:680
	processTable[ProcessSize - 1].fatherID = curProcessId;
    53a2:	66 a1 fc a6          	mov    eax,ds:0xa6fc
    53a6:	67 66 8d 50 ff       	lea    edx,[eax-0x1]
    53ab:	66 8b 0e 40 e8       	mov    ecx,DWORD PTR ds:0xe840
    53b0:	66 89 d0             	mov    eax,edx
    53b3:	66 c1 e0 03          	shl    eax,0x3
    53b7:	66 01 d0             	add    eax,edx
    53ba:	66 01 c0             	add    eax,eax
    53bd:	66 01 d0             	add    eax,edx
    53c0:	66 c1 e0 04          	shl    eax,0x4
    53c4:	66 05 d8 d0 00 00    	add    eax,0xd0d8
    53ca:	67 66 89 08          	mov    DWORD PTR [eax],ecx
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:681
	processTable[curProcessId].sonID = ProcessSize - 1;
    53ce:	66 8b 16 40 e8       	mov    edx,DWORD PTR ds:0xe840
    53d3:	66 a1 fc a6          	mov    eax,ds:0xa6fc
    53d7:	67 66 8d 48 ff       	lea    ecx,[eax-0x1]
    53dc:	66 89 d0             	mov    eax,edx
    53df:	66 c1 e0 03          	shl    eax,0x3
    53e3:	66 01 d0             	add    eax,edx
    53e6:	66 01 c0             	add    eax,eax
    53e9:	66 01 d0             	add    eax,edx
    53ec:	66 c1 e0 04          	shl    eax,0x4
    53f0:	66 05 e0 d0 00 00    	add    eax,0xd0e0
    53f6:	67 66 89 08          	mov    DWORD PTR [eax],ecx
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:682
	processTable[curProcessId].pcb.ax = ProcessSize - 1;
    53fa:	66 8b 16 40 e8       	mov    edx,DWORD PTR ds:0xe840
    53ff:	66 a1 fc a6          	mov    eax,ds:0xa6fc
    5403:	66 48                	dec    eax
    5405:	66 89 c1             	mov    ecx,eax
    5408:	66 89 d0             	mov    eax,edx
    540b:	66 c1 e0 03          	shl    eax,0x3
    540f:	66 01 d0             	add    eax,edx
    5412:	66 01 c0             	add    eax,eax
    5415:	66 01 d0             	add    eax,edx
    5418:	66 c1 e0 04          	shl    eax,0x4
    541c:	66 05 96 d0 00 00    	add    eax,0xd096
    5422:	67 89 08             	mov    WORD PTR [eax],cx
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:683
	processTable[ProcessSize - 1].pcb.ax = 0;
    5425:	66 a1 fc a6          	mov    eax,ds:0xa6fc
    5429:	67 66 8d 50 ff       	lea    edx,[eax-0x1]
    542e:	66 89 d0             	mov    eax,edx
    5431:	66 c1 e0 03          	shl    eax,0x3
    5435:	66 01 d0             	add    eax,edx
    5438:	66 01 c0             	add    eax,eax
    543b:	66 01 d0             	add    eax,edx
    543e:	66 c1 e0 04          	shl    eax,0x4
    5442:	66 05 96 d0 00 00    	add    eax,0xd096
    5448:	67 c7 00 00 00       	mov    WORD PTR [eax],0x0
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:684
}
    544d:	90                   	nop
    544e:	66 c9                	leave  
    5450:	66 c3                	ret    

00005452 <_do_exit>:
do_exit():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:687

void do_exit(int exit_value)
{
    5452:	66 55                	push   ebp
    5454:	66 89 e5             	mov    ebp,esp
    5457:	66 83 ec 0c          	sub    esp,0xc
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:688
	quesize	= size(&BlockedQue);
    545b:	67 66 c7 04 24 a0 a6 	mov    DWORD PTR [esp],0xa6a0
    5462:	00 00 
    5464:	66 e8 9e 20 00 00    	call   7508 <_size>
    546a:	66 a3 c0 e8          	mov    ds:0xe8c0,eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:689
	for (int i = 0; i < quesize; ++i)
    546e:	67 66 c7 45 fc 00 00 	mov    DWORD PTR [ebp-0x4],0x0
    5475:	00 00 
    5477:	eb 6a                	jmp    54e3 <_do_exit+0x91>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:691
	{
		dequeue(&BlockedQue, &tmp);
    5479:	67 66 c7 44 24 04 c8 	mov    DWORD PTR [esp+0x4],0xe8c8
    5480:	e8 00 00 
    5483:	67 66 c7 04 24 a0 a6 	mov    DWORD PTR [esp],0xa6a0
    548a:	00 00 
    548c:	66 e8 29 21 00 00    	call   75bb <_dequeue>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:692
		if (processTable[tmp].waitProcess == curProcessId)
    5492:	66 8b 16 c8 e8       	mov    edx,DWORD PTR ds:0xe8c8
    5497:	66 89 d0             	mov    eax,edx
    549a:	66 c1 e0 03          	shl    eax,0x3
    549e:	66 01 d0             	add    eax,edx
    54a1:	66 01 c0             	add    eax,eax
    54a4:	66 01 d0             	add    eax,edx
    54a7:	66 c1 e0 04          	shl    eax,0x4
    54ab:	66 05 dc d0 00 00    	add    eax,0xd0dc
    54b1:	67 66 8b 10          	mov    edx,DWORD PTR [eax]
    54b5:	66 a1 40 e8          	mov    eax,ds:0xe840
    54b9:	66 39 c2             	cmp    edx,eax
    54bc:	75 11                	jne    54cf <_do_exit+0x7d>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:694
		{
			wakeup(tmp);
    54be:	66 a1 c8 e8          	mov    eax,ds:0xe8c8
    54c2:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    54c7:	66 e8 e3 f7 ff ff    	call   4cb0 <_wakeup>
    54cd:	eb 0f                	jmp    54de <_do_exit+0x8c>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:697
		}
		else {
			block(tmp);
    54cf:	66 a1 c8 e8          	mov    eax,ds:0xe8c8
    54d3:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    54d8:	66 e8 16 f7 ff ff    	call   4bf4 <_block>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:689
	for (int i = 0; i < quesize; ++i)
    54de:	67 66 ff 45 fc       	inc    DWORD PTR [ebp-0x4]
    54e3:	66 a1 c0 e8          	mov    eax,ds:0xe8c0
    54e7:	67 66 39 45 fc       	cmp    DWORD PTR [ebp-0x4],eax
    54ec:	7c 8b                	jl     5479 <_do_exit+0x27>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:700
		}
	}
	processTable[curProcessId].retValue = exit_value;
    54ee:	66 8b 16 40 e8       	mov    edx,DWORD PTR ds:0xe840
    54f3:	66 89 d0             	mov    eax,edx
    54f6:	66 c1 e0 03          	shl    eax,0x3
    54fa:	66 01 d0             	add    eax,edx
    54fd:	66 01 c0             	add    eax,eax
    5500:	66 01 d0             	add    eax,edx
    5503:	66 c1 e0 04          	shl    eax,0x4
    5507:	67 66 8d 90 d4 d0 00 	lea    edx,[eax+0xd0d4]
    550e:	00 
    550f:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    5514:	67 66 89 02          	mov    DWORD PTR [edx],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:701
	kill(curProcessId);
    5518:	66 a1 40 e8          	mov    eax,ds:0xe840
    551c:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    5521:	66 e8 27 dc ff ff    	call   314e <_kill>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:702
	processSwitch();
    5527:	66 e8 cc 07 00 00    	call   5cf9 <_processSwitch>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:703
}
    552d:	90                   	nop
    552e:	66 c9                	leave  
    5530:	66 c3                	ret    

00005532 <_do_wait>:
do_wait():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:706

int do_wait()
{
    5532:	66 55                	push   ebp
    5534:	66 89 e5             	mov    ebp,esp
    5537:	66 83 ec 08          	sub    esp,0x8
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:707
	processTable[curProcessId].waitProcess = processTable[curProcessId].sonID;
    553b:	66 8b 16 40 e8       	mov    edx,DWORD PTR ds:0xe840
    5540:	66 8b 0e 40 e8       	mov    ecx,DWORD PTR ds:0xe840
    5545:	66 89 c8             	mov    eax,ecx
    5548:	66 c1 e0 03          	shl    eax,0x3
    554c:	66 01 c8             	add    eax,ecx
    554f:	66 01 c0             	add    eax,eax
    5552:	66 01 c8             	add    eax,ecx
    5555:	66 c1 e0 04          	shl    eax,0x4
    5559:	66 05 e0 d0 00 00    	add    eax,0xd0e0
    555f:	67 66 8b 08          	mov    ecx,DWORD PTR [eax]
    5563:	66 89 d0             	mov    eax,edx
    5566:	66 c1 e0 03          	shl    eax,0x3
    556a:	66 01 d0             	add    eax,edx
    556d:	66 01 c0             	add    eax,eax
    5570:	66 01 d0             	add    eax,edx
    5573:	66 c1 e0 04          	shl    eax,0x4
    5577:	66 05 dc d0 00 00    	add    eax,0xd0dc
    557d:	67 66 89 08          	mov    DWORD PTR [eax],ecx
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:708
	block(curProcessId);
    5581:	66 a1 40 e8          	mov    eax,ds:0xe840
    5585:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    558a:	66 e8 64 f6 ff ff    	call   4bf4 <_block>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:709
	processSwitch();
    5590:	66 e8 63 07 00 00    	call   5cf9 <_processSwitch>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:710
	int ret = processTable[processTable[curProcessId].sonID].retValue;
    5596:	66 8b 16 40 e8       	mov    edx,DWORD PTR ds:0xe840
    559b:	66 89 d0             	mov    eax,edx
    559e:	66 c1 e0 03          	shl    eax,0x3
    55a2:	66 01 d0             	add    eax,edx
    55a5:	66 01 c0             	add    eax,eax
    55a8:	66 01 d0             	add    eax,edx
    55ab:	66 c1 e0 04          	shl    eax,0x4
    55af:	66 05 e0 d0 00 00    	add    eax,0xd0e0
    55b5:	67 66 8b 10          	mov    edx,DWORD PTR [eax]
    55b9:	66 89 d0             	mov    eax,edx
    55bc:	66 c1 e0 03          	shl    eax,0x3
    55c0:	66 01 d0             	add    eax,edx
    55c3:	66 01 c0             	add    eax,eax
    55c6:	66 01 d0             	add    eax,edx
    55c9:	66 c1 e0 04          	shl    eax,0x4
    55cd:	66 05 d4 d0 00 00    	add    eax,0xd0d4
    55d3:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    55d7:	67 66 89 45 fc       	mov    DWORD PTR [ebp-0x4],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:711
	processTable[curProcessId].sonID = -1;
    55dc:	66 8b 16 40 e8       	mov    edx,DWORD PTR ds:0xe840
    55e1:	66 89 d0             	mov    eax,edx
    55e4:	66 c1 e0 03          	shl    eax,0x3
    55e8:	66 01 d0             	add    eax,edx
    55eb:	66 01 c0             	add    eax,eax
    55ee:	66 01 d0             	add    eax,edx
    55f1:	66 c1 e0 04          	shl    eax,0x4
    55f5:	66 05 e0 d0 00 00    	add    eax,0xd0e0
    55fb:	67 66 c7 00 ff ff ff 	mov    DWORD PTR [eax],0xffffffff
    5602:	ff 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:712
	return ret;
    5603:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:713
}
    5608:	66 c9                	leave  
    560a:	66 c3                	ret    

0000560c <_Tosuspend>:
Tosuspend():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:716

void Tosuspend(int processID)
{
    560c:	66 55                	push   ebp
    560e:	66 89 e5             	mov    ebp,esp
    5611:	66 83 ec 28          	sub    esp,0x28
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:717
	int Size = memoryTable[processTable[processID].blockNum].endAddr - memoryTable[processTable[processID].blockNum].beginAddr + 1;
    5615:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    561a:	66 89 d0             	mov    eax,edx
    561d:	66 c1 e0 03          	shl    eax,0x3
    5621:	66 01 d0             	add    eax,edx
    5624:	66 01 c0             	add    eax,eax
    5627:	66 01 d0             	add    eax,edx
    562a:	66 c1 e0 04          	shl    eax,0x4
    562e:	66 05 a8 d0 00 00    	add    eax,0xd0a8
    5634:	67 66 8b 10          	mov    edx,DWORD PTR [eax]
    5638:	66 89 d0             	mov    eax,edx
    563b:	66 01 c0             	add    eax,eax
    563e:	66 01 d0             	add    eax,edx
    5641:	66 c1 e0 03          	shl    eax,0x3
    5645:	66 05 e4 a2 00 00    	add    eax,0xa2e4
    564b:	67 66 8b 08          	mov    ecx,DWORD PTR [eax]
    564f:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    5654:	66 89 d0             	mov    eax,edx
    5657:	66 c1 e0 03          	shl    eax,0x3
    565b:	66 01 d0             	add    eax,edx
    565e:	66 01 c0             	add    eax,eax
    5661:	66 01 d0             	add    eax,edx
    5664:	66 c1 e0 04          	shl    eax,0x4
    5668:	66 05 a8 d0 00 00    	add    eax,0xd0a8
    566e:	67 66 8b 10          	mov    edx,DWORD PTR [eax]
    5672:	66 89 d0             	mov    eax,edx
    5675:	66 01 c0             	add    eax,eax
    5678:	66 01 d0             	add    eax,edx
    567b:	66 c1 e0 03          	shl    eax,0x3
    567f:	66 05 e0 a2 00 00    	add    eax,0xa2e0
    5685:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    5689:	66 29 c1             	sub    ecx,eax
    568c:	66 89 c8             	mov    eax,ecx
    568f:	66 40                	inc    eax
    5691:	67 66 89 45 e8       	mov    DWORD PTR [ebp-0x18],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:718
	int count = 0;
    5696:	67 66 c7 45 fc 00 00 	mov    DWORD PTR [ebp-0x4],0x0
    569d:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:719
	int begin = 0;
    569f:	67 66 c7 45 f8 00 00 	mov    DWORD PTR [ebp-0x8],0x0
    56a6:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:720
	for (int i = 0; i < LenOfFat; ++i)
    56a8:	67 66 c7 45 f4 00 00 	mov    DWORD PTR [ebp-0xc],0x0
    56af:	00 00 
    56b1:	eb 48                	jmp    56fb <_Tosuspend+0xef>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:722
	{
		if (FAT[begin] == 0)
    56b3:	66 8b 16 00 a7       	mov    edx,DWORD PTR ds:0xa700
    56b8:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
    56bd:	66 01 c0             	add    eax,eax
    56c0:	66 01 d0             	add    eax,edx
    56c3:	67 8b 00             	mov    ax,WORD PTR [eax]
    56c6:	85 c0                	test   ax,ax
    56c8:	75 07                	jne    56d1 <_Tosuspend+0xc5>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:724
		{
			++count;
    56ca:	67 66 ff 45 fc       	inc    DWORD PTR [ebp-0x4]
    56cf:	eb 15                	jmp    56e6 <_Tosuspend+0xda>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:727
		}
		else {
			begin = i + 1;
    56d1:	67 66 8b 45 f4       	mov    eax,DWORD PTR [ebp-0xc]
    56d6:	66 40                	inc    eax
    56d8:	67 66 89 45 f8       	mov    DWORD PTR [ebp-0x8],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:728
			count = 0;
    56dd:	67 66 c7 45 fc 00 00 	mov    DWORD PTR [ebp-0x4],0x0
    56e4:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:730
		}
		if (count * Cluster >= Size)
    56e6:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
    56eb:	66 c1 e0 09          	shl    eax,0x9
    56ef:	67 66 3b 45 e8       	cmp    eax,DWORD PTR [ebp-0x18]
    56f4:	7d 12                	jge    5708 <_Tosuspend+0xfc>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:720
	for (int i = 0; i < LenOfFat; ++i)
    56f6:	67 66 ff 45 f4       	inc    DWORD PTR [ebp-0xc]
    56fb:	67 66 81 7d f4 c7 00 	cmp    DWORD PTR [ebp-0xc],0xc7
    5702:	00 00 
    5704:	7e ad                	jle    56b3 <_Tosuspend+0xa7>
    5706:	eb 01                	jmp    5709 <_Tosuspend+0xfd>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:732
		{
			break;
    5708:	90                   	nop
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:735
		}
	}
	write(begin * Cluster, Size, (memoryTable[processTable[processID].blockNum].beginAddr & 0x0000ffff), (memoryTable[processTable[processID].blockNum].beginAddr & 0xf0000) >> 4);
    5709:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    570e:	66 89 d0             	mov    eax,edx
    5711:	66 c1 e0 03          	shl    eax,0x3
    5715:	66 01 d0             	add    eax,edx
    5718:	66 01 c0             	add    eax,eax
    571b:	66 01 d0             	add    eax,edx
    571e:	66 c1 e0 04          	shl    eax,0x4
    5722:	66 05 a8 d0 00 00    	add    eax,0xd0a8
    5728:	67 66 8b 10          	mov    edx,DWORD PTR [eax]
    572c:	66 89 d0             	mov    eax,edx
    572f:	66 01 c0             	add    eax,eax
    5732:	66 01 d0             	add    eax,edx
    5735:	66 c1 e0 03          	shl    eax,0x3
    5739:	66 05 e0 a2 00 00    	add    eax,0xa2e0
    573f:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    5743:	66 c1 f8 04          	sar    eax,0x4
    5747:	66 25 00 f0 00 00    	and    eax,0xf000
    574d:	66 89 c1             	mov    ecx,eax
    5750:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    5755:	66 89 d0             	mov    eax,edx
    5758:	66 c1 e0 03          	shl    eax,0x3
    575c:	66 01 d0             	add    eax,edx
    575f:	66 01 c0             	add    eax,eax
    5762:	66 01 d0             	add    eax,edx
    5765:	66 c1 e0 04          	shl    eax,0x4
    5769:	66 05 a8 d0 00 00    	add    eax,0xd0a8
    576f:	67 66 8b 10          	mov    edx,DWORD PTR [eax]
    5773:	66 89 d0             	mov    eax,edx
    5776:	66 01 c0             	add    eax,eax
    5779:	66 01 d0             	add    eax,edx
    577c:	66 c1 e0 03          	shl    eax,0x3
    5780:	66 05 e0 a2 00 00    	add    eax,0xa2e0
    5786:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    578a:	66 0f b7 c0          	movzx  eax,ax
    578e:	67 66 8b 55 f8       	mov    edx,DWORD PTR [ebp-0x8]
    5793:	66 c1 e2 09          	shl    edx,0x9
    5797:	67 66 89 4c 24 0c    	mov    DWORD PTR [esp+0xc],ecx
    579d:	67 66 89 44 24 08    	mov    DWORD PTR [esp+0x8],eax
    57a3:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
    57a8:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    57ae:	67 66 89 14 24       	mov    DWORD PTR [esp],edx
    57b3:	66 e8 b4 cd ff ff    	call   256d <_write>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:736
	processTable[processID].lmaddress = begin * Cluster;
    57b9:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
    57be:	66 c1 e0 09          	shl    eax,0x9
    57c2:	66 89 c1             	mov    ecx,eax
    57c5:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    57ca:	66 89 d0             	mov    eax,edx
    57cd:	66 c1 e0 03          	shl    eax,0x3
    57d1:	66 01 d0             	add    eax,edx
    57d4:	66 01 c0             	add    eax,eax
    57d7:	66 01 d0             	add    eax,edx
    57da:	66 c1 e0 04          	shl    eax,0x4
    57de:	66 05 ac d0 00 00    	add    eax,0xd0ac
    57e4:	67 66 89 08          	mov    DWORD PTR [eax],ecx
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:737
	enqueue(&SuspendQue, processID);
    57e8:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    57ed:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    57f3:	67 66 c7 04 24 20 d0 	mov    DWORD PTR [esp],0xd020
    57fa:	00 00 
    57fc:	66 e8 4c 1d 00 00    	call   754e <_enqueue>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:739
	///////////////////////////
	if (processTable[processID].status == ready)
    5802:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    5807:	66 89 d0             	mov    eax,edx
    580a:	66 c1 e0 03          	shl    eax,0x3
    580e:	66 01 d0             	add    eax,edx
    5811:	66 01 c0             	add    eax,eax
    5814:	66 01 d0             	add    eax,edx
    5817:	66 c1 e0 04          	shl    eax,0x4
    581b:	66 05 ac d1 00 00    	add    eax,0xd1ac
    5821:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    5825:	66 83 f8 01          	cmp    eax,0x1
    5829:	75 6e                	jne    5899 <_Tosuspend+0x28d>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:742
		////////////////////////////
	{
		quesize = size(&ReadyQue);
    582b:	67 66 c7 04 24 60 e8 	mov    DWORD PTR [esp],0xe860
    5832:	00 00 
    5834:	66 e8 ce 1c 00 00    	call   7508 <_size>
    583a:	66 a3 c0 e8          	mov    ds:0xe8c0,eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:743
		for (int i = 0; i < quesize; ++i)
    583e:	67 66 c7 45 f0 00 00 	mov    DWORD PTR [ebp-0x10],0x0
    5845:	00 00 
    5847:	eb 42                	jmp    588b <_Tosuspend+0x27f>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:745
		{
			dequeue(&ReadyQue, &tmp);
    5849:	67 66 c7 44 24 04 c8 	mov    DWORD PTR [esp+0x4],0xe8c8
    5850:	e8 00 00 
    5853:	67 66 c7 04 24 60 e8 	mov    DWORD PTR [esp],0xe860
    585a:	00 00 
    585c:	66 e8 59 1d 00 00    	call   75bb <_dequeue>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:746
			if (tmp != processID)
    5862:	66 a1 c8 e8          	mov    eax,ds:0xe8c8
    5866:	67 66 3b 45 08       	cmp    eax,DWORD PTR [ebp+0x8]
    586b:	74 19                	je     5886 <_Tosuspend+0x27a>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:748
			{
				enqueue(&ReadyQue, tmp);
    586d:	66 a1 c8 e8          	mov    eax,ds:0xe8c8
    5871:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    5877:	67 66 c7 04 24 60 e8 	mov    DWORD PTR [esp],0xe860
    587e:	00 00 
    5880:	66 e8 c8 1c 00 00    	call   754e <_enqueue>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:743
		for (int i = 0; i < quesize; ++i)
    5886:	67 66 ff 45 f0       	inc    DWORD PTR [ebp-0x10]
    588b:	66 a1 c0 e8          	mov    eax,ds:0xe8c0
    588f:	67 66 39 45 f0       	cmp    DWORD PTR [ebp-0x10],eax
    5894:	7c b3                	jl     5849 <_Tosuspend+0x23d>
    5896:	e9 94 00             	jmp    592d <_Tosuspend+0x321>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:753
			}
		}
	}
	///////////////////////////
	else if (processTable[processID].status == blocked)
    5899:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    589e:	66 89 d0             	mov    eax,edx
    58a1:	66 c1 e0 03          	shl    eax,0x3
    58a5:	66 01 d0             	add    eax,edx
    58a8:	66 01 c0             	add    eax,eax
    58ab:	66 01 d0             	add    eax,edx
    58ae:	66 c1 e0 04          	shl    eax,0x4
    58b2:	66 05 ac d1 00 00    	add    eax,0xd1ac
    58b8:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    58bc:	66 83 f8 03          	cmp    eax,0x3
    58c0:	75 6b                	jne    592d <_Tosuspend+0x321>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:756
		////////////////////////////
	{
		quesize = size(&BlockedQue);
    58c2:	67 66 c7 04 24 a0 a6 	mov    DWORD PTR [esp],0xa6a0
    58c9:	00 00 
    58cb:	66 e8 37 1c 00 00    	call   7508 <_size>
    58d1:	66 a3 c0 e8          	mov    ds:0xe8c0,eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:757
		for (int i = 0; i < quesize; ++i)
    58d5:	67 66 c7 45 ec 00 00 	mov    DWORD PTR [ebp-0x14],0x0
    58dc:	00 00 
    58de:	eb 42                	jmp    5922 <_Tosuspend+0x316>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:759
		{
			dequeue(&BlockedQue, &tmp);
    58e0:	67 66 c7 44 24 04 c8 	mov    DWORD PTR [esp+0x4],0xe8c8
    58e7:	e8 00 00 
    58ea:	67 66 c7 04 24 a0 a6 	mov    DWORD PTR [esp],0xa6a0
    58f1:	00 00 
    58f3:	66 e8 c2 1c 00 00    	call   75bb <_dequeue>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:760
			if (tmp != processID)
    58f9:	66 a1 c8 e8          	mov    eax,ds:0xe8c8
    58fd:	67 66 3b 45 08       	cmp    eax,DWORD PTR [ebp+0x8]
    5902:	74 19                	je     591d <_Tosuspend+0x311>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:762
			{
				enqueue(&BlockedQue, tmp);
    5904:	66 a1 c8 e8          	mov    eax,ds:0xe8c8
    5908:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    590e:	67 66 c7 04 24 a0 a6 	mov    DWORD PTR [esp],0xa6a0
    5915:	00 00 
    5917:	66 e8 31 1c 00 00    	call   754e <_enqueue>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:757
		for (int i = 0; i < quesize; ++i)
    591d:	67 66 ff 45 ec       	inc    DWORD PTR [ebp-0x14]
    5922:	66 a1 c0 e8          	mov    eax,ds:0xe8c0
    5926:	67 66 39 45 ec       	cmp    DWORD PTR [ebp-0x14],eax
    592b:	7c b3                	jl     58e0 <_Tosuspend+0x2d4>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:767
			}
		}
	}
	// ip和sp为相对位移，重启不改动
	processTable[processID].status = suspend;
    592d:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    5932:	66 89 d0             	mov    eax,edx
    5935:	66 c1 e0 03          	shl    eax,0x3
    5939:	66 01 d0             	add    eax,edx
    593c:	66 01 c0             	add    eax,eax
    593f:	66 01 d0             	add    eax,edx
    5942:	66 c1 e0 04          	shl    eax,0x4
    5946:	66 05 ac d1 00 00    	add    eax,0xd1ac
    594c:	67 66 c7 00 04 00 00 	mov    DWORD PTR [eax],0x4
    5953:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:768
	release(memoryTable[processTable[processID].blockNum].beginAddr, memoryTable[processTable[processID].blockNum].endAddr);
    5954:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    5959:	66 89 d0             	mov    eax,edx
    595c:	66 c1 e0 03          	shl    eax,0x3
    5960:	66 01 d0             	add    eax,edx
    5963:	66 01 c0             	add    eax,eax
    5966:	66 01 d0             	add    eax,edx
    5969:	66 c1 e0 04          	shl    eax,0x4
    596d:	66 05 a8 d0 00 00    	add    eax,0xd0a8
    5973:	67 66 8b 10          	mov    edx,DWORD PTR [eax]
    5977:	66 89 d0             	mov    eax,edx
    597a:	66 01 c0             	add    eax,eax
    597d:	66 01 d0             	add    eax,edx
    5980:	66 c1 e0 03          	shl    eax,0x3
    5984:	66 05 e4 a2 00 00    	add    eax,0xa2e4
    598a:	67 66 8b 08          	mov    ecx,DWORD PTR [eax]
    598e:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    5993:	66 89 d0             	mov    eax,edx
    5996:	66 c1 e0 03          	shl    eax,0x3
    599a:	66 01 d0             	add    eax,edx
    599d:	66 01 c0             	add    eax,eax
    59a0:	66 01 d0             	add    eax,edx
    59a3:	66 c1 e0 04          	shl    eax,0x4
    59a7:	66 05 a8 d0 00 00    	add    eax,0xd0a8
    59ad:	67 66 8b 10          	mov    edx,DWORD PTR [eax]
    59b1:	66 89 d0             	mov    eax,edx
    59b4:	66 01 c0             	add    eax,eax
    59b7:	66 01 d0             	add    eax,edx
    59ba:	66 c1 e0 03          	shl    eax,0x3
    59be:	66 05 e0 a2 00 00    	add    eax,0xa2e0
    59c4:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    59c8:	67 66 89 4c 24 04    	mov    DWORD PTR [esp+0x4],ecx
    59ce:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    59d3:	66 e8 10 13 00 00    	call   6ce9 <_release>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:769
}
    59d9:	90                   	nop
    59da:	66 c9                	leave  
    59dc:	66 c3                	ret    

000059de <_activate>:
activate():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:771
void activate(int processID)
{
    59de:	66 55                	push   ebp
    59e0:	66 89 e5             	mov    ebp,esp
    59e3:	66 56                	push   esi
    59e5:	66 53                	push   ebx
    59e7:	66 83 ec 14          	sub    esp,0x14
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:772
	loadFile(processTable[processID].lmaddress, processTable[processID].size, (memoryTable[processTable[processID].blockNum].beginAddr & 0x0000ffff), (memoryTable[processTable[processID].blockNum].beginAddr & 0xf0000) >> 4);
    59eb:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    59f0:	66 89 d0             	mov    eax,edx
    59f3:	66 c1 e0 03          	shl    eax,0x3
    59f7:	66 01 d0             	add    eax,edx
    59fa:	66 01 c0             	add    eax,eax
    59fd:	66 01 d0             	add    eax,edx
    5a00:	66 c1 e0 04          	shl    eax,0x4
    5a04:	66 05 a8 d0 00 00    	add    eax,0xd0a8
    5a0a:	67 66 8b 10          	mov    edx,DWORD PTR [eax]
    5a0e:	66 89 d0             	mov    eax,edx
    5a11:	66 01 c0             	add    eax,eax
    5a14:	66 01 d0             	add    eax,edx
    5a17:	66 c1 e0 03          	shl    eax,0x3
    5a1b:	66 05 e0 a2 00 00    	add    eax,0xa2e0
    5a21:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    5a25:	66 c1 f8 04          	sar    eax,0x4
    5a29:	66 25 00 f0 00 00    	and    eax,0xf000
    5a2f:	66 89 c6             	mov    esi,eax
    5a32:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    5a37:	66 89 d0             	mov    eax,edx
    5a3a:	66 c1 e0 03          	shl    eax,0x3
    5a3e:	66 01 d0             	add    eax,edx
    5a41:	66 01 c0             	add    eax,eax
    5a44:	66 01 d0             	add    eax,edx
    5a47:	66 c1 e0 04          	shl    eax,0x4
    5a4b:	66 05 a8 d0 00 00    	add    eax,0xd0a8
    5a51:	67 66 8b 10          	mov    edx,DWORD PTR [eax]
    5a55:	66 89 d0             	mov    eax,edx
    5a58:	66 01 c0             	add    eax,eax
    5a5b:	66 01 d0             	add    eax,edx
    5a5e:	66 c1 e0 03          	shl    eax,0x3
    5a62:	66 05 e0 a2 00 00    	add    eax,0xa2e0
    5a68:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    5a6c:	66 0f b7 d8          	movzx  ebx,ax
    5a70:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    5a75:	66 89 d0             	mov    eax,edx
    5a78:	66 c1 e0 03          	shl    eax,0x3
    5a7c:	66 01 d0             	add    eax,edx
    5a7f:	66 01 c0             	add    eax,eax
    5a82:	66 01 d0             	add    eax,edx
    5a85:	66 c1 e0 04          	shl    eax,0x4
    5a89:	66 05 b0 d0 00 00    	add    eax,0xd0b0
    5a8f:	67 66 8b 08          	mov    ecx,DWORD PTR [eax]
    5a93:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    5a98:	66 89 d0             	mov    eax,edx
    5a9b:	66 c1 e0 03          	shl    eax,0x3
    5a9f:	66 01 d0             	add    eax,edx
    5aa2:	66 01 c0             	add    eax,eax
    5aa5:	66 01 d0             	add    eax,edx
    5aa8:	66 c1 e0 04          	shl    eax,0x4
    5aac:	66 05 ac d0 00 00    	add    eax,0xd0ac
    5ab2:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    5ab6:	67 66 89 74 24 0c    	mov    DWORD PTR [esp+0xc],esi
    5abc:	67 66 89 5c 24 08    	mov    DWORD PTR [esp+0x8],ebx
    5ac2:	67 66 89 4c 24 04    	mov    DWORD PTR [esp+0x4],ecx
    5ac8:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    5acd:	66 e8 7a 15 00 00    	call   704d <_loadFile>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:773
	quesize = size(&SuspendQue);
    5ad3:	67 66 c7 04 24 20 d0 	mov    DWORD PTR [esp],0xd020
    5ada:	00 00 
    5adc:	66 e8 26 1a 00 00    	call   7508 <_size>
    5ae2:	66 a3 c0 e8          	mov    ds:0xe8c0,eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:774
	for (int i = 0; i < quesize; ++i)
    5ae6:	67 66 c7 45 f4 00 00 	mov    DWORD PTR [ebp-0xc],0x0
    5aed:	00 00 
    5aef:	eb 42                	jmp    5b33 <_activate+0x155>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:776
	{
		dequeue(&SuspendQue, &tmp);
    5af1:	67 66 c7 44 24 04 c8 	mov    DWORD PTR [esp+0x4],0xe8c8
    5af8:	e8 00 00 
    5afb:	67 66 c7 04 24 20 d0 	mov    DWORD PTR [esp],0xd020
    5b02:	00 00 
    5b04:	66 e8 b1 1a 00 00    	call   75bb <_dequeue>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:777
		if (tmp != processID)
    5b0a:	66 a1 c8 e8          	mov    eax,ds:0xe8c8
    5b0e:	67 66 3b 45 08       	cmp    eax,DWORD PTR [ebp+0x8]
    5b13:	74 19                	je     5b2e <_activate+0x150>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:779
		{
			enqueue(&SuspendQue, tmp);
    5b15:	66 a1 c8 e8          	mov    eax,ds:0xe8c8
    5b19:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    5b1f:	67 66 c7 04 24 20 d0 	mov    DWORD PTR [esp],0xd020
    5b26:	00 00 
    5b28:	66 e8 20 1a 00 00    	call   754e <_enqueue>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:774
	for (int i = 0; i < quesize; ++i)
    5b2e:	67 66 ff 45 f4       	inc    DWORD PTR [ebp-0xc]
    5b33:	66 a1 c0 e8          	mov    eax,ds:0xe8c0
    5b37:	67 66 39 45 f4       	cmp    DWORD PTR [ebp-0xc],eax
    5b3c:	7c b3                	jl     5af1 <_activate+0x113>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:782
		}
	}
	processTable[processID].status = ready;
    5b3e:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    5b43:	66 89 d0             	mov    eax,edx
    5b46:	66 c1 e0 03          	shl    eax,0x3
    5b4a:	66 01 d0             	add    eax,edx
    5b4d:	66 01 c0             	add    eax,eax
    5b50:	66 01 d0             	add    eax,edx
    5b53:	66 c1 e0 04          	shl    eax,0x4
    5b57:	66 05 ac d1 00 00    	add    eax,0xd1ac
    5b5d:	67 66 c7 00 01 00 00 	mov    DWORD PTR [eax],0x1
    5b64:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:783
	enqueue(&ReadyQue, processID);
    5b65:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    5b6a:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    5b70:	67 66 c7 04 24 60 e8 	mov    DWORD PTR [esp],0xe860
    5b77:	00 00 
    5b79:	66 e8 cf 19 00 00    	call   754e <_enqueue>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:784
}
    5b7f:	90                   	nop
    5b80:	66 83 c4 14          	add    esp,0x14
    5b84:	66 5b                	pop    ebx
    5b86:	66 5e                	pop    esi
    5b88:	66 5d                	pop    ebp
    5b8a:	66 c3                	ret    

00005b8c <_do_delay>:
do_delay():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:787

void do_delay(int clocks)
{
    5b8c:	66 55                	push   ebp
    5b8e:	66 89 e5             	mov    ebp,esp
    5b91:	66 83 ec 08          	sub    esp,0x8
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:788
	__asm__("cli\n");
    5b95:	fa                   	cli    
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:789
	delEle(&ReadyQue, curProcessId);
    5b96:	66 a1 40 e8          	mov    eax,ds:0xe840
    5b9a:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    5ba0:	67 66 c7 04 24 60 e8 	mov    DWORD PTR [esp],0xe860
    5ba7:	00 00 
    5ba9:	66 e8 c9 1a 00 00    	call   7678 <_delEle>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:790
	processTable[curProcessId].status = blocked;
    5baf:	66 8b 16 40 e8       	mov    edx,DWORD PTR ds:0xe840
    5bb4:	66 89 d0             	mov    eax,edx
    5bb7:	66 c1 e0 03          	shl    eax,0x3
    5bbb:	66 01 d0             	add    eax,edx
    5bbe:	66 01 c0             	add    eax,eax
    5bc1:	66 01 d0             	add    eax,edx
    5bc4:	66 c1 e0 04          	shl    eax,0x4
    5bc8:	66 05 ac d1 00 00    	add    eax,0xd1ac
    5bce:	67 66 c7 00 03 00 00 	mov    DWORD PTR [eax],0x3
    5bd5:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:791
	enqueue(&BlockedQue, curProcessId);
    5bd6:	66 a1 40 e8          	mov    eax,ds:0xe840
    5bda:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    5be0:	67 66 c7 04 24 a0 a6 	mov    DWORD PTR [esp],0xa6a0
    5be7:	00 00 
    5be9:	66 e8 5f 19 00 00    	call   754e <_enqueue>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:792
	enqueue(&(delayQue.IDque), curProcessId);
    5bef:	66 a1 40 e8          	mov    eax,ds:0xe840
    5bf3:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    5bf9:	67 66 c7 04 24 20 a2 	mov    DWORD PTR [esp],0xa220
    5c00:	00 00 
    5c02:	66 e8 46 19 00 00    	call   754e <_enqueue>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:793
	enqueue(&(delayQue.clocksQue), clocks);
    5c08:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    5c0d:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    5c13:	67 66 c7 04 24 7c a2 	mov    DWORD PTR [esp],0xa27c
    5c1a:	00 00 
    5c1c:	66 e8 2c 19 00 00    	call   754e <_enqueue>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:794
	processSwitch();
    5c22:	66 e8 d1 00 00 00    	call   5cf9 <_processSwitch>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:795
	__asm__("sti\n");
    5c28:	fb                   	sti    
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:796
}
    5c29:	90                   	nop
    5c2a:	66 c9                	leave  
    5c2c:	66 c3                	ret    

00005c2e <_passOneClock>:
passOneClock():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:801

int tmpID;
int tmpClocks;
void passOneClock()
{
    5c2e:	66 55                	push   ebp
    5c30:	66 89 e5             	mov    ebp,esp
    5c33:	66 83 ec 10          	sub    esp,0x10
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:802
	__asm__("cli\n");
    5c37:	fa                   	cli    
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:803
	int queSize = size(&(delayQue.IDque));
    5c38:	67 66 c7 04 24 20 a2 	mov    DWORD PTR [esp],0xa220
    5c3f:	00 00 
    5c41:	66 e8 c1 18 00 00    	call   7508 <_size>
    5c47:	67 66 89 45 f8       	mov    DWORD PTR [ebp-0x8],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:804
	for (int i = 0; i < queSize; ++i)
    5c4c:	67 66 c7 45 fc 00 00 	mov    DWORD PTR [ebp-0x4],0x0
    5c53:	00 00 
    5c55:	e9 8d 00             	jmp    5ce5 <_passOneClock+0xb7>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:806
	{
		dequeue(&(delayQue.IDque), &tmpID);
    5c58:	67 66 c7 44 24 04 cc 	mov    DWORD PTR [esp+0x4],0xe8cc
    5c5f:	e8 00 00 
    5c62:	67 66 c7 04 24 20 a2 	mov    DWORD PTR [esp],0xa220
    5c69:	00 00 
    5c6b:	66 e8 4a 19 00 00    	call   75bb <_dequeue>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:807
		dequeue(&(delayQue.clocksQue), &tmpClocks);
    5c71:	67 66 c7 44 24 04 c4 	mov    DWORD PTR [esp+0x4],0xe8c4
    5c78:	e8 00 00 
    5c7b:	67 66 c7 04 24 7c a2 	mov    DWORD PTR [esp],0xa27c
    5c82:	00 00 
    5c84:	66 e8 31 19 00 00    	call   75bb <_dequeue>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:808
		tmpClocks -= 1;
    5c8a:	66 a1 c4 e8          	mov    eax,ds:0xe8c4
    5c8e:	66 48                	dec    eax
    5c90:	66 a3 c4 e8          	mov    ds:0xe8c4,eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:809
		if (tmpClocks <= 0) {
    5c94:	66 a1 c4 e8          	mov    eax,ds:0xe8c4
    5c98:	66 85 c0             	test   eax,eax
    5c9b:	7f 11                	jg     5cae <_passOneClock+0x80>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:810
			wakeup(tmpID);
    5c9d:	66 a1 cc e8          	mov    eax,ds:0xe8cc
    5ca1:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    5ca6:	66 e8 04 f0 ff ff    	call   4cb0 <_wakeup>
    5cac:	eb 32                	jmp    5ce0 <_passOneClock+0xb2>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:812
		} else {
			enqueue(&(delayQue.IDque), tmpID);
    5cae:	66 a1 cc e8          	mov    eax,ds:0xe8cc
    5cb2:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    5cb8:	67 66 c7 04 24 20 a2 	mov    DWORD PTR [esp],0xa220
    5cbf:	00 00 
    5cc1:	66 e8 87 18 00 00    	call   754e <_enqueue>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:813
			enqueue(&(delayQue.clocksQue), tmpClocks);
    5cc7:	66 a1 c4 e8          	mov    eax,ds:0xe8c4
    5ccb:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    5cd1:	67 66 c7 04 24 7c a2 	mov    DWORD PTR [esp],0xa27c
    5cd8:	00 00 
    5cda:	66 e8 6e 18 00 00    	call   754e <_enqueue>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:804
	for (int i = 0; i < queSize; ++i)
    5ce0:	67 66 ff 45 fc       	inc    DWORD PTR [ebp-0x4]
    5ce5:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
    5cea:	67 66 3b 45 f8       	cmp    eax,DWORD PTR [ebp-0x8]
    5cef:	0f 8c 65 ff          	jl     5c58 <_passOneClock+0x2a>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:816
		}
	}
	__asm__("sti\n");
    5cf3:	fb                   	sti    
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:817
}
    5cf4:	90                   	nop
    5cf5:	66 c9                	leave  
    5cf7:	66 c3                	ret    

00005cf9 <_processSwitch>:
processSwitch():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:820

void processSwitch()
{
    5cf9:	66 55                	push   ebp
    5cfb:	66 89 e5             	mov    ebp,esp
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:821
	__asm__("sti\n");
    5cfe:	fb                   	sti    
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:822
	__asm__("int $0x8\n");
    5cff:	cd 08                	int    0x8
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:823
	__asm__("cli\n");
    5d01:	fa                   	cli    
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:824
}
    5d02:	90                   	nop
    5d03:	66 5d                	pop    ebp
    5d05:	66 c3                	ret    

00005d07 <_malloc>:
malloc():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:830
///////////// process ends //////////


//////////// memory /////////////
void * malloc(int size)
{
    5d07:	66 55                	push   ebp
    5d09:	66 89 e5             	mov    ebp,esp
    5d0c:	66 83 ec 30          	sub    esp,0x30
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:832
	int ds;
	__asm__("mov %gs, %eax\n");
    5d10:	66 8c e8             	mov    eax,gs
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:833
	__asm__("pushl %eax");
    5d13:	66 50                	push   eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:834
	__asm__("popl %0":"=m"(ds));
    5d15:	67 66 8f 45 e8       	pop    DWORD PTR [ebp-0x18]
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:839
	//ds现在是gs(ds)寄存器的值。
	char tmpstr[10];
	// int2str(ds, tmpstr);
	// printSentence(tmpstr, 12, 0, 5, white);
	size = size + (16 - size % 16);
    5d1a:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    5d1f:	66 25 0f 00 00 80    	and    eax,0x8000000f
    5d25:	66 85 c0             	test   eax,eax
    5d28:	79 08                	jns    5d32 <_malloc+0x2b>
    5d2a:	66 48                	dec    eax
    5d2c:	66 83 c8 f0          	or     eax,0xfffffff0
    5d30:	66 40                	inc    eax
    5d32:	66 ba 10 00 00 00    	mov    edx,0x10
    5d38:	66 29 c2             	sub    edx,eax
    5d3b:	66 89 d0             	mov    eax,edx
    5d3e:	67 66 01 45 08       	add    DWORD PTR [ebp+0x8],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:840
	int begin = 0;
    5d43:	67 66 c7 45 fc 00 00 	mov    DWORD PTR [ebp-0x4],0x0
    5d4a:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:841
	for (int j = 0; j < MemLen; ++j) {
    5d4c:	67 66 c7 45 f8 00 00 	mov    DWORD PTR [ebp-0x8],0x0
    5d53:	00 00 
    5d55:	e9 4e 01             	jmp    5ea6 <_malloc+0x19f>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:842
		int blockNum = findLaterBlock(ds << 4, size, begin);
    5d58:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
    5d5d:	66 c1 e0 04          	shl    eax,0x4
    5d61:	66 89 c2             	mov    edx,eax
    5d64:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
    5d69:	67 66 89 44 24 08    	mov    DWORD PTR [esp+0x8],eax
    5d6f:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    5d74:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    5d7a:	67 66 89 14 24       	mov    DWORD PTR [esp],edx
    5d7f:	66 e8 96 0c 00 00    	call   6a1b <_findLaterBlock>
    5d85:	67 66 89 45 f0       	mov    DWORD PTR [ebp-0x10],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:843
		int endDs = ((memoryTable[blockNum].beginAddr + size) & 0xf0000) >> 4;
    5d8a:	67 66 8b 55 f0       	mov    edx,DWORD PTR [ebp-0x10]
    5d8f:	66 89 d0             	mov    eax,edx
    5d92:	66 01 c0             	add    eax,eax
    5d95:	66 01 d0             	add    eax,edx
    5d98:	66 c1 e0 03          	shl    eax,0x3
    5d9c:	66 05 e0 a2 00 00    	add    eax,0xa2e0
    5da2:	67 66 8b 10          	mov    edx,DWORD PTR [eax]
    5da6:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    5dab:	66 01 d0             	add    eax,edx
    5dae:	66 c1 f8 04          	sar    eax,0x4
    5db2:	66 25 00 f0 00 00    	and    eax,0xf000
    5db8:	67 66 89 45 ec       	mov    DWORD PTR [ebp-0x14],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:844
		if (endDs <= ds) {
    5dbd:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
    5dc2:	67 66 39 45 ec       	cmp    DWORD PTR [ebp-0x14],eax
    5dc7:	0f 8f cc 00          	jg     5e97 <_malloc+0x190>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:845
			blockNum = require(size, blockNum);
    5dcb:	67 66 8b 45 f0       	mov    eax,DWORD PTR [ebp-0x10]
    5dd0:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    5dd6:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    5ddb:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    5de0:	66 e8 ff 0f 00 00    	call   6de5 <_require>
    5de6:	67 66 89 45 f0       	mov    DWORD PTR [ebp-0x10],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:846
			int i = 0;
    5deb:	67 66 c7 45 f4 00 00 	mov    DWORD PTR [ebp-0xc],0x0
    5df2:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:847
			for (; i < HeapLimit; ++i)
    5df4:	eb 6f                	jmp    5e65 <_malloc+0x15e>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:849
			{
				if (processTable[curProcessId].heapArray[i] == -1) {
    5df6:	66 8b 16 40 e8       	mov    edx,DWORD PTR ds:0xe840
    5dfb:	66 89 d0             	mov    eax,edx
    5dfe:	66 c1 e0 03          	shl    eax,0x3
    5e02:	66 01 d0             	add    eax,edx
    5e05:	66 01 c0             	add    eax,eax
    5e08:	66 01 d0             	add    eax,edx
    5e0b:	66 c1 e0 02          	shl    eax,0x2
    5e0f:	67 66 8b 55 f4       	mov    edx,DWORD PTR [ebp-0xc]
    5e14:	66 01 d0             	add    eax,edx
    5e17:	66 83 c0 18          	add    eax,0x18
    5e1b:	67 66 8b 04 85 84 d0 	mov    eax,DWORD PTR [eax*4+0xd084]
    5e22:	00 00 
    5e24:	66 83 f8 ff          	cmp    eax,0xffffffff
    5e28:	75 36                	jne    5e60 <_malloc+0x159>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:850
					processTable[curProcessId].heapArray[i] = blockNum;
    5e2a:	66 8b 16 40 e8       	mov    edx,DWORD PTR ds:0xe840
    5e2f:	66 89 d0             	mov    eax,edx
    5e32:	66 c1 e0 03          	shl    eax,0x3
    5e36:	66 01 d0             	add    eax,edx
    5e39:	66 01 c0             	add    eax,eax
    5e3c:	66 01 d0             	add    eax,edx
    5e3f:	66 c1 e0 02          	shl    eax,0x2
    5e43:	67 66 8b 55 f4       	mov    edx,DWORD PTR [ebp-0xc]
    5e48:	66 01 d0             	add    eax,edx
    5e4b:	67 66 8d 50 18       	lea    edx,[eax+0x18]
    5e50:	67 66 8b 45 f0       	mov    eax,DWORD PTR [ebp-0x10]
    5e55:	67 66 89 04 95 84 d0 	mov    DWORD PTR [edx*4+0xd084],eax
    5e5c:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:851
					break;
    5e5e:	eb 0d                	jmp    5e6d <_malloc+0x166>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:847
			for (; i < HeapLimit; ++i)
    5e60:	67 66 ff 45 f4       	inc    DWORD PTR [ebp-0xc]
    5e65:	67 66 83 7d f4 04    	cmp    DWORD PTR [ebp-0xc],0x4
    5e6b:	7e 89                	jle    5df6 <_malloc+0xef>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:854
				}
			}
			return (void*)((memoryTable[blockNum].beginAddr) - (ds << 4));
    5e6d:	67 66 8b 55 f0       	mov    edx,DWORD PTR [ebp-0x10]
    5e72:	66 89 d0             	mov    eax,edx
    5e75:	66 01 c0             	add    eax,eax
    5e78:	66 01 d0             	add    eax,edx
    5e7b:	66 c1 e0 03          	shl    eax,0x3
    5e7f:	66 05 e0 a2 00 00    	add    eax,0xa2e0
    5e85:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    5e89:	67 66 8b 55 e8       	mov    edx,DWORD PTR [ebp-0x18]
    5e8e:	66 c1 e2 04          	shl    edx,0x4
    5e92:	66 29 d0             	sub    eax,edx
    5e95:	eb 1f                	jmp    5eb6 <_malloc+0x1af>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:856
		} else {
			begin = blockNum;
    5e97:	67 66 8b 45 f0       	mov    eax,DWORD PTR [ebp-0x10]
    5e9c:	67 66 89 45 fc       	mov    DWORD PTR [ebp-0x4],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:841
	for (int j = 0; j < MemLen; ++j) {
    5ea1:	67 66 ff 45 f8       	inc    DWORD PTR [ebp-0x8]
    5ea6:	67 66 83 7d f8 27    	cmp    DWORD PTR [ebp-0x8],0x27
    5eac:	0f 8e a8 fe          	jle    5d58 <_malloc+0x51>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:859
		}
	}
	return NULL;
    5eb0:	66 b8 00 00 00 00    	mov    eax,0x0
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:860
}
    5eb6:	66 c9                	leave  
    5eb8:	66 c3                	ret    

00005eba <_free>:
free():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:863

void free(void * ptr, int ds)
{
    5eba:	66 55                	push   ebp
    5ebc:	66 89 e5             	mov    ebp,esp
    5ebf:	66 83 ec 0c          	sub    esp,0xc
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:864
	int item = findItem((int)ptr + (ds << 4));
    5ec3:	67 66 8b 45 0c       	mov    eax,DWORD PTR [ebp+0xc]
    5ec8:	66 c1 e0 04          	shl    eax,0x4
    5ecc:	66 89 c2             	mov    edx,eax
    5ecf:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    5ed4:	66 01 d0             	add    eax,edx
    5ed7:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    5edc:	66 e8 c8 0a 00 00    	call   69aa <_findItem>
    5ee2:	67 66 89 45 fc       	mov    DWORD PTR [ebp-0x4],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:865
	if (item != -1) {
    5ee7:	67 66 83 7d fc ff    	cmp    DWORD PTR [ebp-0x4],0xffffffff
    5eed:	74 49                	je     5f38 <_free+0x7e>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:866
		release(memoryTable[item].beginAddr, memoryTable[item].endAddr);
    5eef:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    5ef4:	66 89 d0             	mov    eax,edx
    5ef7:	66 01 c0             	add    eax,eax
    5efa:	66 01 d0             	add    eax,edx
    5efd:	66 c1 e0 03          	shl    eax,0x3
    5f01:	66 05 e4 a2 00 00    	add    eax,0xa2e4
    5f07:	67 66 8b 10          	mov    edx,DWORD PTR [eax]
    5f0b:	67 66 8b 4d fc       	mov    ecx,DWORD PTR [ebp-0x4]
    5f10:	66 89 c8             	mov    eax,ecx
    5f13:	66 01 c0             	add    eax,eax
    5f16:	66 01 c8             	add    eax,ecx
    5f19:	66 c1 e0 03          	shl    eax,0x3
    5f1d:	66 05 e0 a2 00 00    	add    eax,0xa2e0
    5f23:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    5f27:	67 66 89 54 24 04    	mov    DWORD PTR [esp+0x4],edx
    5f2d:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    5f32:	66 e8 b1 0d 00 00    	call   6ce9 <_release>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:868
	}
}
    5f38:	90                   	nop
    5f39:	66 c9                	leave  
    5f3b:	66 c3                	ret    

00005f3d <_nextUnusedItem>:
nextUnusedItem():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:871

int nextUnusedItem()
{
    5f3d:	66 55                	push   ebp
    5f3f:	66 89 e5             	mov    ebp,esp
    5f42:	66 83 ec 04          	sub    esp,0x4
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:872
	for (int i = 0; i < MemLen; ++i)
    5f46:	67 66 c7 45 fc 00 00 	mov    DWORD PTR [ebp-0x4],0x0
    5f4d:	00 00 
    5f4f:	eb 2d                	jmp    5f7e <_nextUnusedItem+0x41>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:874
	{
		if (memoryTable[i].used == 0)
    5f51:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    5f56:	66 89 d0             	mov    eax,edx
    5f59:	66 01 c0             	add    eax,eax
    5f5c:	66 01 d0             	add    eax,edx
    5f5f:	66 c1 e0 03          	shl    eax,0x3
    5f63:	66 05 f0 a2 00 00    	add    eax,0xa2f0
    5f69:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    5f6d:	66 85 c0             	test   eax,eax
    5f70:	75 07                	jne    5f79 <_nextUnusedItem+0x3c>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:875
			return i;
    5f72:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
    5f77:	eb 13                	jmp    5f8c <_nextUnusedItem+0x4f>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:872
	for (int i = 0; i < MemLen; ++i)
    5f79:	67 66 ff 45 fc       	inc    DWORD PTR [ebp-0x4]
    5f7e:	67 66 83 7d fc 27    	cmp    DWORD PTR [ebp-0x4],0x27
    5f84:	7e cb                	jle    5f51 <_nextUnusedItem+0x14>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:877
	}
	return -1;
    5f86:	66 b8 ff ff ff ff    	mov    eax,0xffffffff
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:878
}
    5f8c:	66 c9                	leave  
    5f8e:	66 c3                	ret    

00005f90 <_initialMemoryTable>:
initialMemoryTable():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:881

void initialMemoryTable()
{
    5f90:	66 55                	push   ebp
    5f92:	66 89 e5             	mov    ebp,esp
    5f95:	66 83 ec 08          	sub    esp,0x8
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:883
	int next;
	for (int i = 0; i < MemLen; ++i)
    5f99:	67 66 c7 45 fc 00 00 	mov    DWORD PTR [ebp-0x4],0x0
    5fa0:	00 00 
    5fa2:	e9 85 00             	jmp    602a <_initialMemoryTable+0x9a>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:885
	{
		memoryTable[i].used = 0;
    5fa5:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    5faa:	66 89 d0             	mov    eax,edx
    5fad:	66 01 c0             	add    eax,eax
    5fb0:	66 01 d0             	add    eax,edx
    5fb3:	66 c1 e0 03          	shl    eax,0x3
    5fb7:	66 05 f0 a2 00 00    	add    eax,0xa2f0
    5fbd:	67 66 c7 00 00 00 00 	mov    DWORD PTR [eax],0x0
    5fc4:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:886
		memoryTable[i].next = -1;
    5fc5:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    5fca:	66 89 d0             	mov    eax,edx
    5fcd:	66 01 c0             	add    eax,eax
    5fd0:	66 01 d0             	add    eax,edx
    5fd3:	66 c1 e0 03          	shl    eax,0x3
    5fd7:	66 05 ec a2 00 00    	add    eax,0xa2ec
    5fdd:	67 66 c7 00 ff ff ff 	mov    DWORD PTR [eax],0xffffffff
    5fe4:	ff 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:887
		memoryTable[i].pre = -1;
    5fe5:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    5fea:	66 89 d0             	mov    eax,edx
    5fed:	66 01 c0             	add    eax,eax
    5ff0:	66 01 d0             	add    eax,edx
    5ff3:	66 c1 e0 03          	shl    eax,0x3
    5ff7:	66 05 e8 a2 00 00    	add    eax,0xa2e8
    5ffd:	67 66 c7 00 ff ff ff 	mov    DWORD PTR [eax],0xffffffff
    6004:	ff 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:888
		memoryTable[i].status = unused;
    6005:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    600a:	66 89 d0             	mov    eax,edx
    600d:	66 01 c0             	add    eax,eax
    6010:	66 01 d0             	add    eax,edx
    6013:	66 c1 e0 03          	shl    eax,0x3
    6017:	66 05 f4 a2 00 00    	add    eax,0xa2f4
    601d:	67 66 c7 00 00 00 00 	mov    DWORD PTR [eax],0x0
    6024:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:883
	for (int i = 0; i < MemLen; ++i)
    6025:	67 66 ff 45 fc       	inc    DWORD PTR [ebp-0x4]
    602a:	67 66 83 7d fc 27    	cmp    DWORD PTR [ebp-0x4],0x27
    6030:	0f 8e 71 ff          	jle    5fa5 <_initialMemoryTable+0x15>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:890
	}
	firstUnusedMemoryItem = 0;
    6034:	66 c7 06 04 a2 00 00 	mov    DWORD PTR ds:0xa204,0x0
    603b:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:891
	memoryTable[firstUnusedMemoryItem].pre = -1;
    603d:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    6042:	66 89 d0             	mov    eax,edx
    6045:	66 01 c0             	add    eax,eax
    6048:	66 01 d0             	add    eax,edx
    604b:	66 c1 e0 03          	shl    eax,0x3
    604f:	66 05 e8 a2 00 00    	add    eax,0xa2e8
    6055:	67 66 c7 00 ff ff ff 	mov    DWORD PTR [eax],0xffffffff
    605c:	ff 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:892
	memoryTable[firstUnusedMemoryItem].used = 1;
    605d:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    6062:	66 89 d0             	mov    eax,edx
    6065:	66 01 c0             	add    eax,eax
    6068:	66 01 d0             	add    eax,edx
    606b:	66 c1 e0 03          	shl    eax,0x3
    606f:	66 05 f0 a2 00 00    	add    eax,0xa2f0
    6075:	67 66 c7 00 01 00 00 	mov    DWORD PTR [eax],0x1
    607c:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:893
	memoryTable[firstUnusedMemoryItem].beginAddr = 0;
    607d:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    6082:	66 89 d0             	mov    eax,edx
    6085:	66 01 c0             	add    eax,eax
    6088:	66 01 d0             	add    eax,edx
    608b:	66 c1 e0 03          	shl    eax,0x3
    608f:	66 05 e0 a2 00 00    	add    eax,0xa2e0
    6095:	67 66 c7 00 00 00 00 	mov    DWORD PTR [eax],0x0
    609c:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:894
	memoryTable[firstUnusedMemoryItem].endAddr = 0x4ff;
    609d:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    60a2:	66 89 d0             	mov    eax,edx
    60a5:	66 01 c0             	add    eax,eax
    60a8:	66 01 d0             	add    eax,edx
    60ab:	66 c1 e0 03          	shl    eax,0x3
    60af:	66 05 e4 a2 00 00    	add    eax,0xa2e4
    60b5:	67 66 c7 00 ff 04 00 	mov    DWORD PTR [eax],0x4ff
    60bc:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:895
	memoryTable[firstUnusedMemoryItem].status = used;
    60bd:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    60c2:	66 89 d0             	mov    eax,edx
    60c5:	66 01 c0             	add    eax,eax
    60c8:	66 01 d0             	add    eax,edx
    60cb:	66 c1 e0 03          	shl    eax,0x3
    60cf:	66 05 f4 a2 00 00    	add    eax,0xa2f4
    60d5:	67 66 c7 00 01 00 00 	mov    DWORD PTR [eax],0x1
    60dc:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:896
	next = nextUnusedItem();
    60dd:	66 e8 5a fe ff ff    	call   5f3d <_nextUnusedItem>
    60e3:	67 66 89 45 f8       	mov    DWORD PTR [ebp-0x8],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:897
	memoryTable[next].pre = firstUnusedMemoryItem;
    60e8:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    60ed:	67 66 8b 4d f8       	mov    ecx,DWORD PTR [ebp-0x8]
    60f2:	66 89 c8             	mov    eax,ecx
    60f5:	66 01 c0             	add    eax,eax
    60f8:	66 01 c8             	add    eax,ecx
    60fb:	66 c1 e0 03          	shl    eax,0x3
    60ff:	66 05 e8 a2 00 00    	add    eax,0xa2e8
    6105:	67 66 89 10          	mov    DWORD PTR [eax],edx
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:898
	memoryTable[firstUnusedMemoryItem].next = next;
    6109:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    610e:	66 89 d0             	mov    eax,edx
    6111:	66 01 c0             	add    eax,eax
    6114:	66 01 d0             	add    eax,edx
    6117:	66 c1 e0 03          	shl    eax,0x3
    611b:	67 66 8d 90 ec a2 00 	lea    edx,[eax+0xa2ec]
    6122:	00 
    6123:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
    6128:	67 66 89 02          	mov    DWORD PTR [edx],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:899
	firstUnusedMemoryItem = next;
    612c:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
    6131:	66 a3 04 a2          	mov    ds:0xa204,eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:901

	memoryTable[firstUnusedMemoryItem].used = 1;
    6135:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    613a:	66 89 d0             	mov    eax,edx
    613d:	66 01 c0             	add    eax,eax
    6140:	66 01 d0             	add    eax,edx
    6143:	66 c1 e0 03          	shl    eax,0x3
    6147:	66 05 f0 a2 00 00    	add    eax,0xa2f0
    614d:	67 66 c7 00 01 00 00 	mov    DWORD PTR [eax],0x1
    6154:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:902
	memoryTable[firstUnusedMemoryItem].beginAddr = 0x500;
    6155:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    615a:	66 89 d0             	mov    eax,edx
    615d:	66 01 c0             	add    eax,eax
    6160:	66 01 d0             	add    eax,edx
    6163:	66 c1 e0 03          	shl    eax,0x3
    6167:	66 05 e0 a2 00 00    	add    eax,0xa2e0
    616d:	67 66 c7 00 00 05 00 	mov    DWORD PTR [eax],0x500
    6174:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:903
	memoryTable[firstUnusedMemoryItem].endAddr = 0x7cff;
    6175:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    617a:	66 89 d0             	mov    eax,edx
    617d:	66 01 c0             	add    eax,eax
    6180:	66 01 d0             	add    eax,edx
    6183:	66 c1 e0 03          	shl    eax,0x3
    6187:	66 05 e4 a2 00 00    	add    eax,0xa2e4
    618d:	67 66 c7 00 ff 7c 00 	mov    DWORD PTR [eax],0x7cff
    6194:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:904
	memoryTable[firstUnusedMemoryItem].status = unused;
    6195:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    619a:	66 89 d0             	mov    eax,edx
    619d:	66 01 c0             	add    eax,eax
    61a0:	66 01 d0             	add    eax,edx
    61a3:	66 c1 e0 03          	shl    eax,0x3
    61a7:	66 05 f4 a2 00 00    	add    eax,0xa2f4
    61ad:	67 66 c7 00 00 00 00 	mov    DWORD PTR [eax],0x0
    61b4:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:905
	next = nextUnusedItem();
    61b5:	66 e8 82 fd ff ff    	call   5f3d <_nextUnusedItem>
    61bb:	67 66 89 45 f8       	mov    DWORD PTR [ebp-0x8],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:906
	memoryTable[next].pre = firstUnusedMemoryItem;
    61c0:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    61c5:	67 66 8b 4d f8       	mov    ecx,DWORD PTR [ebp-0x8]
    61ca:	66 89 c8             	mov    eax,ecx
    61cd:	66 01 c0             	add    eax,eax
    61d0:	66 01 c8             	add    eax,ecx
    61d3:	66 c1 e0 03          	shl    eax,0x3
    61d7:	66 05 e8 a2 00 00    	add    eax,0xa2e8
    61dd:	67 66 89 10          	mov    DWORD PTR [eax],edx
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:907
	memoryTable[firstUnusedMemoryItem].next = next;
    61e1:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    61e6:	66 89 d0             	mov    eax,edx
    61e9:	66 01 c0             	add    eax,eax
    61ec:	66 01 d0             	add    eax,edx
    61ef:	66 c1 e0 03          	shl    eax,0x3
    61f3:	67 66 8d 90 ec a2 00 	lea    edx,[eax+0xa2ec]
    61fa:	00 
    61fb:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
    6200:	67 66 89 02          	mov    DWORD PTR [edx],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:908
	firstUnusedMemoryItem = next;
    6204:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
    6209:	66 a3 04 a2          	mov    ds:0xa204,eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:911


	memoryTable[firstUnusedMemoryItem].used = 1;
    620d:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    6212:	66 89 d0             	mov    eax,edx
    6215:	66 01 c0             	add    eax,eax
    6218:	66 01 d0             	add    eax,edx
    621b:	66 c1 e0 03          	shl    eax,0x3
    621f:	66 05 f0 a2 00 00    	add    eax,0xa2f0
    6225:	67 66 c7 00 01 00 00 	mov    DWORD PTR [eax],0x1
    622c:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:912
	memoryTable[firstUnusedMemoryItem].beginAddr = 0x7e00;
    622d:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    6232:	66 89 d0             	mov    eax,edx
    6235:	66 01 c0             	add    eax,eax
    6238:	66 01 d0             	add    eax,edx
    623b:	66 c1 e0 03          	shl    eax,0x3
    623f:	66 05 e0 a2 00 00    	add    eax,0xa2e0
    6245:	67 66 c7 00 00 7e 00 	mov    DWORD PTR [eax],0x7e00
    624c:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:913
	memoryTable[firstUnusedMemoryItem].endAddr = 0x7dff;
    624d:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    6252:	66 89 d0             	mov    eax,edx
    6255:	66 01 c0             	add    eax,eax
    6258:	66 01 d0             	add    eax,edx
    625b:	66 c1 e0 03          	shl    eax,0x3
    625f:	66 05 e4 a2 00 00    	add    eax,0xa2e4
    6265:	67 66 c7 00 ff 7d 00 	mov    DWORD PTR [eax],0x7dff
    626c:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:914
	memoryTable[firstUnusedMemoryItem].status = used;
    626d:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    6272:	66 89 d0             	mov    eax,edx
    6275:	66 01 c0             	add    eax,eax
    6278:	66 01 d0             	add    eax,edx
    627b:	66 c1 e0 03          	shl    eax,0x3
    627f:	66 05 f4 a2 00 00    	add    eax,0xa2f4
    6285:	67 66 c7 00 01 00 00 	mov    DWORD PTR [eax],0x1
    628c:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:915
	next = nextUnusedItem();
    628d:	66 e8 aa fc ff ff    	call   5f3d <_nextUnusedItem>
    6293:	67 66 89 45 f8       	mov    DWORD PTR [ebp-0x8],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:916
	memoryTable[next].pre = firstUnusedMemoryItem;
    6298:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    629d:	67 66 8b 4d f8       	mov    ecx,DWORD PTR [ebp-0x8]
    62a2:	66 89 c8             	mov    eax,ecx
    62a5:	66 01 c0             	add    eax,eax
    62a8:	66 01 c8             	add    eax,ecx
    62ab:	66 c1 e0 03          	shl    eax,0x3
    62af:	66 05 e8 a2 00 00    	add    eax,0xa2e8
    62b5:	67 66 89 10          	mov    DWORD PTR [eax],edx
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:917
	memoryTable[firstUnusedMemoryItem].next = next;
    62b9:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    62be:	66 89 d0             	mov    eax,edx
    62c1:	66 01 c0             	add    eax,eax
    62c4:	66 01 d0             	add    eax,edx
    62c7:	66 c1 e0 03          	shl    eax,0x3
    62cb:	67 66 8d 90 ec a2 00 	lea    edx,[eax+0xa2ec]
    62d2:	00 
    62d3:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
    62d8:	67 66 89 02          	mov    DWORD PTR [edx],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:918
	firstUnusedMemoryItem = next;
    62dc:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
    62e1:	66 a3 04 a2          	mov    ds:0xa204,eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:920

	memoryTable[firstUnusedMemoryItem].used = 1;
    62e5:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    62ea:	66 89 d0             	mov    eax,edx
    62ed:	66 01 c0             	add    eax,eax
    62f0:	66 01 d0             	add    eax,edx
    62f3:	66 c1 e0 03          	shl    eax,0x3
    62f7:	66 05 f0 a2 00 00    	add    eax,0xa2f0
    62fd:	67 66 c7 00 01 00 00 	mov    DWORD PTR [eax],0x1
    6304:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:921
	memoryTable[firstUnusedMemoryItem].beginAddr = 0x7e00;
    6305:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    630a:	66 89 d0             	mov    eax,edx
    630d:	66 01 c0             	add    eax,eax
    6310:	66 01 d0             	add    eax,edx
    6313:	66 c1 e0 03          	shl    eax,0x3
    6317:	66 05 e0 a2 00 00    	add    eax,0xa2e0
    631d:	67 66 c7 00 00 7e 00 	mov    DWORD PTR [eax],0x7e00
    6324:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:922
	memoryTable[firstUnusedMemoryItem].endAddr = 0xc1ff;
    6325:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    632a:	66 89 d0             	mov    eax,edx
    632d:	66 01 c0             	add    eax,eax
    6330:	66 01 d0             	add    eax,edx
    6333:	66 c1 e0 03          	shl    eax,0x3
    6337:	66 05 e4 a2 00 00    	add    eax,0xa2e4
    633d:	67 66 c7 00 ff c1 00 	mov    DWORD PTR [eax],0xc1ff
    6344:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:923
	memoryTable[firstUnusedMemoryItem].status = unused;
    6345:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    634a:	66 89 d0             	mov    eax,edx
    634d:	66 01 c0             	add    eax,eax
    6350:	66 01 d0             	add    eax,edx
    6353:	66 c1 e0 03          	shl    eax,0x3
    6357:	66 05 f4 a2 00 00    	add    eax,0xa2f4
    635d:	67 66 c7 00 00 00 00 	mov    DWORD PTR [eax],0x0
    6364:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:924
	next = nextUnusedItem();
    6365:	66 e8 d2 fb ff ff    	call   5f3d <_nextUnusedItem>
    636b:	67 66 89 45 f8       	mov    DWORD PTR [ebp-0x8],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:925
	memoryTable[next].pre = firstUnusedMemoryItem;
    6370:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    6375:	67 66 8b 4d f8       	mov    ecx,DWORD PTR [ebp-0x8]
    637a:	66 89 c8             	mov    eax,ecx
    637d:	66 01 c0             	add    eax,eax
    6380:	66 01 c8             	add    eax,ecx
    6383:	66 c1 e0 03          	shl    eax,0x3
    6387:	66 05 e8 a2 00 00    	add    eax,0xa2e8
    638d:	67 66 89 10          	mov    DWORD PTR [eax],edx
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:926
	memoryTable[firstUnusedMemoryItem].next = next;
    6391:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    6396:	66 89 d0             	mov    eax,edx
    6399:	66 01 c0             	add    eax,eax
    639c:	66 01 d0             	add    eax,edx
    639f:	66 c1 e0 03          	shl    eax,0x3
    63a3:	67 66 8d 90 ec a2 00 	lea    edx,[eax+0xa2ec]
    63aa:	00 
    63ab:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
    63b0:	67 66 89 02          	mov    DWORD PTR [edx],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:927
	firstUnusedMemoryItem = next;
    63b4:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
    63b9:	66 a3 04 a2          	mov    ds:0xa204,eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:929

	memoryTable[firstUnusedMemoryItem].used = 1;
    63bd:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    63c2:	66 89 d0             	mov    eax,edx
    63c5:	66 01 c0             	add    eax,eax
    63c8:	66 01 d0             	add    eax,edx
    63cb:	66 c1 e0 03          	shl    eax,0x3
    63cf:	66 05 f0 a2 00 00    	add    eax,0xa2f0
    63d5:	67 66 c7 00 01 00 00 	mov    DWORD PTR [eax],0x1
    63dc:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:930
	memoryTable[firstUnusedMemoryItem].beginAddr = 0xc200;
    63dd:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    63e2:	66 89 d0             	mov    eax,edx
    63e5:	66 01 c0             	add    eax,eax
    63e8:	66 01 d0             	add    eax,edx
    63eb:	66 c1 e0 03          	shl    eax,0x3
    63ef:	66 05 e0 a2 00 00    	add    eax,0xa2e0
    63f5:	67 66 c7 00 00 c2 00 	mov    DWORD PTR [eax],0xc200
    63fc:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:931
	memoryTable[firstUnusedMemoryItem].endAddr = 0xc9ff;
    63fd:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    6402:	66 89 d0             	mov    eax,edx
    6405:	66 01 c0             	add    eax,eax
    6408:	66 01 d0             	add    eax,edx
    640b:	66 c1 e0 03          	shl    eax,0x3
    640f:	66 05 e4 a2 00 00    	add    eax,0xa2e4
    6415:	67 66 c7 00 ff c9 00 	mov    DWORD PTR [eax],0xc9ff
    641c:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:932
	memoryTable[firstUnusedMemoryItem].status = used;
    641d:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    6422:	66 89 d0             	mov    eax,edx
    6425:	66 01 c0             	add    eax,eax
    6428:	66 01 d0             	add    eax,edx
    642b:	66 c1 e0 03          	shl    eax,0x3
    642f:	66 05 f4 a2 00 00    	add    eax,0xa2f4
    6435:	67 66 c7 00 01 00 00 	mov    DWORD PTR [eax],0x1
    643c:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:933
	next = nextUnusedItem();
    643d:	66 e8 fa fa ff ff    	call   5f3d <_nextUnusedItem>
    6443:	67 66 89 45 f8       	mov    DWORD PTR [ebp-0x8],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:934
	memoryTable[next].pre = firstUnusedMemoryItem;
    6448:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    644d:	67 66 8b 4d f8       	mov    ecx,DWORD PTR [ebp-0x8]
    6452:	66 89 c8             	mov    eax,ecx
    6455:	66 01 c0             	add    eax,eax
    6458:	66 01 c8             	add    eax,ecx
    645b:	66 c1 e0 03          	shl    eax,0x3
    645f:	66 05 e8 a2 00 00    	add    eax,0xa2e8
    6465:	67 66 89 10          	mov    DWORD PTR [eax],edx
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:935
	memoryTable[firstUnusedMemoryItem].next = next;
    6469:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    646e:	66 89 d0             	mov    eax,edx
    6471:	66 01 c0             	add    eax,eax
    6474:	66 01 d0             	add    eax,edx
    6477:	66 c1 e0 03          	shl    eax,0x3
    647b:	67 66 8d 90 ec a2 00 	lea    edx,[eax+0xa2ec]
    6482:	00 
    6483:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
    6488:	67 66 89 02          	mov    DWORD PTR [edx],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:936
	firstUnusedMemoryItem = next;
    648c:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
    6491:	66 a3 04 a2          	mov    ds:0xa204,eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:938

	memoryTable[firstUnusedMemoryItem].used = 1;
    6495:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    649a:	66 89 d0             	mov    eax,edx
    649d:	66 01 c0             	add    eax,eax
    64a0:	66 01 d0             	add    eax,edx
    64a3:	66 c1 e0 03          	shl    eax,0x3
    64a7:	66 05 f0 a2 00 00    	add    eax,0xa2f0
    64ad:	67 66 c7 00 01 00 00 	mov    DWORD PTR [eax],0x1
    64b4:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:939
	memoryTable[firstUnusedMemoryItem].beginAddr = 0xca00;
    64b5:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    64ba:	66 89 d0             	mov    eax,edx
    64bd:	66 01 c0             	add    eax,eax
    64c0:	66 01 d0             	add    eax,edx
    64c3:	66 c1 e0 03          	shl    eax,0x3
    64c7:	66 05 e0 a2 00 00    	add    eax,0xa2e0
    64cd:	67 66 c7 00 00 ca 00 	mov    DWORD PTR [eax],0xca00
    64d4:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:940
	memoryTable[firstUnusedMemoryItem].endAddr = 0x1ffff;
    64d5:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    64da:	66 89 d0             	mov    eax,edx
    64dd:	66 01 c0             	add    eax,eax
    64e0:	66 01 d0             	add    eax,edx
    64e3:	66 c1 e0 03          	shl    eax,0x3
    64e7:	66 05 e4 a2 00 00    	add    eax,0xa2e4
    64ed:	67 66 c7 00 ff ff 01 	mov    DWORD PTR [eax],0x1ffff
    64f4:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:941
	memoryTable[firstUnusedMemoryItem].status = unused;
    64f5:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    64fa:	66 89 d0             	mov    eax,edx
    64fd:	66 01 c0             	add    eax,eax
    6500:	66 01 d0             	add    eax,edx
    6503:	66 c1 e0 03          	shl    eax,0x3
    6507:	66 05 f4 a2 00 00    	add    eax,0xa2f4
    650d:	67 66 c7 00 00 00 00 	mov    DWORD PTR [eax],0x0
    6514:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:942
	next = nextUnusedItem();
    6515:	66 e8 22 fa ff ff    	call   5f3d <_nextUnusedItem>
    651b:	67 66 89 45 f8       	mov    DWORD PTR [ebp-0x8],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:943
	memoryTable[next].pre = firstUnusedMemoryItem;
    6520:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    6525:	67 66 8b 4d f8       	mov    ecx,DWORD PTR [ebp-0x8]
    652a:	66 89 c8             	mov    eax,ecx
    652d:	66 01 c0             	add    eax,eax
    6530:	66 01 c8             	add    eax,ecx
    6533:	66 c1 e0 03          	shl    eax,0x3
    6537:	66 05 e8 a2 00 00    	add    eax,0xa2e8
    653d:	67 66 89 10          	mov    DWORD PTR [eax],edx
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:944
	memoryTable[firstUnusedMemoryItem].next = next;
    6541:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    6546:	66 89 d0             	mov    eax,edx
    6549:	66 01 c0             	add    eax,eax
    654c:	66 01 d0             	add    eax,edx
    654f:	66 c1 e0 03          	shl    eax,0x3
    6553:	67 66 8d 90 ec a2 00 	lea    edx,[eax+0xa2ec]
    655a:	00 
    655b:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
    6560:	67 66 89 02          	mov    DWORD PTR [edx],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:945
	firstUnusedMemoryItem = next;
    6564:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
    6569:	66 a3 04 a2          	mov    ds:0xa204,eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:947

	memoryTable[firstUnusedMemoryItem].used = 1;
    656d:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    6572:	66 89 d0             	mov    eax,edx
    6575:	66 01 c0             	add    eax,eax
    6578:	66 01 d0             	add    eax,edx
    657b:	66 c1 e0 03          	shl    eax,0x3
    657f:	66 05 f0 a2 00 00    	add    eax,0xa2f0
    6585:	67 66 c7 00 01 00 00 	mov    DWORD PTR [eax],0x1
    658c:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:948
	memoryTable[firstUnusedMemoryItem].beginAddr = 0x20000;
    658d:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    6592:	66 89 d0             	mov    eax,edx
    6595:	66 01 c0             	add    eax,eax
    6598:	66 01 d0             	add    eax,edx
    659b:	66 c1 e0 03          	shl    eax,0x3
    659f:	66 05 e0 a2 00 00    	add    eax,0xa2e0
    65a5:	67 66 c7 00 00 00 02 	mov    DWORD PTR [eax],0x20000
    65ac:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:949
	memoryTable[firstUnusedMemoryItem].endAddr = 0x2cfff;
    65ad:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    65b2:	66 89 d0             	mov    eax,edx
    65b5:	66 01 c0             	add    eax,eax
    65b8:	66 01 d0             	add    eax,edx
    65bb:	66 c1 e0 03          	shl    eax,0x3
    65bf:	66 05 e4 a2 00 00    	add    eax,0xa2e4
    65c5:	67 66 c7 00 ff cf 02 	mov    DWORD PTR [eax],0x2cfff
    65cc:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:950
	memoryTable[firstUnusedMemoryItem].status = used;
    65cd:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    65d2:	66 89 d0             	mov    eax,edx
    65d5:	66 01 c0             	add    eax,eax
    65d8:	66 01 d0             	add    eax,edx
    65db:	66 c1 e0 03          	shl    eax,0x3
    65df:	66 05 f4 a2 00 00    	add    eax,0xa2f4
    65e5:	67 66 c7 00 01 00 00 	mov    DWORD PTR [eax],0x1
    65ec:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:951
	next = nextUnusedItem();
    65ed:	66 e8 4a f9 ff ff    	call   5f3d <_nextUnusedItem>
    65f3:	67 66 89 45 f8       	mov    DWORD PTR [ebp-0x8],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:952
	memoryTable[next].pre = firstUnusedMemoryItem;
    65f8:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    65fd:	67 66 8b 4d f8       	mov    ecx,DWORD PTR [ebp-0x8]
    6602:	66 89 c8             	mov    eax,ecx
    6605:	66 01 c0             	add    eax,eax
    6608:	66 01 c8             	add    eax,ecx
    660b:	66 c1 e0 03          	shl    eax,0x3
    660f:	66 05 e8 a2 00 00    	add    eax,0xa2e8
    6615:	67 66 89 10          	mov    DWORD PTR [eax],edx
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:953
	memoryTable[firstUnusedMemoryItem].next = next;
    6619:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    661e:	66 89 d0             	mov    eax,edx
    6621:	66 01 c0             	add    eax,eax
    6624:	66 01 d0             	add    eax,edx
    6627:	66 c1 e0 03          	shl    eax,0x3
    662b:	67 66 8d 90 ec a2 00 	lea    edx,[eax+0xa2ec]
    6632:	00 
    6633:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
    6638:	67 66 89 02          	mov    DWORD PTR [edx],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:954
	firstUnusedMemoryItem = next;
    663c:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
    6641:	66 a3 04 a2          	mov    ds:0xa204,eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:956
	// blockNum = 7;
	memoryTable[firstUnusedMemoryItem].used = 1;
    6645:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    664a:	66 89 d0             	mov    eax,edx
    664d:	66 01 c0             	add    eax,eax
    6650:	66 01 d0             	add    eax,edx
    6653:	66 c1 e0 03          	shl    eax,0x3
    6657:	66 05 f0 a2 00 00    	add    eax,0xa2f0
    665d:	67 66 c7 00 01 00 00 	mov    DWORD PTR [eax],0x1
    6664:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:957
	memoryTable[firstUnusedMemoryItem].beginAddr = 0x2d000;
    6665:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    666a:	66 89 d0             	mov    eax,edx
    666d:	66 01 c0             	add    eax,eax
    6670:	66 01 d0             	add    eax,edx
    6673:	66 c1 e0 03          	shl    eax,0x3
    6677:	66 05 e0 a2 00 00    	add    eax,0xa2e0
    667d:	67 66 c7 00 00 d0 02 	mov    DWORD PTR [eax],0x2d000
    6684:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:958
	memoryTable[firstUnusedMemoryItem].endAddr = 0x2ffff;
    6685:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    668a:	66 89 d0             	mov    eax,edx
    668d:	66 01 c0             	add    eax,eax
    6690:	66 01 d0             	add    eax,edx
    6693:	66 c1 e0 03          	shl    eax,0x3
    6697:	66 05 e4 a2 00 00    	add    eax,0xa2e4
    669d:	67 66 c7 00 ff ff 02 	mov    DWORD PTR [eax],0x2ffff
    66a4:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:959
	memoryTable[firstUnusedMemoryItem].status = used;
    66a5:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    66aa:	66 89 d0             	mov    eax,edx
    66ad:	66 01 c0             	add    eax,eax
    66b0:	66 01 d0             	add    eax,edx
    66b3:	66 c1 e0 03          	shl    eax,0x3
    66b7:	66 05 f4 a2 00 00    	add    eax,0xa2f4
    66bd:	67 66 c7 00 01 00 00 	mov    DWORD PTR [eax],0x1
    66c4:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:960
	next = nextUnusedItem();
    66c5:	66 e8 72 f8 ff ff    	call   5f3d <_nextUnusedItem>
    66cb:	67 66 89 45 f8       	mov    DWORD PTR [ebp-0x8],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:961
	memoryTable[next].pre = firstUnusedMemoryItem;
    66d0:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    66d5:	67 66 8b 4d f8       	mov    ecx,DWORD PTR [ebp-0x8]
    66da:	66 89 c8             	mov    eax,ecx
    66dd:	66 01 c0             	add    eax,eax
    66e0:	66 01 c8             	add    eax,ecx
    66e3:	66 c1 e0 03          	shl    eax,0x3
    66e7:	66 05 e8 a2 00 00    	add    eax,0xa2e8
    66ed:	67 66 89 10          	mov    DWORD PTR [eax],edx
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:962
	memoryTable[firstUnusedMemoryItem].next = next;
    66f1:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    66f6:	66 89 d0             	mov    eax,edx
    66f9:	66 01 c0             	add    eax,eax
    66fc:	66 01 d0             	add    eax,edx
    66ff:	66 c1 e0 03          	shl    eax,0x3
    6703:	67 66 8d 90 ec a2 00 	lea    edx,[eax+0xa2ec]
    670a:	00 
    670b:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
    6710:	67 66 89 02          	mov    DWORD PTR [edx],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:963
	firstUnusedMemoryItem = next;
    6714:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
    6719:	66 a3 04 a2          	mov    ds:0xa204,eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:966

	// blockNum = 8;
	memoryTable[firstUnusedMemoryItem].used = 1;
    671d:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    6722:	66 89 d0             	mov    eax,edx
    6725:	66 01 c0             	add    eax,eax
    6728:	66 01 d0             	add    eax,edx
    672b:	66 c1 e0 03          	shl    eax,0x3
    672f:	66 05 f0 a2 00 00    	add    eax,0xa2f0
    6735:	67 66 c7 00 01 00 00 	mov    DWORD PTR [eax],0x1
    673c:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:967
	memoryTable[firstUnusedMemoryItem].beginAddr = 0x30000;
    673d:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    6742:	66 89 d0             	mov    eax,edx
    6745:	66 01 c0             	add    eax,eax
    6748:	66 01 d0             	add    eax,edx
    674b:	66 c1 e0 03          	shl    eax,0x3
    674f:	66 05 e0 a2 00 00    	add    eax,0xa2e0
    6755:	67 66 c7 00 00 00 03 	mov    DWORD PTR [eax],0x30000
    675c:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:968
	memoryTable[firstUnusedMemoryItem].endAddr = 0x7ffff;
    675d:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    6762:	66 89 d0             	mov    eax,edx
    6765:	66 01 c0             	add    eax,eax
    6768:	66 01 d0             	add    eax,edx
    676b:	66 c1 e0 03          	shl    eax,0x3
    676f:	66 05 e4 a2 00 00    	add    eax,0xa2e4
    6775:	67 66 c7 00 ff ff 07 	mov    DWORD PTR [eax],0x7ffff
    677c:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:969
	memoryTable[firstUnusedMemoryItem].status = unused;
    677d:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    6782:	66 89 d0             	mov    eax,edx
    6785:	66 01 c0             	add    eax,eax
    6788:	66 01 d0             	add    eax,edx
    678b:	66 c1 e0 03          	shl    eax,0x3
    678f:	66 05 f4 a2 00 00    	add    eax,0xa2f4
    6795:	67 66 c7 00 00 00 00 	mov    DWORD PTR [eax],0x0
    679c:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:970
	next = nextUnusedItem();
    679d:	66 e8 9a f7 ff ff    	call   5f3d <_nextUnusedItem>
    67a3:	67 66 89 45 f8       	mov    DWORD PTR [ebp-0x8],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:971
	memoryTable[next].pre = firstUnusedMemoryItem;
    67a8:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    67ad:	67 66 8b 4d f8       	mov    ecx,DWORD PTR [ebp-0x8]
    67b2:	66 89 c8             	mov    eax,ecx
    67b5:	66 01 c0             	add    eax,eax
    67b8:	66 01 c8             	add    eax,ecx
    67bb:	66 c1 e0 03          	shl    eax,0x3
    67bf:	66 05 e8 a2 00 00    	add    eax,0xa2e8
    67c5:	67 66 89 10          	mov    DWORD PTR [eax],edx
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:972
	memoryTable[firstUnusedMemoryItem].next = next;
    67c9:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    67ce:	66 89 d0             	mov    eax,edx
    67d1:	66 01 c0             	add    eax,eax
    67d4:	66 01 d0             	add    eax,edx
    67d7:	66 c1 e0 03          	shl    eax,0x3
    67db:	67 66 8d 90 ec a2 00 	lea    edx,[eax+0xa2ec]
    67e2:	00 
    67e3:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
    67e8:	67 66 89 02          	mov    DWORD PTR [edx],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:973
	firstUnusedMemoryItem = next;
    67ec:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
    67f1:	66 a3 04 a2          	mov    ds:0xa204,eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:976

	// blockNum = 9;
	memoryTable[firstUnusedMemoryItem].used = 1;
    67f5:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    67fa:	66 89 d0             	mov    eax,edx
    67fd:	66 01 c0             	add    eax,eax
    6800:	66 01 d0             	add    eax,edx
    6803:	66 c1 e0 03          	shl    eax,0x3
    6807:	66 05 f0 a2 00 00    	add    eax,0xa2f0
    680d:	67 66 c7 00 01 00 00 	mov    DWORD PTR [eax],0x1
    6814:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:977
	memoryTable[firstUnusedMemoryItem].beginAddr = 0x80000;
    6815:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    681a:	66 89 d0             	mov    eax,edx
    681d:	66 01 c0             	add    eax,eax
    6820:	66 01 d0             	add    eax,edx
    6823:	66 c1 e0 03          	shl    eax,0x3
    6827:	66 05 e0 a2 00 00    	add    eax,0xa2e0
    682d:	67 66 c7 00 00 00 08 	mov    DWORD PTR [eax],0x80000
    6834:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:978
	memoryTable[firstUnusedMemoryItem].endAddr = 0x86fff;
    6835:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    683a:	66 89 d0             	mov    eax,edx
    683d:	66 01 c0             	add    eax,eax
    6840:	66 01 d0             	add    eax,edx
    6843:	66 c1 e0 03          	shl    eax,0x3
    6847:	66 05 e4 a2 00 00    	add    eax,0xa2e4
    684d:	67 66 c7 00 ff 6f 08 	mov    DWORD PTR [eax],0x86fff
    6854:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:979
	memoryTable[firstUnusedMemoryItem].status = used;
    6855:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    685a:	66 89 d0             	mov    eax,edx
    685d:	66 01 c0             	add    eax,eax
    6860:	66 01 d0             	add    eax,edx
    6863:	66 c1 e0 03          	shl    eax,0x3
    6867:	66 05 f4 a2 00 00    	add    eax,0xa2f4
    686d:	67 66 c7 00 01 00 00 	mov    DWORD PTR [eax],0x1
    6874:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:980
	next = nextUnusedItem();
    6875:	66 e8 c2 f6 ff ff    	call   5f3d <_nextUnusedItem>
    687b:	67 66 89 45 f8       	mov    DWORD PTR [ebp-0x8],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:981
	memoryTable[next].pre = firstUnusedMemoryItem;
    6880:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    6885:	67 66 8b 4d f8       	mov    ecx,DWORD PTR [ebp-0x8]
    688a:	66 89 c8             	mov    eax,ecx
    688d:	66 01 c0             	add    eax,eax
    6890:	66 01 c8             	add    eax,ecx
    6893:	66 c1 e0 03          	shl    eax,0x3
    6897:	66 05 e8 a2 00 00    	add    eax,0xa2e8
    689d:	67 66 89 10          	mov    DWORD PTR [eax],edx
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:982
	memoryTable[firstUnusedMemoryItem].next = next;
    68a1:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    68a6:	66 89 d0             	mov    eax,edx
    68a9:	66 01 c0             	add    eax,eax
    68ac:	66 01 d0             	add    eax,edx
    68af:	66 c1 e0 03          	shl    eax,0x3
    68b3:	67 66 8d 90 ec a2 00 	lea    edx,[eax+0xa2ec]
    68ba:	00 
    68bb:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
    68c0:	67 66 89 02          	mov    DWORD PTR [edx],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:983
	firstUnusedMemoryItem = next;
    68c4:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
    68c9:	66 a3 04 a2          	mov    ds:0xa204,eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:986

	// blockNum = 10;
	memoryTable[firstUnusedMemoryItem].used = 1;
    68cd:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    68d2:	66 89 d0             	mov    eax,edx
    68d5:	66 01 c0             	add    eax,eax
    68d8:	66 01 d0             	add    eax,edx
    68db:	66 c1 e0 03          	shl    eax,0x3
    68df:	66 05 f0 a2 00 00    	add    eax,0xa2f0
    68e5:	67 66 c7 00 01 00 00 	mov    DWORD PTR [eax],0x1
    68ec:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:987
	memoryTable[firstUnusedMemoryItem].beginAddr = 0x87000;
    68ed:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    68f2:	66 89 d0             	mov    eax,edx
    68f5:	66 01 c0             	add    eax,eax
    68f8:	66 01 d0             	add    eax,edx
    68fb:	66 c1 e0 03          	shl    eax,0x3
    68ff:	66 05 e0 a2 00 00    	add    eax,0xa2e0
    6905:	67 66 c7 00 00 70 08 	mov    DWORD PTR [eax],0x87000
    690c:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:988
	memoryTable[firstUnusedMemoryItem].endAddr = 0x9ffff;
    690d:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    6912:	66 89 d0             	mov    eax,edx
    6915:	66 01 c0             	add    eax,eax
    6918:	66 01 d0             	add    eax,edx
    691b:	66 c1 e0 03          	shl    eax,0x3
    691f:	66 05 e4 a2 00 00    	add    eax,0xa2e4
    6925:	67 66 c7 00 ff ff 09 	mov    DWORD PTR [eax],0x9ffff
    692c:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:989
	memoryTable[firstUnusedMemoryItem].status = unused;
    692d:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    6932:	66 89 d0             	mov    eax,edx
    6935:	66 01 c0             	add    eax,eax
    6938:	66 01 d0             	add    eax,edx
    693b:	66 c1 e0 03          	shl    eax,0x3
    693f:	66 05 f4 a2 00 00    	add    eax,0xa2f4
    6945:	67 66 c7 00 00 00 00 	mov    DWORD PTR [eax],0x0
    694c:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:990
	next = nextUnusedItem();
    694d:	66 e8 ea f5 ff ff    	call   5f3d <_nextUnusedItem>
    6953:	67 66 89 45 f8       	mov    DWORD PTR [ebp-0x8],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:991
	memoryTable[next].pre = firstUnusedMemoryItem;
    6958:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    695d:	67 66 8b 4d f8       	mov    ecx,DWORD PTR [ebp-0x8]
    6962:	66 89 c8             	mov    eax,ecx
    6965:	66 01 c0             	add    eax,eax
    6968:	66 01 c8             	add    eax,ecx
    696b:	66 c1 e0 03          	shl    eax,0x3
    696f:	66 05 e8 a2 00 00    	add    eax,0xa2e8
    6975:	67 66 89 10          	mov    DWORD PTR [eax],edx
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:992
	memoryTable[firstUnusedMemoryItem].next = next;
    6979:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    697e:	66 89 d0             	mov    eax,edx
    6981:	66 01 c0             	add    eax,eax
    6984:	66 01 d0             	add    eax,edx
    6987:	66 c1 e0 03          	shl    eax,0x3
    698b:	67 66 8d 90 ec a2 00 	lea    edx,[eax+0xa2ec]
    6992:	00 
    6993:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
    6998:	67 66 89 02          	mov    DWORD PTR [edx],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:993
	firstUnusedMemoryItem = next;
    699c:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
    69a1:	66 a3 04 a2          	mov    ds:0xa204,eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:994
}
    69a5:	90                   	nop
    69a6:	66 c9                	leave  
    69a8:	66 c3                	ret    

000069aa <_findItem>:
findItem():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:998


int findItem(int addr)
{
    69aa:	66 55                	push   ebp
    69ac:	66 89 e5             	mov    ebp,esp
    69af:	66 83 ec 04          	sub    esp,0x4
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:999
	int itemId = 0;
    69b3:	67 66 c7 45 fc 00 00 	mov    DWORD PTR [ebp-0x4],0x0
    69ba:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1000
	for (; itemId < MemLen; itemId = memoryTable[itemId].next)
    69bc:	eb 4b                	jmp    6a09 <_findItem+0x5f>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1002
	{
		if (memoryTable[itemId].beginAddr == addr)
    69be:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    69c3:	66 89 d0             	mov    eax,edx
    69c6:	66 01 c0             	add    eax,eax
    69c9:	66 01 d0             	add    eax,edx
    69cc:	66 c1 e0 03          	shl    eax,0x3
    69d0:	66 05 e0 a2 00 00    	add    eax,0xa2e0
    69d6:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    69da:	67 66 3b 45 08       	cmp    eax,DWORD PTR [ebp+0x8]
    69df:	75 07                	jne    69e8 <_findItem+0x3e>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1003
			return itemId;
    69e1:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
    69e6:	eb 2f                	jmp    6a17 <_findItem+0x6d>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1000
	for (; itemId < MemLen; itemId = memoryTable[itemId].next)
    69e8:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    69ed:	66 89 d0             	mov    eax,edx
    69f0:	66 01 c0             	add    eax,eax
    69f3:	66 01 d0             	add    eax,edx
    69f6:	66 c1 e0 03          	shl    eax,0x3
    69fa:	66 05 ec a2 00 00    	add    eax,0xa2ec
    6a00:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    6a04:	67 66 89 45 fc       	mov    DWORD PTR [ebp-0x4],eax
    6a09:	67 66 83 7d fc 27    	cmp    DWORD PTR [ebp-0x4],0x27
    6a0f:	7e ad                	jle    69be <_findItem+0x14>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1005
	}
	return -1;
    6a11:	66 b8 ff ff ff ff    	mov    eax,0xffffffff
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1006
}
    6a17:	66 c9                	leave  
    6a19:	66 c3                	ret    

00006a1b <_findLaterBlock>:
findLaterBlock():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1009

int findLaterBlock(int addr, int size, int begin)
{
    6a1b:	66 55                	push   ebp
    6a1d:	66 89 e5             	mov    ebp,esp
    6a20:	66 83 ec 04          	sub    esp,0x4
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1010
	int itemId = begin;
    6a24:	67 66 8b 45 10       	mov    eax,DWORD PTR [ebp+0x10]
    6a29:	67 66 89 45 fc       	mov    DWORD PTR [ebp-0x4],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1011
	for (; itemId < MemLen; itemId = memoryTable[itemId].next)
    6a2e:	e9 b3 00             	jmp    6ae4 <_findLaterBlock+0xc9>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1013
	{
		if (memoryTable[itemId].beginAddr >= addr && memoryTable[itemId].endAddr - memoryTable[itemId].beginAddr + 1 >= size && memoryTable[itemId].status == unused)
    6a31:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    6a36:	66 89 d0             	mov    eax,edx
    6a39:	66 01 c0             	add    eax,eax
    6a3c:	66 01 d0             	add    eax,edx
    6a3f:	66 c1 e0 03          	shl    eax,0x3
    6a43:	66 05 e0 a2 00 00    	add    eax,0xa2e0
    6a49:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    6a4d:	67 66 3b 45 08       	cmp    eax,DWORD PTR [ebp+0x8]
    6a52:	7c 6f                	jl     6ac3 <_findLaterBlock+0xa8>
    6a54:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    6a59:	66 89 d0             	mov    eax,edx
    6a5c:	66 01 c0             	add    eax,eax
    6a5f:	66 01 d0             	add    eax,edx
    6a62:	66 c1 e0 03          	shl    eax,0x3
    6a66:	66 05 e4 a2 00 00    	add    eax,0xa2e4
    6a6c:	67 66 8b 08          	mov    ecx,DWORD PTR [eax]
    6a70:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    6a75:	66 89 d0             	mov    eax,edx
    6a78:	66 01 c0             	add    eax,eax
    6a7b:	66 01 d0             	add    eax,edx
    6a7e:	66 c1 e0 03          	shl    eax,0x3
    6a82:	66 05 e0 a2 00 00    	add    eax,0xa2e0
    6a88:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    6a8c:	66 29 c1             	sub    ecx,eax
    6a8f:	66 89 c8             	mov    eax,ecx
    6a92:	66 40                	inc    eax
    6a94:	67 66 3b 45 0c       	cmp    eax,DWORD PTR [ebp+0xc]
    6a99:	7c 28                	jl     6ac3 <_findLaterBlock+0xa8>
    6a9b:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    6aa0:	66 89 d0             	mov    eax,edx
    6aa3:	66 01 c0             	add    eax,eax
    6aa6:	66 01 d0             	add    eax,edx
    6aa9:	66 c1 e0 03          	shl    eax,0x3
    6aad:	66 05 f4 a2 00 00    	add    eax,0xa2f4
    6ab3:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    6ab7:	66 85 c0             	test   eax,eax
    6aba:	75 07                	jne    6ac3 <_findLaterBlock+0xa8>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1014
			return itemId;
    6abc:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
    6ac1:	eb 31                	jmp    6af4 <_findLaterBlock+0xd9>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1011
	for (; itemId < MemLen; itemId = memoryTable[itemId].next)
    6ac3:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    6ac8:	66 89 d0             	mov    eax,edx
    6acb:	66 01 c0             	add    eax,eax
    6ace:	66 01 d0             	add    eax,edx
    6ad1:	66 c1 e0 03          	shl    eax,0x3
    6ad5:	66 05 ec a2 00 00    	add    eax,0xa2ec
    6adb:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    6adf:	67 66 89 45 fc       	mov    DWORD PTR [ebp-0x4],eax
    6ae4:	67 66 83 7d fc 27    	cmp    DWORD PTR [ebp-0x4],0x27
    6aea:	0f 8e 43 ff          	jle    6a31 <_findLaterBlock+0x16>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1016
	}
	return -1;
    6aee:	66 b8 ff ff ff ff    	mov    eax,0xffffffff
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1017
}
    6af4:	66 c9                	leave  
    6af6:	66 c3                	ret    

00006af8 <_merge>:
merge():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1020

void merge(int item)
{
    6af8:	66 55                	push   ebp
    6afa:	66 89 e5             	mov    ebp,esp
    6afd:	66 83 ec 08          	sub    esp,0x8
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1022
	int first;
	if (memoryTable[item].pre != -1 && memoryTable[memoryTable[item].pre].status == unused) {
    6b01:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    6b06:	66 89 d0             	mov    eax,edx
    6b09:	66 01 c0             	add    eax,eax
    6b0c:	66 01 d0             	add    eax,edx
    6b0f:	66 c1 e0 03          	shl    eax,0x3
    6b13:	66 05 e8 a2 00 00    	add    eax,0xa2e8
    6b19:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    6b1d:	66 83 f8 ff          	cmp    eax,0xffffffff
    6b21:	74 5b                	je     6b7e <_merge+0x86>
    6b23:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    6b28:	66 89 d0             	mov    eax,edx
    6b2b:	66 01 c0             	add    eax,eax
    6b2e:	66 01 d0             	add    eax,edx
    6b31:	66 c1 e0 03          	shl    eax,0x3
    6b35:	66 05 e8 a2 00 00    	add    eax,0xa2e8
    6b3b:	67 66 8b 10          	mov    edx,DWORD PTR [eax]
    6b3f:	66 89 d0             	mov    eax,edx
    6b42:	66 01 c0             	add    eax,eax
    6b45:	66 01 d0             	add    eax,edx
    6b48:	66 c1 e0 03          	shl    eax,0x3
    6b4c:	66 05 f4 a2 00 00    	add    eax,0xa2f4
    6b52:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    6b56:	66 85 c0             	test   eax,eax
    6b59:	75 23                	jne    6b7e <_merge+0x86>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1023
		first = memoryTable[item].pre;
    6b5b:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    6b60:	66 89 d0             	mov    eax,edx
    6b63:	66 01 c0             	add    eax,eax
    6b66:	66 01 d0             	add    eax,edx
    6b69:	66 c1 e0 03          	shl    eax,0x3
    6b6d:	66 05 e8 a2 00 00    	add    eax,0xa2e8
    6b73:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    6b77:	67 66 89 45 fc       	mov    DWORD PTR [ebp-0x4],eax
    6b7c:	eb 0a                	jmp    6b88 <_merge+0x90>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1025
	} else {
		first = item;
    6b7e:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    6b83:	67 66 89 45 fc       	mov    DWORD PTR [ebp-0x4],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1027
	}
	int next = memoryTable[first].next;
    6b88:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    6b8d:	66 89 d0             	mov    eax,edx
    6b90:	66 01 c0             	add    eax,eax
    6b93:	66 01 d0             	add    eax,edx
    6b96:	66 c1 e0 03          	shl    eax,0x3
    6b9a:	66 05 ec a2 00 00    	add    eax,0xa2ec
    6ba0:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    6ba4:	67 66 89 45 f8       	mov    DWORD PTR [ebp-0x8],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1028
	while (next != -1 && memoryTable[next].status == unused)
    6ba9:	e9 0d 01             	jmp    6cb9 <_merge+0x1c1>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1030
	{
		memoryTable[first].endAddr = memoryTable[next].endAddr;
    6bac:	67 66 8b 55 f8       	mov    edx,DWORD PTR [ebp-0x8]
    6bb1:	66 89 d0             	mov    eax,edx
    6bb4:	66 01 c0             	add    eax,eax
    6bb7:	66 01 d0             	add    eax,edx
    6bba:	66 c1 e0 03          	shl    eax,0x3
    6bbe:	66 05 e4 a2 00 00    	add    eax,0xa2e4
    6bc4:	67 66 8b 10          	mov    edx,DWORD PTR [eax]
    6bc8:	67 66 8b 4d fc       	mov    ecx,DWORD PTR [ebp-0x4]
    6bcd:	66 89 c8             	mov    eax,ecx
    6bd0:	66 01 c0             	add    eax,eax
    6bd3:	66 01 c8             	add    eax,ecx
    6bd6:	66 c1 e0 03          	shl    eax,0x3
    6bda:	66 05 e4 a2 00 00    	add    eax,0xa2e4
    6be0:	67 66 89 10          	mov    DWORD PTR [eax],edx
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1031
		memoryTable[first].next = memoryTable[next].next;
    6be4:	67 66 8b 55 f8       	mov    edx,DWORD PTR [ebp-0x8]
    6be9:	66 89 d0             	mov    eax,edx
    6bec:	66 01 c0             	add    eax,eax
    6bef:	66 01 d0             	add    eax,edx
    6bf2:	66 c1 e0 03          	shl    eax,0x3
    6bf6:	66 05 ec a2 00 00    	add    eax,0xa2ec
    6bfc:	67 66 8b 10          	mov    edx,DWORD PTR [eax]
    6c00:	67 66 8b 4d fc       	mov    ecx,DWORD PTR [ebp-0x4]
    6c05:	66 89 c8             	mov    eax,ecx
    6c08:	66 01 c0             	add    eax,eax
    6c0b:	66 01 c8             	add    eax,ecx
    6c0e:	66 c1 e0 03          	shl    eax,0x3
    6c12:	66 05 ec a2 00 00    	add    eax,0xa2ec
    6c18:	67 66 89 10          	mov    DWORD PTR [eax],edx
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1032
		if (memoryTable[next].next != -1) {
    6c1c:	67 66 8b 55 f8       	mov    edx,DWORD PTR [ebp-0x8]
    6c21:	66 89 d0             	mov    eax,edx
    6c24:	66 01 c0             	add    eax,eax
    6c27:	66 01 d0             	add    eax,edx
    6c2a:	66 c1 e0 03          	shl    eax,0x3
    6c2e:	66 05 ec a2 00 00    	add    eax,0xa2ec
    6c34:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    6c38:	66 83 f8 ff          	cmp    eax,0xffffffff
    6c3c:	74 3a                	je     6c78 <_merge+0x180>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1033
			memoryTable[memoryTable[next].next].pre = first;
    6c3e:	67 66 8b 55 f8       	mov    edx,DWORD PTR [ebp-0x8]
    6c43:	66 89 d0             	mov    eax,edx
    6c46:	66 01 c0             	add    eax,eax
    6c49:	66 01 d0             	add    eax,edx
    6c4c:	66 c1 e0 03          	shl    eax,0x3
    6c50:	66 05 ec a2 00 00    	add    eax,0xa2ec
    6c56:	67 66 8b 10          	mov    edx,DWORD PTR [eax]
    6c5a:	66 89 d0             	mov    eax,edx
    6c5d:	66 01 c0             	add    eax,eax
    6c60:	66 01 d0             	add    eax,edx
    6c63:	66 c1 e0 03          	shl    eax,0x3
    6c67:	67 66 8d 90 e8 a2 00 	lea    edx,[eax+0xa2e8]
    6c6e:	00 
    6c6f:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
    6c74:	67 66 89 02          	mov    DWORD PTR [edx],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1035
		}
		memoryTable[next].used = 0;
    6c78:	67 66 8b 55 f8       	mov    edx,DWORD PTR [ebp-0x8]
    6c7d:	66 89 d0             	mov    eax,edx
    6c80:	66 01 c0             	add    eax,eax
    6c83:	66 01 d0             	add    eax,edx
    6c86:	66 c1 e0 03          	shl    eax,0x3
    6c8a:	66 05 f0 a2 00 00    	add    eax,0xa2f0
    6c90:	67 66 c7 00 00 00 00 	mov    DWORD PTR [eax],0x0
    6c97:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1036
		next = memoryTable[first].next;
    6c98:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    6c9d:	66 89 d0             	mov    eax,edx
    6ca0:	66 01 c0             	add    eax,eax
    6ca3:	66 01 d0             	add    eax,edx
    6ca6:	66 c1 e0 03          	shl    eax,0x3
    6caa:	66 05 ec a2 00 00    	add    eax,0xa2ec
    6cb0:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    6cb4:	67 66 89 45 f8       	mov    DWORD PTR [ebp-0x8],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1028
	while (next != -1 && memoryTable[next].status == unused)
    6cb9:	67 66 83 7d f8 ff    	cmp    DWORD PTR [ebp-0x8],0xffffffff
    6cbf:	74 23                	je     6ce4 <_merge+0x1ec>
    6cc1:	67 66 8b 55 f8       	mov    edx,DWORD PTR [ebp-0x8]
    6cc6:	66 89 d0             	mov    eax,edx
    6cc9:	66 01 c0             	add    eax,eax
    6ccc:	66 01 d0             	add    eax,edx
    6ccf:	66 c1 e0 03          	shl    eax,0x3
    6cd3:	66 05 f4 a2 00 00    	add    eax,0xa2f4
    6cd9:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    6cdd:	66 85 c0             	test   eax,eax
    6ce0:	0f 84 c8 fe          	je     6bac <_merge+0xb4>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1039
	}

}
    6ce4:	90                   	nop
    6ce5:	66 c9                	leave  
    6ce7:	66 c3                	ret    

00006ce9 <_release>:
release():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1042

void release(int begin, int end)
{
    6ce9:	66 55                	push   ebp
    6ceb:	66 89 e5             	mov    ebp,esp
    6cee:	66 83 ec 08          	sub    esp,0x8
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1043
	int item = findItem(begin);
    6cf2:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    6cf7:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    6cfc:	66 e8 a8 fc ff ff    	call   69aa <_findItem>
    6d02:	67 66 89 45 fc       	mov    DWORD PTR [ebp-0x4],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1044
	memoryTable[item].status = unused;
    6d07:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    6d0c:	66 89 d0             	mov    eax,edx
    6d0f:	66 01 c0             	add    eax,eax
    6d12:	66 01 d0             	add    eax,edx
    6d15:	66 c1 e0 03          	shl    eax,0x3
    6d19:	66 05 f4 a2 00 00    	add    eax,0xa2f4
    6d1f:	67 66 c7 00 00 00 00 	mov    DWORD PTR [eax],0x0
    6d26:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1045
	merge(item);
    6d27:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
    6d2c:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    6d31:	66 e8 c1 fd ff ff    	call   6af8 <_merge>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1046
}
    6d37:	90                   	nop
    6d38:	66 c9                	leave  
    6d3a:	66 c3                	ret    

00006d3c <_findEnoughBlock>:
findEnoughBlock():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1049

int findEnoughBlock(int size)
{
    6d3c:	66 55                	push   ebp
    6d3e:	66 89 e5             	mov    ebp,esp
    6d41:	66 83 ec 04          	sub    esp,0x4
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1050
	int itemId = 0;
    6d45:	67 66 c7 45 fc 00 00 	mov    DWORD PTR [ebp-0x4],0x0
    6d4c:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1052
	// 不考虑退化情况
	while (memoryTable[itemId].status == used || memoryTable[itemId].endAddr - memoryTable[itemId].beginAddr + 1 < size)
    6d4e:	eb 21                	jmp    6d71 <_findEnoughBlock+0x35>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1054
	{
		itemId = memoryTable[itemId].next;
    6d50:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    6d55:	66 89 d0             	mov    eax,edx
    6d58:	66 01 c0             	add    eax,eax
    6d5b:	66 01 d0             	add    eax,edx
    6d5e:	66 c1 e0 03          	shl    eax,0x3
    6d62:	66 05 ec a2 00 00    	add    eax,0xa2ec
    6d68:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    6d6c:	67 66 89 45 fc       	mov    DWORD PTR [ebp-0x4],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1052
	while (memoryTable[itemId].status == used || memoryTable[itemId].endAddr - memoryTable[itemId].beginAddr + 1 < size)
    6d71:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    6d76:	66 89 d0             	mov    eax,edx
    6d79:	66 01 c0             	add    eax,eax
    6d7c:	66 01 d0             	add    eax,edx
    6d7f:	66 c1 e0 03          	shl    eax,0x3
    6d83:	66 05 f4 a2 00 00    	add    eax,0xa2f4
    6d89:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    6d8d:	66 83 f8 01          	cmp    eax,0x1
    6d91:	74 bd                	je     6d50 <_findEnoughBlock+0x14>
    6d93:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    6d98:	66 89 d0             	mov    eax,edx
    6d9b:	66 01 c0             	add    eax,eax
    6d9e:	66 01 d0             	add    eax,edx
    6da1:	66 c1 e0 03          	shl    eax,0x3
    6da5:	66 05 e4 a2 00 00    	add    eax,0xa2e4
    6dab:	67 66 8b 08          	mov    ecx,DWORD PTR [eax]
    6daf:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    6db4:	66 89 d0             	mov    eax,edx
    6db7:	66 01 c0             	add    eax,eax
    6dba:	66 01 d0             	add    eax,edx
    6dbd:	66 c1 e0 03          	shl    eax,0x3
    6dc1:	66 05 e0 a2 00 00    	add    eax,0xa2e0
    6dc7:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    6dcb:	66 29 c1             	sub    ecx,eax
    6dce:	66 89 c8             	mov    eax,ecx
    6dd1:	66 40                	inc    eax
    6dd3:	67 66 3b 45 08       	cmp    eax,DWORD PTR [ebp+0x8]
    6dd8:	0f 8c 74 ff          	jl     6d50 <_findEnoughBlock+0x14>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1056
	}
	return itemId;
    6ddc:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1057
}
    6de1:	66 c9                	leave  
    6de3:	66 c3                	ret    

00006de5 <_require>:
require():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1061


int require(int size, int curId)
{
    6de5:	66 55                	push   ebp
    6de7:	66 89 e5             	mov    ebp,esp
    6dea:	66 83 ec 04          	sub    esp,0x4
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1062
	memoryTable[firstUnusedMemoryItem].beginAddr = memoryTable[curId].beginAddr;
    6dee:	66 8b 0e 04 a2       	mov    ecx,DWORD PTR ds:0xa204
    6df3:	67 66 8b 55 0c       	mov    edx,DWORD PTR [ebp+0xc]
    6df8:	66 89 d0             	mov    eax,edx
    6dfb:	66 01 c0             	add    eax,eax
    6dfe:	66 01 d0             	add    eax,edx
    6e01:	66 c1 e0 03          	shl    eax,0x3
    6e05:	66 05 e0 a2 00 00    	add    eax,0xa2e0
    6e0b:	67 66 8b 10          	mov    edx,DWORD PTR [eax]
    6e0f:	66 89 c8             	mov    eax,ecx
    6e12:	66 01 c0             	add    eax,eax
    6e15:	66 01 c8             	add    eax,ecx
    6e18:	66 c1 e0 03          	shl    eax,0x3
    6e1c:	66 05 e0 a2 00 00    	add    eax,0xa2e0
    6e22:	67 66 89 10          	mov    DWORD PTR [eax],edx
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1063
	memoryTable[firstUnusedMemoryItem].endAddr = memoryTable[firstUnusedMemoryItem].beginAddr + size - 1;
    6e26:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    6e2b:	66 8b 0e 04 a2       	mov    ecx,DWORD PTR ds:0xa204
    6e30:	66 89 c8             	mov    eax,ecx
    6e33:	66 01 c0             	add    eax,eax
    6e36:	66 01 c8             	add    eax,ecx
    6e39:	66 c1 e0 03          	shl    eax,0x3
    6e3d:	66 05 e0 a2 00 00    	add    eax,0xa2e0
    6e43:	67 66 8b 08          	mov    ecx,DWORD PTR [eax]
    6e47:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    6e4c:	66 01 c8             	add    eax,ecx
    6e4f:	67 66 8d 48 ff       	lea    ecx,[eax-0x1]
    6e54:	66 89 d0             	mov    eax,edx
    6e57:	66 01 c0             	add    eax,eax
    6e5a:	66 01 d0             	add    eax,edx
    6e5d:	66 c1 e0 03          	shl    eax,0x3
    6e61:	66 05 e4 a2 00 00    	add    eax,0xa2e4
    6e67:	67 66 89 08          	mov    DWORD PTR [eax],ecx
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1064
	memoryTable[firstUnusedMemoryItem].used = 1;
    6e6b:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    6e70:	66 89 d0             	mov    eax,edx
    6e73:	66 01 c0             	add    eax,eax
    6e76:	66 01 d0             	add    eax,edx
    6e79:	66 c1 e0 03          	shl    eax,0x3
    6e7d:	66 05 f0 a2 00 00    	add    eax,0xa2f0
    6e83:	67 66 c7 00 01 00 00 	mov    DWORD PTR [eax],0x1
    6e8a:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1065
	memoryTable[firstUnusedMemoryItem].status = used;
    6e8b:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    6e90:	66 89 d0             	mov    eax,edx
    6e93:	66 01 c0             	add    eax,eax
    6e96:	66 01 d0             	add    eax,edx
    6e99:	66 c1 e0 03          	shl    eax,0x3
    6e9d:	66 05 f4 a2 00 00    	add    eax,0xa2f4
    6ea3:	67 66 c7 00 01 00 00 	mov    DWORD PTR [eax],0x1
    6eaa:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1066
	memoryTable[firstUnusedMemoryItem].pre = memoryTable[curId].pre;
    6eab:	66 8b 0e 04 a2       	mov    ecx,DWORD PTR ds:0xa204
    6eb0:	67 66 8b 55 0c       	mov    edx,DWORD PTR [ebp+0xc]
    6eb5:	66 89 d0             	mov    eax,edx
    6eb8:	66 01 c0             	add    eax,eax
    6ebb:	66 01 d0             	add    eax,edx
    6ebe:	66 c1 e0 03          	shl    eax,0x3
    6ec2:	66 05 e8 a2 00 00    	add    eax,0xa2e8
    6ec8:	67 66 8b 10          	mov    edx,DWORD PTR [eax]
    6ecc:	66 89 c8             	mov    eax,ecx
    6ecf:	66 01 c0             	add    eax,eax
    6ed2:	66 01 c8             	add    eax,ecx
    6ed5:	66 c1 e0 03          	shl    eax,0x3
    6ed9:	66 05 e8 a2 00 00    	add    eax,0xa2e8
    6edf:	67 66 89 10          	mov    DWORD PTR [eax],edx
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1067
	memoryTable[firstUnusedMemoryItem].next = curId;
    6ee3:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    6ee8:	66 89 d0             	mov    eax,edx
    6eeb:	66 01 c0             	add    eax,eax
    6eee:	66 01 d0             	add    eax,edx
    6ef1:	66 c1 e0 03          	shl    eax,0x3
    6ef5:	67 66 8d 90 ec a2 00 	lea    edx,[eax+0xa2ec]
    6efc:	00 
    6efd:	67 66 8b 45 0c       	mov    eax,DWORD PTR [ebp+0xc]
    6f02:	67 66 89 02          	mov    DWORD PTR [edx],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1068
	memoryTable[memoryTable[curId].pre].next = firstUnusedMemoryItem;
    6f06:	67 66 8b 55 0c       	mov    edx,DWORD PTR [ebp+0xc]
    6f0b:	66 89 d0             	mov    eax,edx
    6f0e:	66 01 c0             	add    eax,eax
    6f11:	66 01 d0             	add    eax,edx
    6f14:	66 c1 e0 03          	shl    eax,0x3
    6f18:	66 05 e8 a2 00 00    	add    eax,0xa2e8
    6f1e:	67 66 8b 08          	mov    ecx,DWORD PTR [eax]
    6f22:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    6f27:	66 89 c8             	mov    eax,ecx
    6f2a:	66 01 c0             	add    eax,eax
    6f2d:	66 01 c8             	add    eax,ecx
    6f30:	66 c1 e0 03          	shl    eax,0x3
    6f34:	66 05 ec a2 00 00    	add    eax,0xa2ec
    6f3a:	67 66 89 10          	mov    DWORD PTR [eax],edx
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1069
	memoryTable[curId].pre = firstUnusedMemoryItem;
    6f3e:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    6f43:	67 66 8b 4d 0c       	mov    ecx,DWORD PTR [ebp+0xc]
    6f48:	66 89 c8             	mov    eax,ecx
    6f4b:	66 01 c0             	add    eax,eax
    6f4e:	66 01 c8             	add    eax,ecx
    6f51:	66 c1 e0 03          	shl    eax,0x3
    6f55:	66 05 e8 a2 00 00    	add    eax,0xa2e8
    6f5b:	67 66 89 10          	mov    DWORD PTR [eax],edx
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1070
	memoryTable[curId].beginAddr = memoryTable[firstUnusedMemoryItem].endAddr + 1;
    6f5f:	66 8b 16 04 a2       	mov    edx,DWORD PTR ds:0xa204
    6f64:	66 89 d0             	mov    eax,edx
    6f67:	66 01 c0             	add    eax,eax
    6f6a:	66 01 d0             	add    eax,edx
    6f6d:	66 c1 e0 03          	shl    eax,0x3
    6f71:	66 05 e4 a2 00 00    	add    eax,0xa2e4
    6f77:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    6f7b:	67 66 8d 48 01       	lea    ecx,[eax+0x1]
    6f80:	67 66 8b 55 0c       	mov    edx,DWORD PTR [ebp+0xc]
    6f85:	66 89 d0             	mov    eax,edx
    6f88:	66 01 c0             	add    eax,eax
    6f8b:	66 01 d0             	add    eax,edx
    6f8e:	66 c1 e0 03          	shl    eax,0x3
    6f92:	66 05 e0 a2 00 00    	add    eax,0xa2e0
    6f98:	67 66 89 08          	mov    DWORD PTR [eax],ecx
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1071
	if (memoryTable[curId].beginAddr >= memoryTable[curId].endAddr)
    6f9c:	67 66 8b 55 0c       	mov    edx,DWORD PTR [ebp+0xc]
    6fa1:	66 89 d0             	mov    eax,edx
    6fa4:	66 01 c0             	add    eax,eax
    6fa7:	66 01 d0             	add    eax,edx
    6faa:	66 c1 e0 03          	shl    eax,0x3
    6fae:	66 05 e0 a2 00 00    	add    eax,0xa2e0
    6fb4:	67 66 8b 08          	mov    ecx,DWORD PTR [eax]
    6fb8:	67 66 8b 55 0c       	mov    edx,DWORD PTR [ebp+0xc]
    6fbd:	66 89 d0             	mov    eax,edx
    6fc0:	66 01 c0             	add    eax,eax
    6fc3:	66 01 d0             	add    eax,edx
    6fc6:	66 c1 e0 03          	shl    eax,0x3
    6fca:	66 05 e4 a2 00 00    	add    eax,0xa2e4
    6fd0:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    6fd4:	66 39 c1             	cmp    ecx,eax
    6fd7:	7c 58                	jl     7031 <_require+0x24c>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1073
	{
		memoryTable[firstUnusedMemoryItem].next = memoryTable[curId].next;
    6fd9:	66 8b 0e 04 a2       	mov    ecx,DWORD PTR ds:0xa204
    6fde:	67 66 8b 55 0c       	mov    edx,DWORD PTR [ebp+0xc]
    6fe3:	66 89 d0             	mov    eax,edx
    6fe6:	66 01 c0             	add    eax,eax
    6fe9:	66 01 d0             	add    eax,edx
    6fec:	66 c1 e0 03          	shl    eax,0x3
    6ff0:	66 05 ec a2 00 00    	add    eax,0xa2ec
    6ff6:	67 66 8b 10          	mov    edx,DWORD PTR [eax]
    6ffa:	66 89 c8             	mov    eax,ecx
    6ffd:	66 01 c0             	add    eax,eax
    7000:	66 01 c8             	add    eax,ecx
    7003:	66 c1 e0 03          	shl    eax,0x3
    7007:	66 05 ec a2 00 00    	add    eax,0xa2ec
    700d:	67 66 89 10          	mov    DWORD PTR [eax],edx
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1074
		memoryTable[curId].used = 0;
    7011:	67 66 8b 55 0c       	mov    edx,DWORD PTR [ebp+0xc]
    7016:	66 89 d0             	mov    eax,edx
    7019:	66 01 c0             	add    eax,eax
    701c:	66 01 d0             	add    eax,edx
    701f:	66 c1 e0 03          	shl    eax,0x3
    7023:	66 05 f0 a2 00 00    	add    eax,0xa2f0
    7029:	67 66 c7 00 00 00 00 	mov    DWORD PTR [eax],0x0
    7030:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1076
	}
	int ret = firstUnusedMemoryItem;
    7031:	66 a1 04 a2          	mov    eax,ds:0xa204
    7035:	67 66 89 45 fc       	mov    DWORD PTR [ebp-0x4],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1077
	firstUnusedMemoryItem = nextUnusedItem();
    703a:	66 e8 fd ee ff ff    	call   5f3d <_nextUnusedItem>
    7040:	66 a3 04 a2          	mov    ds:0xa204,eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1078
	return ret;
    7044:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1079
}
    7049:	66 c9                	leave  
    704b:	66 c3                	ret    

0000704d <_loadFile>:
loadFile():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1082

void loadFile(int lma, int size, int vma, int seg)
{
    704d:	66 55                	push   ebp
    704f:	66 89 e5             	mov    ebp,esp
    7052:	66 53                	push   ebx
    7054:	66 83 ec 18          	sub    esp,0x18
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1083
	int tmpSize = size;
    7058:	67 66 8b 45 0c       	mov    eax,DWORD PTR [ebp+0xc]
    705d:	67 66 89 45 f8       	mov    DWORD PTR [ebp-0x8],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1084
	int loadtimes = 0;
    7062:	67 66 c7 45 f4 00 00 	mov    DWORD PTR [ebp-0xc],0x0
    7069:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1086
	do {
		loadReal(lma + loadtimes * 18 * 512, min(tmpSize, 18 * 512), vma + loadtimes * 18 * 512, seg);
    706b:	67 66 8b 55 f4       	mov    edx,DWORD PTR [ebp-0xc]
    7070:	66 89 d0             	mov    eax,edx
    7073:	66 c1 e0 03          	shl    eax,0x3
    7077:	66 01 d0             	add    eax,edx
    707a:	66 c1 e0 0a          	shl    eax,0xa
    707e:	66 89 c2             	mov    edx,eax
    7081:	67 66 8b 45 10       	mov    eax,DWORD PTR [ebp+0x10]
    7086:	67 66 8d 1c 02       	lea    ebx,[edx+eax*1]
    708b:	67 66 8b 55 f8       	mov    edx,DWORD PTR [ebp-0x8]
    7090:	66 81 fa 00 24 00 00 	cmp    edx,0x2400
    7097:	7e 06                	jle    709f <_loadFile+0x52>
    7099:	66 ba 00 24 00 00    	mov    edx,0x2400
    709f:	67 66 8b 4d f4       	mov    ecx,DWORD PTR [ebp-0xc]
    70a4:	66 89 c8             	mov    eax,ecx
    70a7:	66 c1 e0 03          	shl    eax,0x3
    70ab:	66 01 c8             	add    eax,ecx
    70ae:	66 c1 e0 0a          	shl    eax,0xa
    70b2:	66 89 c1             	mov    ecx,eax
    70b5:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    70ba:	66 01 c1             	add    ecx,eax
    70bd:	67 66 8b 45 14       	mov    eax,DWORD PTR [ebp+0x14]
    70c2:	67 66 89 44 24 0c    	mov    DWORD PTR [esp+0xc],eax
    70c8:	67 66 89 5c 24 08    	mov    DWORD PTR [esp+0x8],ebx
    70ce:	67 66 89 54 24 04    	mov    DWORD PTR [esp+0x4],edx
    70d4:	67 66 89 0c 24       	mov    DWORD PTR [esp],ecx
    70d9:	66 e8 c3 aa ff ff    	call   1ba2 <_loadReal>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1087
		loadtimes += 1;
    70df:	67 66 ff 45 f4       	inc    DWORD PTR [ebp-0xc]
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1088
		tmpSize -= 18 * 512;
    70e4:	67 66 81 6d f8 00 24 	sub    DWORD PTR [ebp-0x8],0x2400
    70eb:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1089
	} while (tmpSize >= 18 * 512);
    70ed:	67 66 81 7d f8 ff 23 	cmp    DWORD PTR [ebp-0x8],0x23ff
    70f4:	00 00 
    70f6:	0f 8f 71 ff          	jg     706b <_loadFile+0x1e>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1090
}
    70fa:	90                   	nop
    70fb:	66 83 c4 18          	add    esp,0x18
    70ff:	66 5b                	pop    ebx
    7101:	66 5d                	pop    ebp
    7103:	66 c3                	ret    

00007105 <_initSemaphore>:
initSemaphore():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1096

/////////// memory ends /////////////

////////// semaphore ////////////////
void initSemaphore()
{
    7105:	66 55                	push   ebp
    7107:	66 89 e5             	mov    ebp,esp
    710a:	66 83 ec 08          	sub    esp,0x8
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1097
	for (int i = 0; i < SemaNum; ++i)
    710e:	67 66 c7 45 fc 00 00 	mov    DWORD PTR [ebp-0x4],0x0
    7115:	00 00 
    7117:	eb 66                	jmp    717f <_initSemaphore+0x7a>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1099
	{
		semaphoreArray[i].used = fal;
    7119:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    711e:	66 89 d0             	mov    eax,edx
    7121:	66 c1 e0 02          	shl    eax,0x2
    7125:	66 01 d0             	add    eax,edx
    7128:	67 66 8d 14 85 00 00 	lea    edx,[eax*4+0x0]
    712f:	00 00 
    7131:	66 01 d0             	add    eax,edx
    7134:	66 c1 e0 02          	shl    eax,0x2
    7138:	66 05 04 a8 00 00    	add    eax,0xa804
    713e:	67 66 c7 00 00 00 00 	mov    DWORD PTR [eax],0x0
    7145:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1100
		init(&semaphoreArray[i].semaQue);
    7146:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    714b:	66 89 d0             	mov    eax,edx
    714e:	66 c1 e0 02          	shl    eax,0x2
    7152:	66 01 d0             	add    eax,edx
    7155:	67 66 8d 14 85 00 00 	lea    edx,[eax*4+0x0]
    715c:	00 00 
    715e:	66 01 d0             	add    eax,edx
    7161:	66 c1 e0 02          	shl    eax,0x2
    7165:	66 05 00 a8 00 00    	add    eax,0xa800
    716b:	66 83 c0 08          	add    eax,0x8
    716f:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    7174:	66 e8 a1 03 00 00    	call   751b <_init>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1097
	for (int i = 0; i < SemaNum; ++i)
    717a:	67 66 ff 45 fc       	inc    DWORD PTR [ebp-0x4]
    717f:	67 66 83 7d fc 3b    	cmp    DWORD PTR [ebp-0x4],0x3b
    7185:	7e 92                	jle    7119 <_initSemaphore+0x14>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1102
	}
}
    7187:	90                   	nop
    7188:	66 c9                	leave  
    718a:	66 c3                	ret    

0000718c <_do_getsem>:
do_getsem():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1105

int do_getsem(int resourceSize)
{
    718c:	66 55                	push   ebp
    718e:	66 89 e5             	mov    ebp,esp
    7191:	66 83 ec 04          	sub    esp,0x4
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1106
	__asm__("cli\n");
    7195:	fa                   	cli    
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1107
	int i = 0;
    7196:	67 66 c7 45 fc 00 00 	mov    DWORD PTR [ebp-0x4],0x0
    719d:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1108
	while (semaphoreArray[i].used == tru) { ++i; }
    719f:	eb 05                	jmp    71a6 <_do_getsem+0x1a>
    71a1:	67 66 ff 45 fc       	inc    DWORD PTR [ebp-0x4]
    71a6:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    71ab:	66 89 d0             	mov    eax,edx
    71ae:	66 c1 e0 02          	shl    eax,0x2
    71b2:	66 01 d0             	add    eax,edx
    71b5:	67 66 8d 14 85 00 00 	lea    edx,[eax*4+0x0]
    71bc:	00 00 
    71be:	66 01 d0             	add    eax,edx
    71c1:	66 c1 e0 02          	shl    eax,0x2
    71c5:	66 05 04 a8 00 00    	add    eax,0xa804
    71cb:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    71cf:	66 83 f8 01          	cmp    eax,0x1
    71d3:	74 cc                	je     71a1 <_do_getsem+0x15>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1109
	if (i >= SemaNum)
    71d5:	67 66 83 7d fc 3b    	cmp    DWORD PTR [ebp-0x4],0x3b
    71db:	7e 08                	jle    71e5 <_do_getsem+0x59>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1110
		return -1;
    71dd:	66 b8 ff ff ff ff    	mov    eax,0xffffffff
    71e3:	eb 62                	jmp    7247 <_do_getsem+0xbb>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1111
	semaphoreArray[i].used = tru;
    71e5:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    71ea:	66 89 d0             	mov    eax,edx
    71ed:	66 c1 e0 02          	shl    eax,0x2
    71f1:	66 01 d0             	add    eax,edx
    71f4:	67 66 8d 14 85 00 00 	lea    edx,[eax*4+0x0]
    71fb:	00 00 
    71fd:	66 01 d0             	add    eax,edx
    7200:	66 c1 e0 02          	shl    eax,0x2
    7204:	66 05 04 a8 00 00    	add    eax,0xa804
    720a:	67 66 c7 00 01 00 00 	mov    DWORD PTR [eax],0x1
    7211:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1112
	semaphoreArray[i].resources = resourceSize;
    7212:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    7217:	66 89 d0             	mov    eax,edx
    721a:	66 c1 e0 02          	shl    eax,0x2
    721e:	66 01 d0             	add    eax,edx
    7221:	67 66 8d 14 85 00 00 	lea    edx,[eax*4+0x0]
    7228:	00 00 
    722a:	66 01 d0             	add    eax,edx
    722d:	66 c1 e0 02          	shl    eax,0x2
    7231:	67 66 8d 90 00 a8 00 	lea    edx,[eax+0xa800]
    7238:	00 
    7239:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    723e:	67 66 89 02          	mov    DWORD PTR [edx],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1113
	return i;
    7242:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1115
	__asm__("sti\n");
}
    7247:	66 c9                	leave  
    7249:	66 c3                	ret    

0000724b <_do_freesem>:
do_freesem():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1118

void do_freesem(int sem_id)
{
    724b:	66 55                	push   ebp
    724d:	66 89 e5             	mov    ebp,esp
    7250:	66 83 ec 04          	sub    esp,0x4
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1119
	__asm__("cli\n");
    7254:	fa                   	cli    
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1120
	semaphoreArray[sem_id].used = fal;
    7255:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    725a:	66 89 d0             	mov    eax,edx
    725d:	66 c1 e0 02          	shl    eax,0x2
    7261:	66 01 d0             	add    eax,edx
    7264:	67 66 8d 14 85 00 00 	lea    edx,[eax*4+0x0]
    726b:	00 00 
    726d:	66 01 d0             	add    eax,edx
    7270:	66 c1 e0 02          	shl    eax,0x2
    7274:	66 05 04 a8 00 00    	add    eax,0xa804
    727a:	67 66 c7 00 00 00 00 	mov    DWORD PTR [eax],0x0
    7281:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1121
	clearQue(&semaphoreArray[sem_id].semaQue);
    7282:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    7287:	66 89 d0             	mov    eax,edx
    728a:	66 c1 e0 02          	shl    eax,0x2
    728e:	66 01 d0             	add    eax,edx
    7291:	67 66 8d 14 85 00 00 	lea    edx,[eax*4+0x0]
    7298:	00 00 
    729a:	66 01 d0             	add    eax,edx
    729d:	66 c1 e0 02          	shl    eax,0x2
    72a1:	66 05 00 a8 00 00    	add    eax,0xa800
    72a7:	66 83 c0 08          	add    eax,0x8
    72ab:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    72b0:	66 e8 78 03 00 00    	call   762e <_clearQue>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1122
	__asm__("sti\n");
    72b6:	fb                   	sti    
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1123
}
    72b7:	90                   	nop
    72b8:	66 c9                	leave  
    72ba:	66 c3                	ret    

000072bc <_do_p>:
do_p():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1126

void do_p(int sem_id)
{
    72bc:	66 55                	push   ebp
    72be:	66 89 e5             	mov    ebp,esp
    72c1:	66 83 ec 08          	sub    esp,0x8
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1127
	__asm__("cli\n");
    72c5:	fa                   	cli    
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1128
	semaphoreArray[sem_id].resources -= 1;
    72c6:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    72cb:	66 89 d0             	mov    eax,edx
    72ce:	66 c1 e0 02          	shl    eax,0x2
    72d2:	66 01 d0             	add    eax,edx
    72d5:	67 66 8d 14 85 00 00 	lea    edx,[eax*4+0x0]
    72dc:	00 00 
    72de:	66 01 d0             	add    eax,edx
    72e1:	66 c1 e0 02          	shl    eax,0x2
    72e5:	66 05 00 a8 00 00    	add    eax,0xa800
    72eb:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    72ef:	67 66 8d 48 ff       	lea    ecx,[eax-0x1]
    72f4:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    72f9:	66 89 d0             	mov    eax,edx
    72fc:	66 c1 e0 02          	shl    eax,0x2
    7300:	66 01 d0             	add    eax,edx
    7303:	67 66 8d 14 85 00 00 	lea    edx,[eax*4+0x0]
    730a:	00 00 
    730c:	66 01 d0             	add    eax,edx
    730f:	66 c1 e0 02          	shl    eax,0x2
    7313:	66 05 00 a8 00 00    	add    eax,0xa800
    7319:	67 66 89 08          	mov    DWORD PTR [eax],ecx
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1129
	if (semaphoreArray[sem_id].resources < 0)
    731d:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    7322:	66 89 d0             	mov    eax,edx
    7325:	66 c1 e0 02          	shl    eax,0x2
    7329:	66 01 d0             	add    eax,edx
    732c:	67 66 8d 14 85 00 00 	lea    edx,[eax*4+0x0]
    7333:	00 00 
    7335:	66 01 d0             	add    eax,edx
    7338:	66 c1 e0 02          	shl    eax,0x2
    733c:	66 05 00 a8 00 00    	add    eax,0xa800
    7342:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    7346:	66 85 c0             	test   eax,eax
    7349:	0f 89 85 00          	jns    73d2 <_do_p+0x116>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1131
	{
		delEle(&ReadyQue, curProcessId);
    734d:	66 a1 40 e8          	mov    eax,ds:0xe840
    7351:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    7357:	67 66 c7 04 24 60 e8 	mov    DWORD PTR [esp],0xe860
    735e:	00 00 
    7360:	66 e8 12 03 00 00    	call   7678 <_delEle>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1132
		processTable[curProcessId].status = blocked;
    7366:	66 8b 16 40 e8       	mov    edx,DWORD PTR ds:0xe840
    736b:	66 89 d0             	mov    eax,edx
    736e:	66 c1 e0 03          	shl    eax,0x3
    7372:	66 01 d0             	add    eax,edx
    7375:	66 01 c0             	add    eax,eax
    7378:	66 01 d0             	add    eax,edx
    737b:	66 c1 e0 04          	shl    eax,0x4
    737f:	66 05 ac d1 00 00    	add    eax,0xd1ac
    7385:	67 66 c7 00 03 00 00 	mov    DWORD PTR [eax],0x3
    738c:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1133
		enqueue(&semaphoreArray[sem_id].semaQue, curProcessId);
    738d:	66 8b 16 40 e8       	mov    edx,DWORD PTR ds:0xe840
    7392:	67 66 8b 4d 08       	mov    ecx,DWORD PTR [ebp+0x8]
    7397:	66 89 c8             	mov    eax,ecx
    739a:	66 c1 e0 02          	shl    eax,0x2
    739e:	66 01 c8             	add    eax,ecx
    73a1:	67 66 8d 0c 85 00 00 	lea    ecx,[eax*4+0x0]
    73a8:	00 00 
    73aa:	66 01 c8             	add    eax,ecx
    73ad:	66 c1 e0 02          	shl    eax,0x2
    73b1:	66 05 00 a8 00 00    	add    eax,0xa800
    73b7:	66 83 c0 08          	add    eax,0x8
    73bb:	67 66 89 54 24 04    	mov    DWORD PTR [esp+0x4],edx
    73c1:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    73c6:	66 e8 82 01 00 00    	call   754e <_enqueue>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1134
		processSwitch();
    73cc:	66 e8 27 e9 ff ff    	call   5cf9 <_processSwitch>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1136
	}
	__asm__("sti\n");
    73d2:	fb                   	sti    
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1137
}
    73d3:	90                   	nop
    73d4:	66 c9                	leave  
    73d6:	66 c3                	ret    

000073d8 <_do_v>:
do_v():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1141


void do_v(int sem_id)
{
    73d8:	66 55                	push   ebp
    73da:	66 89 e5             	mov    ebp,esp
    73dd:	66 83 ec 08          	sub    esp,0x8
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1142
	__asm__("cli\n");
    73e1:	fa                   	cli    
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1143
	++semaphoreArray[sem_id].resources;
    73e2:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    73e7:	66 89 d0             	mov    eax,edx
    73ea:	66 c1 e0 02          	shl    eax,0x2
    73ee:	66 01 d0             	add    eax,edx
    73f1:	67 66 8d 14 85 00 00 	lea    edx,[eax*4+0x0]
    73f8:	00 00 
    73fa:	66 01 d0             	add    eax,edx
    73fd:	66 c1 e0 02          	shl    eax,0x2
    7401:	66 05 00 a8 00 00    	add    eax,0xa800
    7407:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    740b:	67 66 8d 48 01       	lea    ecx,[eax+0x1]
    7410:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    7415:	66 89 d0             	mov    eax,edx
    7418:	66 c1 e0 02          	shl    eax,0x2
    741c:	66 01 d0             	add    eax,edx
    741f:	67 66 8d 14 85 00 00 	lea    edx,[eax*4+0x0]
    7426:	00 00 
    7428:	66 01 d0             	add    eax,edx
    742b:	66 c1 e0 02          	shl    eax,0x2
    742f:	66 05 00 a8 00 00    	add    eax,0xa800
    7435:	67 66 89 08          	mov    DWORD PTR [eax],ecx
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1144
	if (semaphoreArray[sem_id].resources <= 0)
    7439:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    743e:	66 89 d0             	mov    eax,edx
    7441:	66 c1 e0 02          	shl    eax,0x2
    7445:	66 01 d0             	add    eax,edx
    7448:	67 66 8d 14 85 00 00 	lea    edx,[eax*4+0x0]
    744f:	00 00 
    7451:	66 01 d0             	add    eax,edx
    7454:	66 c1 e0 02          	shl    eax,0x2
    7458:	66 05 00 a8 00 00    	add    eax,0xa800
    745e:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    7462:	66 85 c0             	test   eax,eax
    7465:	7f 7e                	jg     74e5 <_do_v+0x10d>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1146
	{
		dequeue(&semaphoreArray[sem_id].semaQue, &tmpID);
    7467:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    746c:	66 89 d0             	mov    eax,edx
    746f:	66 c1 e0 02          	shl    eax,0x2
    7473:	66 01 d0             	add    eax,edx
    7476:	67 66 8d 14 85 00 00 	lea    edx,[eax*4+0x0]
    747d:	00 00 
    747f:	66 01 d0             	add    eax,edx
    7482:	66 c1 e0 02          	shl    eax,0x2
    7486:	66 05 00 a8 00 00    	add    eax,0xa800
    748c:	66 83 c0 08          	add    eax,0x8
    7490:	67 66 c7 44 24 04 cc 	mov    DWORD PTR [esp+0x4],0xe8cc
    7497:	e8 00 00 
    749a:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    749f:	66 e8 16 01 00 00    	call   75bb <_dequeue>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1147
		processTable[tmpID].status = ready;
    74a5:	66 8b 16 cc e8       	mov    edx,DWORD PTR ds:0xe8cc
    74aa:	66 89 d0             	mov    eax,edx
    74ad:	66 c1 e0 03          	shl    eax,0x3
    74b1:	66 01 d0             	add    eax,edx
    74b4:	66 01 c0             	add    eax,eax
    74b7:	66 01 d0             	add    eax,edx
    74ba:	66 c1 e0 04          	shl    eax,0x4
    74be:	66 05 ac d1 00 00    	add    eax,0xd1ac
    74c4:	67 66 c7 00 01 00 00 	mov    DWORD PTR [eax],0x1
    74cb:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1148
		enqueue(&ReadyQue, tmpID);
    74cc:	66 a1 cc e8          	mov    eax,ds:0xe8cc
    74d0:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    74d6:	67 66 c7 04 24 60 e8 	mov    DWORD PTR [esp],0xe860
    74dd:	00 00 
    74df:	66 e8 69 00 00 00    	call   754e <_enqueue>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1150
	}
	__asm__("sti\n");
    74e5:	fb                   	sti    
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1151
}
    74e6:	90                   	nop
    74e7:	66 c9                	leave  
    74e9:	66 c3                	ret    

000074eb <_empty>:
empty():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1157
/////////////////////////////////////


////////////// utils /////////////////
int empty(struct Queue * que)
{
    74eb:	66 55                	push   ebp
    74ed:	66 89 e5             	mov    ebp,esp
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1158
	return que->size == 0;
    74f0:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    74f5:	67 66 8b 40 08       	mov    eax,DWORD PTR [eax+0x8]
    74fa:	66 85 c0             	test   eax,eax
    74fd:	0f 94 c0             	sete   al
    7500:	66 0f b6 c0          	movzx  eax,al
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1159
}
    7504:	66 5d                	pop    ebp
    7506:	66 c3                	ret    

00007508 <_size>:
size():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1162

int size(struct Queue * que)
{
    7508:	66 55                	push   ebp
    750a:	66 89 e5             	mov    ebp,esp
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1163
	return que->size;
    750d:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    7512:	67 66 8b 40 08       	mov    eax,DWORD PTR [eax+0x8]
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1164
}
    7517:	66 5d                	pop    ebp
    7519:	66 c3                	ret    

0000751b <_init>:
init():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1167

void init(struct Queue * que)
{
    751b:	66 55                	push   ebp
    751d:	66 89 e5             	mov    ebp,esp
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1168
	que->tail = Len - 1;
    7520:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    7525:	67 66 c7 00 13 00 00 	mov    DWORD PTR [eax],0x13
    752c:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1169
	que->head = 0;
    752d:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    7532:	67 66 c7 40 04 00 00 	mov    DWORD PTR [eax+0x4],0x0
    7539:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1170
	que->size = 0;
    753b:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    7540:	67 66 c7 40 08 00 00 	mov    DWORD PTR [eax+0x8],0x0
    7547:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1171
}
    7549:	90                   	nop
    754a:	66 5d                	pop    ebp
    754c:	66 c3                	ret    

0000754e <_enqueue>:
enqueue():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1174

void enqueue(struct Queue * que, int ele)
{
    754e:	66 55                	push   ebp
    7550:	66 89 e5             	mov    ebp,esp
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1175
	if (que->size >= Len)
    7553:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    7558:	67 66 8b 40 08       	mov    eax,DWORD PTR [eax+0x8]
    755d:	66 83 f8 13          	cmp    eax,0x13
    7561:	7f 53                	jg     75b6 <_enqueue+0x68>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1177
		return ;
	que->size++;
    7563:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    7568:	67 66 8b 40 08       	mov    eax,DWORD PTR [eax+0x8]
    756d:	67 66 8d 50 01       	lea    edx,[eax+0x1]
    7572:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    7577:	67 66 89 50 08       	mov    DWORD PTR [eax+0x8],edx
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1178
	que->tail = (que->tail + 1) % Len;
    757c:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    7581:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    7585:	66 40                	inc    eax
    7587:	66 b9 14 00 00 00    	mov    ecx,0x14
    758d:	66 99                	cdq    
    758f:	66 f7 f9             	idiv   ecx
    7592:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    7597:	67 66 89 10          	mov    DWORD PTR [eax],edx
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1179
	que->array[que->tail] = ele;
    759b:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    75a0:	67 66 8b 10          	mov    edx,DWORD PTR [eax]
    75a4:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    75a9:	67 66 8b 4d 0c       	mov    ecx,DWORD PTR [ebp+0xc]
    75ae:	67 66 89 4c 90 0c    	mov    DWORD PTR [eax+edx*4+0xc],ecx
    75b4:	eb 01                	jmp    75b7 <_enqueue+0x69>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1176
		return ;
    75b6:	90                   	nop
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1180
}
    75b7:	66 5d                	pop    ebp
    75b9:	66 c3                	ret    

000075bb <_dequeue>:
dequeue():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1183

void dequeue(struct Queue * que, int * ele)
{
    75bb:	66 55                	push   ebp
    75bd:	66 89 e5             	mov    ebp,esp
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1184
	if (que->size <= 0)
    75c0:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    75c5:	67 66 8b 40 08       	mov    eax,DWORD PTR [eax+0x8]
    75ca:	66 85 c0             	test   eax,eax
    75cd:	7e 5a                	jle    7629 <_dequeue+0x6e>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1186
		return ;
	que->size--;
    75cf:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    75d4:	67 66 8b 40 08       	mov    eax,DWORD PTR [eax+0x8]
    75d9:	67 66 8d 50 ff       	lea    edx,[eax-0x1]
    75de:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    75e3:	67 66 89 50 08       	mov    DWORD PTR [eax+0x8],edx
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1187
	*ele = que->array[que->head];
    75e8:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    75ed:	67 66 8b 50 04       	mov    edx,DWORD PTR [eax+0x4]
    75f2:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    75f7:	67 66 8b 54 90 0c    	mov    edx,DWORD PTR [eax+edx*4+0xc]
    75fd:	67 66 8b 45 0c       	mov    eax,DWORD PTR [ebp+0xc]
    7602:	67 66 89 10          	mov    DWORD PTR [eax],edx
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1188
	que->head = (que->head + 1) % Len;
    7606:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    760b:	67 66 8b 40 04       	mov    eax,DWORD PTR [eax+0x4]
    7610:	66 40                	inc    eax
    7612:	66 b9 14 00 00 00    	mov    ecx,0x14
    7618:	66 99                	cdq    
    761a:	66 f7 f9             	idiv   ecx
    761d:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    7622:	67 66 89 50 04       	mov    DWORD PTR [eax+0x4],edx
    7627:	eb 01                	jmp    762a <_dequeue+0x6f>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1185
		return ;
    7629:	90                   	nop
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1189
}
    762a:	66 5d                	pop    ebp
    762c:	66 c3                	ret    

0000762e <_clearQue>:
clearQue():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1192

void clearQue(struct Queue * que)
{
    762e:	66 55                	push   ebp
    7630:	66 89 e5             	mov    ebp,esp
    7633:	66 83 ec 08          	sub    esp,0x8
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1193
	for (int i = 0; i < Len; ++i)
    7637:	67 66 c7 45 fc 00 00 	mov    DWORD PTR [ebp-0x4],0x0
    763e:	00 00 
    7640:	eb 19                	jmp    765b <_clearQue+0x2d>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1195
	{
		que->array[i] = 0;
    7642:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    7647:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    764c:	67 66 c7 44 90 0c 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
    7653:	00 00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1193
	for (int i = 0; i < Len; ++i)
    7656:	67 66 ff 45 fc       	inc    DWORD PTR [ebp-0x4]
    765b:	67 66 83 7d fc 13    	cmp    DWORD PTR [ebp-0x4],0x13
    7661:	7e df                	jle    7642 <_clearQue+0x14>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1197
	}
	init(que);
    7663:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    7668:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    766d:	66 e8 a8 fe ff ff    	call   751b <_init>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1198
}
    7673:	90                   	nop
    7674:	66 c9                	leave  
    7676:	66 c3                	ret    

00007678 <_delEle>:
delEle():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1201

void delEle(struct Queue * que, int ele)
{
    7678:	66 55                	push   ebp
    767a:	66 89 e5             	mov    ebp,esp
    767d:	66 83 ec 10          	sub    esp,0x10
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1202
	int queSize = size(que);
    7681:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    7686:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    768b:	66 e8 77 fe ff ff    	call   7508 <_size>
    7691:	67 66 89 45 f8       	mov    DWORD PTR [ebp-0x8],eax
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1203
	for (int i = 0; i < queSize; ++i)
    7696:	67 66 c7 45 fc 00 00 	mov    DWORD PTR [ebp-0x4],0x0
    769d:	00 00 
    769f:	eb 44                	jmp    76e5 <_delEle+0x6d>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1205
	{
		dequeue(que, &tmp);
    76a1:	67 66 c7 44 24 04 c8 	mov    DWORD PTR [esp+0x4],0xe8c8
    76a8:	e8 00 00 
    76ab:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    76b0:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    76b5:	66 e8 00 ff ff ff    	call   75bb <_dequeue>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1206
		if (tmp != ele)
    76bb:	66 a1 c8 e8          	mov    eax,ds:0xe8c8
    76bf:	67 66 3b 45 0c       	cmp    eax,DWORD PTR [ebp+0xc]
    76c4:	74 1a                	je     76e0 <_delEle+0x68>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1208
		{
			enqueue(que, tmp);
    76c6:	66 a1 c8 e8          	mov    eax,ds:0xe8c8
    76ca:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    76d0:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    76d5:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    76da:	66 e8 6e fe ff ff    	call   754e <_enqueue>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1203
	for (int i = 0; i < queSize; ++i)
    76e0:	67 66 ff 45 fc       	inc    DWORD PTR [ebp-0x4]
    76e5:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
    76ea:	67 66 3b 45 f8       	cmp    eax,DWORD PTR [ebp-0x8]
    76ef:	7c b0                	jl     76a1 <_delEle+0x29>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1211
		}
	}
}
    76f1:	90                   	nop
    76f2:	66 c9                	leave  
    76f4:	66 c3                	ret    

000076f6 <_int34h>:
int34h():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1217
/////////////////////////////////////


////////// interruptions //////////
void int34h()
{
    76f6:	66 55                	push   ebp
    76f8:	66 89 e5             	mov    ebp,esp
    76fb:	66 83 ec 18          	sub    esp,0x18
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1218
	char * s = "Int 34h Xihuai Wang";
    76ff:	67 66 c7 45 fc fb 80 	mov    DWORD PTR [ebp-0x4],0x80fb
    7706:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1219
	printSentence(s, 6, 5, strlen(s), purple);
    7708:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
    770d:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    7712:	66 e8 60 bb ff ff    	call   3278 <_strlen>
    7718:	67 66 c7 44 24 10 0d 	mov    DWORD PTR [esp+0x10],0xd
    771f:	00 00 00 
    7722:	67 66 89 44 24 0c    	mov    DWORD PTR [esp+0xc],eax
    7728:	67 66 c7 44 24 08 05 	mov    DWORD PTR [esp+0x8],0x5
    772f:	00 00 00 
    7732:	67 66 c7 44 24 04 06 	mov    DWORD PTR [esp+0x4],0x6
    7739:	00 00 00 
    773c:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
    7741:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    7746:	66 e8 a9 a2 ff ff    	call   19f5 <_printSentence>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1220
}
    774c:	90                   	nop
    774d:	66 c9                	leave  
    774f:	66 c3                	ret    

00007751 <_int35h>:
int35h():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1222
void int35h()
{
    7751:	66 55                	push   ebp
    7753:	66 89 e5             	mov    ebp,esp
    7756:	66 83 ec 18          	sub    esp,0x18
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1223
	char * s = "Int 35h 16337236";
    775a:	67 66 c7 45 fc 0f 81 	mov    DWORD PTR [ebp-0x4],0x810f
    7761:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1224
	printSentence(s, 6, 46, strlen(s), purple);
    7763:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
    7768:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    776d:	66 e8 05 bb ff ff    	call   3278 <_strlen>
    7773:	67 66 c7 44 24 10 0d 	mov    DWORD PTR [esp+0x10],0xd
    777a:	00 00 00 
    777d:	67 66 89 44 24 0c    	mov    DWORD PTR [esp+0xc],eax
    7783:	67 66 c7 44 24 08 2e 	mov    DWORD PTR [esp+0x8],0x2e
    778a:	00 00 00 
    778d:	67 66 c7 44 24 04 06 	mov    DWORD PTR [esp+0x4],0x6
    7794:	00 00 00 
    7797:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
    779c:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    77a1:	66 e8 4e a2 ff ff    	call   19f5 <_printSentence>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1225
}
    77a7:	90                   	nop
    77a8:	66 c9                	leave  
    77aa:	66 c3                	ret    

000077ac <_int36h>:
int36h():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1227
void int36h()
{
    77ac:	66 55                	push   ebp
    77ae:	66 89 e5             	mov    ebp,esp
    77b1:	66 83 ec 18          	sub    esp,0x18
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1228
	char * s = "Int 34h Class two";
    77b5:	67 66 c7 45 fc 20 81 	mov    DWORD PTR [ebp-0x4],0x8120
    77bc:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1229
	printSentence(s, 18, 5, strlen(s), purple);
    77be:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
    77c3:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    77c8:	66 e8 aa ba ff ff    	call   3278 <_strlen>
    77ce:	67 66 c7 44 24 10 0d 	mov    DWORD PTR [esp+0x10],0xd
    77d5:	00 00 00 
    77d8:	67 66 89 44 24 0c    	mov    DWORD PTR [esp+0xc],eax
    77de:	67 66 c7 44 24 08 05 	mov    DWORD PTR [esp+0x8],0x5
    77e5:	00 00 00 
    77e8:	67 66 c7 44 24 04 12 	mov    DWORD PTR [esp+0x4],0x12
    77ef:	00 00 00 
    77f2:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
    77f7:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    77fc:	66 e8 f3 a1 ff ff    	call   19f5 <_printSentence>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1230
}
    7802:	90                   	nop
    7803:	66 c9                	leave  
    7805:	66 c3                	ret    

00007807 <_int37h>:
int37h():
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1232
void int37h()
{
    7807:	66 55                	push   ebp
    7809:	66 89 e5             	mov    ebp,esp
    780c:	66 83 ec 18          	sub    esp,0x18
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1233
	char * s = "Int 34h Grade 2016";
    7810:	67 66 c7 45 fc 32 81 	mov    DWORD PTR [ebp-0x4],0x8132
    7817:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1234
	printSentence(s, 18, 46, strlen(s), purple);
    7819:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
    781e:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    7823:	66 e8 4f ba ff ff    	call   3278 <_strlen>
    7829:	67 66 c7 44 24 10 0d 	mov    DWORD PTR [esp+0x10],0xd
    7830:	00 00 00 
    7833:	67 66 89 44 24 0c    	mov    DWORD PTR [esp+0xc],eax
    7839:	67 66 c7 44 24 08 2e 	mov    DWORD PTR [esp+0x8],0x2e
    7840:	00 00 00 
    7843:	67 66 c7 44 24 04 12 	mov    DWORD PTR [esp+0x4],0x12
    784a:	00 00 00 
    784d:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
    7852:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    7857:	66 e8 98 a1 ff ff    	call   19f5 <_printSentence>
D:\OneDrive\Study\Operating Systems\MyOs\project8\codes/./lib/utilsC.c:1235
}
    785d:	90                   	nop
    785e:	66 c9                	leave  
    7860:	66 c3                	ret    
    7862:	66 90                	xchg   eax,eax

00007864 <_WelcomeSentence>:
    7864:	58                   	pop    ax
    7865:	80 00 00             	add    BYTE PTR [bx+si],0x0

00007868 <_prompt>:
    7868:	97                   	xchg   di,ax
    7869:	80 00 00             	add    BYTE PTR [bx+si],0x0
    786c:	eb 12                	jmp    7880 <_prompt+0x18>
    786e:	90                   	nop
    786f:	90                   	nop
    7870:	90                   	nop
    7871:	90                   	nop
    7872:	90                   	nop
    7873:	90                   	nop
    7874:	90                   	nop
    7875:	90                   	nop
    7876:	90                   	nop
    7877:	90                   	nop
    7878:	90                   	nop
    7879:	90                   	nop
    787a:	90                   	nop
    787b:	90                   	nop
    787c:	90                   	nop
    787d:	90                   	nop
    787e:	90                   	nop
    787f:	90                   	nop
    7880:	4f                   	dec    di
    7881:	72 69                	jb     78ec <_prompt+0x84>
    7883:	67 69 6e 00 00 00    	imul   bp,WORD PTR [esi+0x0],0x0
    7889:	00 72 65             	add    BYTE PTR [bp+si+0x65],dh
    788c:	61                   	popa   
    788d:	64 79 00             	fs jns 7890 <_prompt+0x28>
    7890:	00 00                	add    BYTE PTR [bx+si],al
    7892:	00 00                	add    BYTE PTR [bx+si],al
    7894:	72 75                	jb     790b <_prompt+0xa3>
    7896:	6e                   	outs   dx,BYTE PTR ds:[si]
    7897:	6e                   	outs   dx,BYTE PTR ds:[si]
    7898:	69 6e 67 00 00       	imul   bp,WORD PTR [bp+0x67],0x0
    789d:	00 62 6c             	add    BYTE PTR [bp+si+0x6c],ah
    78a0:	6f                   	outs   dx,WORD PTR ds:[si]
    78a1:	63 6b 65             	arpl   WORD PTR [bp+di+0x65],bp
    78a4:	64 00 00             	add    BYTE PTR fs:[bx+si],al
    78a7:	00 73 75             	add    BYTE PTR [bp+di+0x75],dh
    78aa:	73 70                	jae    791c <_prompt+0xb4>
    78ac:	65 6e                	outs   dx,BYTE PTR gs:[si]
    78ae:	64 00 00             	add    BYTE PTR fs:[bx+si],al
    78b1:	00 65 78             	add    BYTE PTR [di+0x78],ah
    78b4:	69 74 00 00 00       	imul   si,WORD PTR [si+0x0],0x0
    78b9:	00 00                	add    BYTE PTR [bx+si],al
    78bb:	00 00                	add    BYTE PTR [bx+si],al
    78bd:	00 00                	add    BYTE PTR [bx+si],al
	...
