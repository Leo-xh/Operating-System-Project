
..\imgs\boot.tmp:     file format pei-i386


Disassembly of section .text:

00000000 <.text>:
       0:	66 8c c8             	mov    eax,cs
       3:	8e d8                	mov    ds,ax
       5:	8e c0                	mov    es,ax
       7:	8e d0                	mov    ss,ax
       9:	8e e8                	mov    gs,ax
       b:	66 e8 e4 11 00 00    	call   11f5 <_inisys>
      11:	eb 00                	jmp    13 <__main>

00000013 <__main>:
_main():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:41
{
	int i;
	struct testMalloc * next;
};

int _main() {
      13:	66 55                	push   ebp
      15:	66 89 e5             	mov    ebp,esp
      18:	66 57                	push   edi
      1a:	66 56                	push   esi
      1c:	66 53                	push   ebx
      1e:	66 81 ec 14 01 00 00 	sub    esp,0x114
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:42
	runSub = 0;
      25:	66 c7 06 bc a3 00 00 	mov    DWORD PTR ds:0xa3bc,0x0
      2c:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:43
	curProcessId = 0;
      2e:	66 c7 06 70 e9 00 00 	mov    DWORD PTR ds:0xe970,0x0
      35:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:44
	ProcessSize = 1;
      37:	66 c7 06 dc a7 01 00 	mov    DWORD PTR ds:0xa7dc,0x1
      3e:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:45
	curPageId = 1;
      40:	66 c7 06 80 a2 01 00 	mov    DWORD PTR ds:0xa280,0x1
      47:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:46
	processTable[curPageId].pageID = curPageId;
      49:	66 8b 16 80 a2       	mov    edx,DWORD PTR ds:0xa280
      4e:	66 8b 0e 80 a2       	mov    ecx,DWORD PTR ds:0xa280
      53:	66 89 d0             	mov    eax,edx
      56:	66 c1 e0 03          	shl    eax,0x3
      5a:	66 01 d0             	add    eax,edx
      5d:	66 01 c0             	add    eax,eax
      60:	66 01 d0             	add    eax,edx
      63:	66 c1 e0 02          	shl    eax,0x2
      67:	66 01 d0             	add    eax,edx
      6a:	66 c1 e0 02          	shl    eax,0x2
      6e:	66 05 8c d2 00 00    	add    eax,0xd28c
      74:	67 66 89 08          	mov    DWORD PTR [eax],ecx
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:47
	SizeOfProcessStruct = sizeof(struct Process);
      78:	66 c7 06 e4 a7 34 01 	mov    DWORD PTR ds:0xa7e4,0x134
      7f:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:48
	initial();
      81:	66 e8 6f 32 00 00    	call   32f6 <_initial>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:51
	char * in;
	char * str;
	int tmp = -1;
      87:	67 66 c7 85 6c ff ff 	mov    DWORD PTR [ebp-0x94],0xffffffff
      8e:	ff ff ff ff ff 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:52
	init(&ReadyQue);
      93:	67 66 c7 04 24 80 e9 	mov    DWORD PTR [esp],0xe980
      9a:	00 00 
      9c:	66 e8 c3 78 00 00    	call   7965 <_init>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:53
	init(&BlockedQue);
      a2:	67 66 c7 04 24 80 a7 	mov    DWORD PTR [esp],0xa780
      a9:	00 00 
      ab:	66 e8 b4 78 00 00    	call   7965 <_init>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:54
	init(&SuspendQue);
      b1:	67 66 c7 04 24 00 d1 	mov    DWORD PTR [esp],0xd100
      b8:	00 00 
      ba:	66 e8 a5 78 00 00    	call   7965 <_init>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:55
	init(&KeyboardQue);
      c0:	67 66 c7 04 24 60 a3 	mov    DWORD PTR [esp],0xa360
      c7:	00 00 
      c9:	66 e8 96 78 00 00    	call   7965 <_init>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:80
	// int p = getPage();
	// int2str(p, tmpstr);
	// printSentence(tmpstr, 20, 0, 1, white);

	do {
		in = getInput();
      cf:	66 e8 00 18 00 00    	call   18d5 <_getInput>
      d5:	67 66 89 45 e0       	mov    DWORD PTR [ebp-0x20],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:99
		// 	__asm__("int $0x8\n");
		// 	runSub = 0;
		// 	clear();
		// }
		// else if (in[0] == 'r' && in[1] == 'u' && in[2] == 'n')
		if (in[0] == 'r' && in[1] == 'u' && in[2] == 'n')
      da:	67 66 8b 45 e0       	mov    eax,DWORD PTR [ebp-0x20]
      df:	67 8a 00             	mov    al,BYTE PTR [eax]
      e2:	3c 72                	cmp    al,0x72
      e4:	0f 85 2b 05          	jne    613 <.debug_line+0x3d5>
      e8:	67 66 8b 45 e0       	mov    eax,DWORD PTR [ebp-0x20]
      ed:	66 40                	inc    eax
      ef:	67 8a 00             	mov    al,BYTE PTR [eax]
      f2:	3c 75                	cmp    al,0x75
      f4:	0f 85 1b 05          	jne    613 <.debug_line+0x3d5>
      f8:	67 66 8b 45 e0       	mov    eax,DWORD PTR [ebp-0x20]
      fd:	66 83 c0 02          	add    eax,0x2
     101:	67 8a 00             	mov    al,BYTE PTR [eax]
     104:	3c 6e                	cmp    al,0x6e
     106:	0f 85 09 05          	jne    613 <.debug_line+0x3d5>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:101
		{
			printSentence("\n", line++, 0, strlen("\n"), white);
     10a:	67 66 c7 04 24 00 80 	mov    DWORD PTR [esp],0x8000
     111:	00 00 
     113:	66 e8 dc 32 00 00    	call   33f5 <_strlen>
     119:	66 89 c2             	mov    edx,eax
     11c:	66 a1 60 a2          	mov    eax,ds:0xa260
     120:	67 66 8d 48 01       	lea    ecx,[eax+0x1]
     125:	66 89 0e 60 a2       	mov    DWORD PTR ds:0xa260,ecx
     12a:	67 66 c7 44 24 10 0f 	mov    DWORD PTR [esp+0x10],0xf
     131:	00 00 00 
     134:	67 66 89 54 24 0c    	mov    DWORD PTR [esp+0xc],edx
     13a:	67 66 c7 44 24 08 00 	mov    DWORD PTR [esp+0x8],0x0
     141:	00 00 00 
     144:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
     14a:	67 66 c7 04 24 00 80 	mov    DWORD PTR [esp],0x8000
     151:	00 00 
     153:	66 e8 2d 17 00 00    	call   1886 <_printSentence>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:103
			do {
				str = getInput();
     159:	66 e8 76 17 00 00    	call   18d5 <_getInput>
     15f:	67 66 89 45 98       	mov    DWORD PTR [ebp-0x68],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:104
				printSentence("\n", line++, 0, strlen("\n"), white);
     164:	67 66 c7 04 24 00 80 	mov    DWORD PTR [esp],0x8000
     16b:	00 00 
     16d:	66 e8 82 32 00 00    	call   33f5 <_strlen>
     173:	66 89 c2             	mov    edx,eax
     176:	66 a1 60 a2          	mov    eax,ds:0xa260
     17a:	67 66 8d 48 01       	lea    ecx,[eax+0x1]
     17f:	66 89 0e 60 a2       	mov    DWORD PTR ds:0xa260,ecx
     184:	67 66 c7 44 24 10 0f 	mov    DWORD PTR [esp+0x10],0xf
     18b:	00 00 00 
     18e:	67 66 89 54 24 0c    	mov    DWORD PTR [esp+0xc],edx
     194:	67 66 c7 44 24 08 00 	mov    DWORD PTR [esp+0x8],0x0
     19b:	00 00 00 
     19e:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
     1a4:	67 66 c7 04 24 00 80 	mov    DWORD PTR [esp],0x8000
     1ab:	00 00 
     1ad:	66 e8 d3 16 00 00    	call   1886 <_printSentence>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:105
				if (str[0]) {
     1b3:	67 66 8b 45 98       	mov    eax,DWORD PTR [ebp-0x68]
     1b8:	67 8a 00             	mov    al,BYTE PTR [eax]
     1bb:	84 c0                	test   al,al
     1bd:	0f 84 31 03          	je     4f2 <.debug_line+0x2b4>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:106
					tmp = find(str);
     1c1:	67 66 8b 45 98       	mov    eax,DWORD PTR [ebp-0x68]
     1c6:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
     1cb:	66 e8 ac 37 00 00    	call   397d <_find>
     1d1:	67 66 89 85 6c ff ff 	mov    DWORD PTR [ebp-0x94],eax
     1d8:	ff 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:107
					if (tmp != -1 && information[tmp].deleted != 1) {
     1d9:	67 66 8b 85 6c ff ff 	mov    eax,DWORD PTR [ebp-0x94]
     1e0:	ff 
     1e1:	66 83 f8 ff          	cmp    eax,0xffffffff
     1e5:	0f 84 09 03          	je     4f2 <.debug_line+0x2b4>
     1e9:	67 66 8b 95 6c ff ff 	mov    edx,DWORD PTR [ebp-0x94]
     1f0:	ff 
     1f1:	66 89 d0             	mov    eax,edx
     1f4:	66 01 c0             	add    eax,eax
     1f7:	66 01 d0             	add    eax,edx
     1fa:	66 c1 e0 02          	shl    eax,0x2
     1fe:	66 01 d0             	add    eax,edx
     201:	66 c1 e0 02          	shl    eax,0x2
     205:	66 01 d0             	add    eax,edx
     208:	66 c1 e0 02          	shl    eax,0x2
     20c:	66 05 8c c0 00 00    	add    eax,0xc08c
     212:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
     216:	66 83 f8 01          	cmp    eax,0x1
     21a:	0f 84 d4 02          	je     4f2 <.debug_line+0x2b4>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:108
						int blockNum = findEnoughBlock(information[tmp].size + 1024);
     21e:	67 66 8b 95 6c ff ff 	mov    edx,DWORD PTR [ebp-0x94]
     225:	ff 
     226:	66 89 d0             	mov    eax,edx
     229:	66 01 c0             	add    eax,eax
     22c:	66 01 d0             	add    eax,edx
     22f:	66 c1 e0 02          	shl    eax,0x2
     233:	66 01 d0             	add    eax,edx
     236:	66 c1 e0 02          	shl    eax,0x2
     23a:	66 01 d0             	add    eax,edx
     23d:	66 c1 e0 02          	shl    eax,0x2
     241:	66 05 88 c0 00 00    	add    eax,0xc088
     247:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
     24b:	66 05 00 04 00 00    	add    eax,0x400
     251:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
     256:	66 e8 1a 6f 00 00    	call   7176 <_findEnoughBlock>
     25c:	67 66 89 45 94       	mov    DWORD PTR [ebp-0x6c],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:109
						blockNum = require(information[tmp].size + 1024, blockNum);
     261:	67 66 8b 95 6c ff ff 	mov    edx,DWORD PTR [ebp-0x94]
     268:	ff 
     269:	66 89 d0             	mov    eax,edx
     26c:	66 01 c0             	add    eax,eax
     26f:	66 01 d0             	add    eax,edx
     272:	66 c1 e0 02          	shl    eax,0x2
     276:	66 01 d0             	add    eax,edx
     279:	66 c1 e0 02          	shl    eax,0x2
     27d:	66 01 d0             	add    eax,edx
     280:	66 c1 e0 02          	shl    eax,0x2
     284:	66 05 88 c0 00 00    	add    eax,0xc088
     28a:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
     28e:	67 66 8d 90 00 04 00 	lea    edx,[eax+0x400]
     295:	00 
     296:	67 66 8b 45 94       	mov    eax,DWORD PTR [ebp-0x6c]
     29b:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
     2a1:	67 66 89 14 24       	mov    DWORD PTR [esp],edx
     2a6:	66 e8 73 6f 00 00    	call   721f <_require>
     2ac:	67 66 89 45 94       	mov    DWORD PTR [ebp-0x6c],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:111
						int offsetOfPrg, segOfPrg;
						int offsetMask = 0x0000ffff;
     2b1:	67 66 c7 45 90 ff ff 	mov    DWORD PTR [ebp-0x70],0xffff
     2b8:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:112
						int segMask = 0xf0000;
     2ba:	67 66 c7 45 8c 00 00 	mov    DWORD PTR [ebp-0x74],0xf0000
     2c1:	0f 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:113
						offsetOfPrg = memoryTable[blockNum].beginAddr & offsetMask;
     2c3:	67 66 8b 55 94       	mov    edx,DWORD PTR [ebp-0x6c]
     2c8:	66 89 d0             	mov    eax,edx
     2cb:	66 01 c0             	add    eax,eax
     2ce:	66 01 d0             	add    eax,edx
     2d1:	66 c1 e0 03          	shl    eax,0x3
     2d5:	66 05 c0 a3 00 00    	add    eax,0xa3c0
     2db:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
     2df:	67 66 23 45 90       	and    eax,DWORD PTR [ebp-0x70]
     2e4:	67 66 89 45 88       	mov    DWORD PTR [ebp-0x78],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:114
						segOfPrg = (memoryTable[blockNum].beginAddr & segMask) >> 4;
     2e9:	67 66 8b 55 94       	mov    edx,DWORD PTR [ebp-0x6c]
     2ee:	66 89 d0             	mov    eax,edx
     2f1:	66 01 c0             	add    eax,eax
     2f4:	66 01 d0             	add    eax,edx
     2f7:	66 c1 e0 03          	shl    eax,0x3
     2fb:	66 05 c0 a3 00 00    	add    eax,0xa3c0
     301:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
     305:	67 66 23 45 8c       	and    eax,DWORD PTR [ebp-0x74]
     30a:	66 c1 f8 04          	sar    eax,0x4
     30e:	67 66 89 45 84       	mov    DWORD PTR [ebp-0x7c],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:115
						int cs = segOfPrg + (offsetOfPrg >> 4), ip = 0, ss = segOfPrg + (offsetOfPrg >> 4), sp = information[tmp].size + 1024 - 1;
     313:	67 66 8b 45 88       	mov    eax,DWORD PTR [ebp-0x78]
     318:	66 c1 f8 04          	sar    eax,0x4
     31c:	66 89 c2             	mov    edx,eax
     31f:	67 66 8b 45 84       	mov    eax,DWORD PTR [ebp-0x7c]
     324:	66 01 d0             	add    eax,edx
     327:	67 66 89 45 80       	mov    DWORD PTR [ebp-0x80],eax
     32c:	67 66 c7 85 7c ff ff 	mov    DWORD PTR [ebp-0x84],0x0
     333:	ff 00 00 00 00 
     338:	67 66 8b 45 88       	mov    eax,DWORD PTR [ebp-0x78]
     33d:	66 c1 f8 04          	sar    eax,0x4
     341:	66 89 c2             	mov    edx,eax
     344:	67 66 8b 45 84       	mov    eax,DWORD PTR [ebp-0x7c]
     349:	66 01 d0             	add    eax,edx
     34c:	67 66 89 85 78 ff ff 	mov    DWORD PTR [ebp-0x88],eax
     353:	ff 
     354:	67 66 8b 95 6c ff ff 	mov    edx,DWORD PTR [ebp-0x94]
     35b:	ff 
     35c:	66 89 d0             	mov    eax,edx
     35f:	66 01 c0             	add    eax,eax
     362:	66 01 d0             	add    eax,edx
     365:	66 c1 e0 02          	shl    eax,0x2
     369:	66 01 d0             	add    eax,edx
     36c:	66 c1 e0 02          	shl    eax,0x2
     370:	66 01 d0             	add    eax,edx
     373:	66 c1 e0 02          	shl    eax,0x2
     377:	66 05 88 c0 00 00    	add    eax,0xc088
     37d:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
     381:	66 05 ff 03 00 00    	add    eax,0x3ff
     387:	67 66 89 85 74 ff ff 	mov    DWORD PTR [ebp-0x8c],eax
     38e:	ff 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:116
						createProcess(findNextProcessItem(), information[tmp].name, information[tmp].size + 1024, cs, ip, ss, sp, blockNum);
     38f:	67 66 8b 95 6c ff ff 	mov    edx,DWORD PTR [ebp-0x94]
     396:	ff 
     397:	66 89 d0             	mov    eax,edx
     39a:	66 01 c0             	add    eax,eax
     39d:	66 01 d0             	add    eax,edx
     3a0:	66 c1 e0 02          	shl    eax,0x2
     3a4:	66 01 d0             	add    eax,edx
     3a7:	66 c1 e0 02          	shl    eax,0x2
     3ab:	66 01 d0             	add    eax,edx
     3ae:	66 c1 e0 02          	shl    eax,0x2
     3b2:	66 05 88 c0 00 00    	add    eax,0xc088
     3b8:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
     3bc:	67 66 8d b0 00 04 00 	lea    esi,[eax+0x400]
     3c3:	00 
     3c4:	67 66 8b 95 6c ff ff 	mov    edx,DWORD PTR [ebp-0x94]
     3cb:	ff 
     3cc:	66 89 d0             	mov    eax,edx
     3cf:	66 01 c0             	add    eax,eax
     3d2:	66 01 d0             	add    eax,edx
     3d5:	66 c1 e0 02          	shl    eax,0x2
     3d9:	66 01 d0             	add    eax,edx
     3dc:	66 c1 e0 02          	shl    eax,0x2
     3e0:	66 01 d0             	add    eax,edx
     3e3:	66 c1 e0 02          	shl    eax,0x2
     3e7:	67 66 8d 98 60 c0 00 	lea    ebx,[eax+0xc060]
     3ee:	00 
     3ef:	66 e8 ac 46 00 00    	call   4aa1 <_findNextProcessItem>
     3f5:	67 66 8b 55 94       	mov    edx,DWORD PTR [ebp-0x6c]
     3fa:	67 66 89 54 24 1c    	mov    DWORD PTR [esp+0x1c],edx
     400:	67 66 8b 95 74 ff ff 	mov    edx,DWORD PTR [ebp-0x8c]
     407:	ff 
     408:	67 66 89 54 24 18    	mov    DWORD PTR [esp+0x18],edx
     40e:	67 66 8b 95 78 ff ff 	mov    edx,DWORD PTR [ebp-0x88]
     415:	ff 
     416:	67 66 89 54 24 14    	mov    DWORD PTR [esp+0x14],edx
     41c:	67 66 8b 95 7c ff ff 	mov    edx,DWORD PTR [ebp-0x84]
     423:	ff 
     424:	67 66 89 54 24 10    	mov    DWORD PTR [esp+0x10],edx
     42a:	67 66 8b 55 80       	mov    edx,DWORD PTR [ebp-0x80]
     42f:	67 66 89 54 24 0c    	mov    DWORD PTR [esp+0xc],edx
     435:	67 66 89 74 24 08    	mov    DWORD PTR [esp+0x8],esi
     43b:	67 66 89 5c 24 04    	mov    DWORD PTR [esp+0x4],ebx
     441:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
     446:	66 e8 7b 48 00 00    	call   4cc7 <_createProcess>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:117
						ProcessSize += 1;
     44c:	66 a1 dc a7          	mov    eax,ds:0xa7dc
     450:	66 40                	inc    eax
     452:	66 a3 dc a7          	mov    ds:0xa7dc,eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:118
						loadReal(information[tmp].lmaddress, information[tmp].size, offsetOfPrg, segOfPrg);
     456:	67 66 8b 95 6c ff ff 	mov    edx,DWORD PTR [ebp-0x94]
     45d:	ff 
     45e:	66 89 d0             	mov    eax,edx
     461:	66 01 c0             	add    eax,eax
     464:	66 01 d0             	add    eax,edx
     467:	66 c1 e0 02          	shl    eax,0x2
     46b:	66 01 d0             	add    eax,edx
     46e:	66 c1 e0 02          	shl    eax,0x2
     472:	66 01 d0             	add    eax,edx
     475:	66 c1 e0 02          	shl    eax,0x2
     479:	66 05 88 c0 00 00    	add    eax,0xc088
     47f:	67 66 8b 08          	mov    ecx,DWORD PTR [eax]
     483:	67 66 8b 95 6c ff ff 	mov    edx,DWORD PTR [ebp-0x94]
     48a:	ff 
     48b:	66 89 d0             	mov    eax,edx
     48e:	66 01 c0             	add    eax,eax
     491:	66 01 d0             	add    eax,edx
     494:	66 c1 e0 02          	shl    eax,0x2
     498:	66 01 d0             	add    eax,edx
     49b:	66 c1 e0 02          	shl    eax,0x2
     49f:	66 01 d0             	add    eax,edx
     4a2:	66 c1 e0 02          	shl    eax,0x2
     4a6:	66 05 84 c0 00 00    	add    eax,0xc084
     4ac:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
     4b0:	67 66 8b 55 84       	mov    edx,DWORD PTR [ebp-0x7c]
     4b5:	67 66 89 54 24 0c    	mov    DWORD PTR [esp+0xc],edx
     4bb:	67 66 8b 55 88       	mov    edx,DWORD PTR [ebp-0x78]
     4c0:	67 66 89 54 24 08    	mov    DWORD PTR [esp+0x8],edx
     4c6:	67 66 89 4c 24 04    	mov    DWORD PTR [esp+0x4],ecx
     4cc:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
     4d1:	66 e8 6a 15 00 00    	call   1a41 <_loadReal>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:119
						enqueue(&ReadyQue, ProcessSize - 1);
     4d7:	66 a1 dc a7          	mov    eax,ds:0xa7dc
     4db:	66 48                	dec    eax
     4dd:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
     4e3:	67 66 c7 04 24 80 e9 	mov    DWORD PTR [esp],0xe980
     4ea:	00 00 
     4ec:	66 e8 a6 74 00 00    	call   7998 <_enqueue>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:122
					}
				}
			} while (str[0] != '\0');
     4f2:	67 66 8b 45 98       	mov    eax,DWORD PTR [ebp-0x68]
     4f7:	67 8a 00             	mov    al,BYTE PTR [eax]
     4fa:	84 c0                	test   al,al
     4fc:	0f 85 59 fc          	jne    159 <.debug_abbrev+0x6>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:123
			int queSize = size(&BlockedQue);
     500:	67 66 c7 04 24 80 a7 	mov    DWORD PTR [esp],0xa780
     507:	00 00 
     509:	66 e8 43 74 00 00    	call   7952 <_size>
     50f:	67 66 89 85 70 ff ff 	mov    DWORD PTR [ebp-0x90],eax
     516:	ff 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:124
			for (int i = 0; i < queSize; ++i)
     517:	67 66 c7 45 f0 00 00 	mov    DWORD PTR [ebp-0x10],0x0
     51e:	00 00 
     520:	e9 c2 00             	jmp    5e5 <.debug_line+0x3a7>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:126
			{
				dequeue(&BlockedQue, &tmp);
     523:	67 66 8d 85 6c ff ff 	lea    eax,[ebp-0x94]
     52a:	ff 
     52b:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
     531:	67 66 c7 04 24 80 a7 	mov    DWORD PTR [esp],0xa780
     538:	00 00 
     53a:	66 e8 c5 74 00 00    	call   7a05 <_dequeue>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:127
				if (processTable[tmp].waitProcess == -1) {
     540:	67 66 8b 95 6c ff ff 	mov    edx,DWORD PTR [ebp-0x94]
     547:	ff 
     548:	66 89 d0             	mov    eax,edx
     54b:	66 c1 e0 03          	shl    eax,0x3
     54f:	66 01 d0             	add    eax,edx
     552:	66 01 c0             	add    eax,eax
     555:	66 01 d0             	add    eax,edx
     558:	66 c1 e0 02          	shl    eax,0x2
     55c:	66 01 d0             	add    eax,edx
     55f:	66 c1 e0 02          	shl    eax,0x2
     563:	66 05 bc d1 00 00    	add    eax,0xd1bc
     569:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
     56d:	66 83 f8 ff          	cmp    eax,0xffffffff
     571:	75 50                	jne    5c3 <.debug_line+0x385>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:128
					processTable[tmp].status = ready;
     573:	67 66 8b 95 6c ff ff 	mov    edx,DWORD PTR [ebp-0x94]
     57a:	ff 
     57b:	66 89 d0             	mov    eax,edx
     57e:	66 c1 e0 03          	shl    eax,0x3
     582:	66 01 d0             	add    eax,edx
     585:	66 01 c0             	add    eax,eax
     588:	66 01 d0             	add    eax,edx
     58b:	66 c1 e0 02          	shl    eax,0x2
     58f:	66 01 d0             	add    eax,edx
     592:	66 c1 e0 02          	shl    eax,0x2
     596:	66 05 90 d2 00 00    	add    eax,0xd290
     59c:	67 66 c7 00 01 00 00 	mov    DWORD PTR [eax],0x1
     5a3:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:129
					enqueue(&ReadyQue, tmp);
     5a4:	67 66 8b 85 6c ff ff 	mov    eax,DWORD PTR [ebp-0x94]
     5ab:	ff 
     5ac:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
     5b2:	67 66 c7 04 24 80 e9 	mov    DWORD PTR [esp],0xe980
     5b9:	00 00 
     5bb:	66 e8 d7 73 00 00    	call   7998 <_enqueue>
     5c1:	eb 1d                	jmp    5e0 <.debug_line+0x3a2>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:131
				} else {
					enqueue(&BlockedQue, tmp);
     5c3:	67 66 8b 85 6c ff ff 	mov    eax,DWORD PTR [ebp-0x94]
     5ca:	ff 
     5cb:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
     5d1:	67 66 c7 04 24 80 a7 	mov    DWORD PTR [esp],0xa780
     5d8:	00 00 
     5da:	66 e8 b8 73 00 00    	call   7998 <_enqueue>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:124
			for (int i = 0; i < queSize; ++i)
     5e0:	67 66 ff 45 f0       	inc    DWORD PTR [ebp-0x10]
     5e5:	67 66 8b 45 f0       	mov    eax,DWORD PTR [ebp-0x10]
     5ea:	67 66 3b 85 70 ff ff 	cmp    eax,DWORD PTR [ebp-0x90]
     5f1:	ff 
     5f2:	0f 8c 2d ff          	jl     523 <.debug_line+0x2e5>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:134
				}
			}
			runSub = 1;
     5f6:	66 c7 06 bc a3 01 00 	mov    DWORD PTR ds:0xa3bc,0x1
     5fd:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:135
			__asm__("int $0x8\n");
     5ff:	cd 08                	int    0x8
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:136
			runSub = 0;
     601:	66 c7 06 bc a3 00 00 	mov    DWORD PTR ds:0xa3bc,0x0
     608:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:137
			clear();
     60a:	66 e8 46 22 00 00    	call   2856 <_clear>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:100
		{
     610:	e9 c6 0b             	jmp    11d9 <__section_alignment__+0x1d9>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:139
		}
		else if (in[0] == '.' && in[1] == '/')
     613:	67 66 8b 45 e0       	mov    eax,DWORD PTR [ebp-0x20]
     618:	67 8a 00             	mov    al,BYTE PTR [eax]
     61b:	3c 2e                	cmp    al,0x2e
     61d:	0f 85 50 03          	jne    971 <.debug_line+0x733>
     621:	67 66 8b 45 e0       	mov    eax,DWORD PTR [ebp-0x20]
     626:	66 40                	inc    eax
     628:	67 8a 00             	mov    al,BYTE PTR [eax]
     62b:	3c 2f                	cmp    al,0x2f
     62d:	0f 85 40 03          	jne    971 <.debug_line+0x733>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:141
		{
			tmp = find(in + 2);
     631:	67 66 8b 45 e0       	mov    eax,DWORD PTR [ebp-0x20]
     636:	66 83 c0 02          	add    eax,0x2
     63a:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
     63f:	66 e8 38 33 00 00    	call   397d <_find>
     645:	67 66 89 85 6c ff ff 	mov    DWORD PTR [ebp-0x94],eax
     64c:	ff 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:142
			if (tmp != -1 && information[tmp].deleted != 1) {
     64d:	67 66 8b 85 6c ff ff 	mov    eax,DWORD PTR [ebp-0x94]
     654:	ff 
     655:	66 83 f8 ff          	cmp    eax,0xffffffff
     659:	0f 84 75 0b          	je     11d2 <__section_alignment__+0x1d2>
     65d:	67 66 8b 95 6c ff ff 	mov    edx,DWORD PTR [ebp-0x94]
     664:	ff 
     665:	66 89 d0             	mov    eax,edx
     668:	66 01 c0             	add    eax,eax
     66b:	66 01 d0             	add    eax,edx
     66e:	66 c1 e0 02          	shl    eax,0x2
     672:	66 01 d0             	add    eax,edx
     675:	66 c1 e0 02          	shl    eax,0x2
     679:	66 01 d0             	add    eax,edx
     67c:	66 c1 e0 02          	shl    eax,0x2
     680:	66 05 8c c0 00 00    	add    eax,0xc08c
     686:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
     68a:	66 83 f8 01          	cmp    eax,0x1
     68e:	0f 84 40 0b          	je     11d2 <__section_alignment__+0x1d2>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:143
				int blockNum = findEnoughBlock(information[tmp].size + 1024);
     692:	67 66 8b 95 6c ff ff 	mov    edx,DWORD PTR [ebp-0x94]
     699:	ff 
     69a:	66 89 d0             	mov    eax,edx
     69d:	66 01 c0             	add    eax,eax
     6a0:	66 01 d0             	add    eax,edx
     6a3:	66 c1 e0 02          	shl    eax,0x2
     6a7:	66 01 d0             	add    eax,edx
     6aa:	66 c1 e0 02          	shl    eax,0x2
     6ae:	66 01 d0             	add    eax,edx
     6b1:	66 c1 e0 02          	shl    eax,0x2
     6b5:	66 05 88 c0 00 00    	add    eax,0xc088
     6bb:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
     6bf:	66 05 00 04 00 00    	add    eax,0x400
     6c5:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
     6ca:	66 e8 a6 6a 00 00    	call   7176 <_findEnoughBlock>
     6d0:	67 66 89 45 dc       	mov    DWORD PTR [ebp-0x24],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:144
				blockNum = require(information[tmp].size + 1024, blockNum);
     6d5:	67 66 8b 95 6c ff ff 	mov    edx,DWORD PTR [ebp-0x94]
     6dc:	ff 
     6dd:	66 89 d0             	mov    eax,edx
     6e0:	66 01 c0             	add    eax,eax
     6e3:	66 01 d0             	add    eax,edx
     6e6:	66 c1 e0 02          	shl    eax,0x2
     6ea:	66 01 d0             	add    eax,edx
     6ed:	66 c1 e0 02          	shl    eax,0x2
     6f1:	66 01 d0             	add    eax,edx
     6f4:	66 c1 e0 02          	shl    eax,0x2
     6f8:	66 05 88 c0 00 00    	add    eax,0xc088
     6fe:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
     702:	67 66 8d 90 00 04 00 	lea    edx,[eax+0x400]
     709:	00 
     70a:	67 66 8b 45 dc       	mov    eax,DWORD PTR [ebp-0x24]
     70f:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
     715:	67 66 89 14 24       	mov    DWORD PTR [esp],edx
     71a:	66 e8 ff 6a 00 00    	call   721f <_require>
     720:	67 66 89 45 dc       	mov    DWORD PTR [ebp-0x24],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:146
				int offsetOfPrg, segOfPrg;
				int offsetMask = 0x0000ffff;
     725:	67 66 c7 45 d8 ff ff 	mov    DWORD PTR [ebp-0x28],0xffff
     72c:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:147
				int segMask = 0xf0000;
     72e:	67 66 c7 45 d4 00 00 	mov    DWORD PTR [ebp-0x2c],0xf0000
     735:	0f 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:148
				offsetOfPrg = memoryTable[blockNum].beginAddr & offsetMask;
     737:	67 66 8b 55 dc       	mov    edx,DWORD PTR [ebp-0x24]
     73c:	66 89 d0             	mov    eax,edx
     73f:	66 01 c0             	add    eax,eax
     742:	66 01 d0             	add    eax,edx
     745:	66 c1 e0 03          	shl    eax,0x3
     749:	66 05 c0 a3 00 00    	add    eax,0xa3c0
     74f:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
     753:	67 66 23 45 d8       	and    eax,DWORD PTR [ebp-0x28]
     758:	67 66 89 45 d0       	mov    DWORD PTR [ebp-0x30],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:149
				segOfPrg = (memoryTable[blockNum].beginAddr & segMask) >> 4;
     75d:	67 66 8b 55 dc       	mov    edx,DWORD PTR [ebp-0x24]
     762:	66 89 d0             	mov    eax,edx
     765:	66 01 c0             	add    eax,eax
     768:	66 01 d0             	add    eax,edx
     76b:	66 c1 e0 03          	shl    eax,0x3
     76f:	66 05 c0 a3 00 00    	add    eax,0xa3c0
     775:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
     779:	67 66 23 45 d4       	and    eax,DWORD PTR [ebp-0x2c]
     77e:	66 c1 f8 04          	sar    eax,0x4
     782:	67 66 89 45 cc       	mov    DWORD PTR [ebp-0x34],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:150
				int cs = segOfPrg + (offsetOfPrg >> 4), ip = 0, ss = segOfPrg + (offsetOfPrg >> 4), sp = information[tmp].size + 1024 - 1;
     787:	67 66 8b 45 d0       	mov    eax,DWORD PTR [ebp-0x30]
     78c:	66 c1 f8 04          	sar    eax,0x4
     790:	66 89 c2             	mov    edx,eax
     793:	67 66 8b 45 cc       	mov    eax,DWORD PTR [ebp-0x34]
     798:	66 01 d0             	add    eax,edx
     79b:	67 66 89 45 c8       	mov    DWORD PTR [ebp-0x38],eax
     7a0:	67 66 c7 45 c4 00 00 	mov    DWORD PTR [ebp-0x3c],0x0
     7a7:	00 00 
     7a9:	67 66 8b 45 d0       	mov    eax,DWORD PTR [ebp-0x30]
     7ae:	66 c1 f8 04          	sar    eax,0x4
     7b2:	66 89 c2             	mov    edx,eax
     7b5:	67 66 8b 45 cc       	mov    eax,DWORD PTR [ebp-0x34]
     7ba:	66 01 d0             	add    eax,edx
     7bd:	67 66 89 45 c0       	mov    DWORD PTR [ebp-0x40],eax
     7c2:	67 66 8b 95 6c ff ff 	mov    edx,DWORD PTR [ebp-0x94]
     7c9:	ff 
     7ca:	66 89 d0             	mov    eax,edx
     7cd:	66 01 c0             	add    eax,eax
     7d0:	66 01 d0             	add    eax,edx
     7d3:	66 c1 e0 02          	shl    eax,0x2
     7d7:	66 01 d0             	add    eax,edx
     7da:	66 c1 e0 02          	shl    eax,0x2
     7de:	66 01 d0             	add    eax,edx
     7e1:	66 c1 e0 02          	shl    eax,0x2
     7e5:	66 05 88 c0 00 00    	add    eax,0xc088
     7eb:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
     7ef:	66 05 ff 03 00 00    	add    eax,0x3ff
     7f5:	67 66 89 45 bc       	mov    DWORD PTR [ebp-0x44],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:151
				createProcess(findNextProcessItem(), information[tmp].name, information[tmp].size + 1024, cs, ip, ss, sp, blockNum);
     7fa:	67 66 8b 95 6c ff ff 	mov    edx,DWORD PTR [ebp-0x94]
     801:	ff 
     802:	66 89 d0             	mov    eax,edx
     805:	66 01 c0             	add    eax,eax
     808:	66 01 d0             	add    eax,edx
     80b:	66 c1 e0 02          	shl    eax,0x2
     80f:	66 01 d0             	add    eax,edx
     812:	66 c1 e0 02          	shl    eax,0x2
     816:	66 01 d0             	add    eax,edx
     819:	66 c1 e0 02          	shl    eax,0x2
     81d:	66 05 88 c0 00 00    	add    eax,0xc088
     823:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
     827:	67 66 8d b0 00 04 00 	lea    esi,[eax+0x400]
     82e:	00 
     82f:	67 66 8b 95 6c ff ff 	mov    edx,DWORD PTR [ebp-0x94]
     836:	ff 
     837:	66 89 d0             	mov    eax,edx
     83a:	66 01 c0             	add    eax,eax
     83d:	66 01 d0             	add    eax,edx
     840:	66 c1 e0 02          	shl    eax,0x2
     844:	66 01 d0             	add    eax,edx
     847:	66 c1 e0 02          	shl    eax,0x2
     84b:	66 01 d0             	add    eax,edx
     84e:	66 c1 e0 02          	shl    eax,0x2
     852:	67 66 8d 98 60 c0 00 	lea    ebx,[eax+0xc060]
     859:	00 
     85a:	66 e8 41 42 00 00    	call   4aa1 <_findNextProcessItem>
     860:	67 66 8b 55 dc       	mov    edx,DWORD PTR [ebp-0x24]
     865:	67 66 89 54 24 1c    	mov    DWORD PTR [esp+0x1c],edx
     86b:	67 66 8b 55 bc       	mov    edx,DWORD PTR [ebp-0x44]
     870:	67 66 89 54 24 18    	mov    DWORD PTR [esp+0x18],edx
     876:	67 66 8b 55 c0       	mov    edx,DWORD PTR [ebp-0x40]
     87b:	67 66 89 54 24 14    	mov    DWORD PTR [esp+0x14],edx
     881:	67 66 8b 55 c4       	mov    edx,DWORD PTR [ebp-0x3c]
     886:	67 66 89 54 24 10    	mov    DWORD PTR [esp+0x10],edx
     88c:	67 66 8b 55 c8       	mov    edx,DWORD PTR [ebp-0x38]
     891:	67 66 89 54 24 0c    	mov    DWORD PTR [esp+0xc],edx
     897:	67 66 89 74 24 08    	mov    DWORD PTR [esp+0x8],esi
     89d:	67 66 89 5c 24 04    	mov    DWORD PTR [esp+0x4],ebx
     8a3:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
     8a8:	66 e8 19 44 00 00    	call   4cc7 <_createProcess>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:152
				ProcessSize += 1;
     8ae:	66 a1 dc a7          	mov    eax,ds:0xa7dc
     8b2:	66 40                	inc    eax
     8b4:	66 a3 dc a7          	mov    ds:0xa7dc,eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:153
				loadReal(information[tmp].lmaddress, information[tmp].size, offsetOfPrg, segOfPrg);
     8b8:	67 66 8b 95 6c ff ff 	mov    edx,DWORD PTR [ebp-0x94]
     8bf:	ff 
     8c0:	66 89 d0             	mov    eax,edx
     8c3:	66 01 c0             	add    eax,eax
     8c6:	66 01 d0             	add    eax,edx
     8c9:	66 c1 e0 02          	shl    eax,0x2
     8cd:	66 01 d0             	add    eax,edx
     8d0:	66 c1 e0 02          	shl    eax,0x2
     8d4:	66 01 d0             	add    eax,edx
     8d7:	66 c1 e0 02          	shl    eax,0x2
     8db:	66 05 88 c0 00 00    	add    eax,0xc088
     8e1:	67 66 8b 08          	mov    ecx,DWORD PTR [eax]
     8e5:	67 66 8b 95 6c ff ff 	mov    edx,DWORD PTR [ebp-0x94]
     8ec:	ff 
     8ed:	66 89 d0             	mov    eax,edx
     8f0:	66 01 c0             	add    eax,eax
     8f3:	66 01 d0             	add    eax,edx
     8f6:	66 c1 e0 02          	shl    eax,0x2
     8fa:	66 01 d0             	add    eax,edx
     8fd:	66 c1 e0 02          	shl    eax,0x2
     901:	66 01 d0             	add    eax,edx
     904:	66 c1 e0 02          	shl    eax,0x2
     908:	66 05 84 c0 00 00    	add    eax,0xc084
     90e:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
     912:	67 66 8b 55 cc       	mov    edx,DWORD PTR [ebp-0x34]
     917:	67 66 89 54 24 0c    	mov    DWORD PTR [esp+0xc],edx
     91d:	67 66 8b 55 d0       	mov    edx,DWORD PTR [ebp-0x30]
     922:	67 66 89 54 24 08    	mov    DWORD PTR [esp+0x8],edx
     928:	67 66 89 4c 24 04    	mov    DWORD PTR [esp+0x4],ecx
     92e:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
     933:	66 e8 08 11 00 00    	call   1a41 <_loadReal>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:154
				enqueue(&ReadyQue, ProcessSize - 1);
     939:	66 a1 dc a7          	mov    eax,ds:0xa7dc
     93d:	66 48                	dec    eax
     93f:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
     945:	67 66 c7 04 24 80 e9 	mov    DWORD PTR [esp],0xe980
     94c:	00 00 
     94e:	66 e8 44 70 00 00    	call   7998 <_enqueue>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:155
				runSub = 1;
     954:	66 c7 06 bc a3 01 00 	mov    DWORD PTR ds:0xa3bc,0x1
     95b:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:156
				__asm__("int $0x8\n");
     95d:	cd 08                	int    0x8
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:157
				runSub = 0;
     95f:	66 c7 06 bc a3 00 00 	mov    DWORD PTR ds:0xa3bc,0x0
     966:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:158
				clear();
     968:	66 e8 e8 1e 00 00    	call   2856 <_clear>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:142
			if (tmp != -1 && information[tmp].deleted != 1) {
     96e:	e9 61 08             	jmp    11d2 <__section_alignment__+0x1d2>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:161
			}
		}
		else if (in[0] == 't' && in[1] == 'y' &&
     971:	67 66 8b 45 e0       	mov    eax,DWORD PTR [ebp-0x20]
     976:	67 8a 00             	mov    al,BYTE PTR [eax]
     979:	3c 74                	cmp    al,0x74
     97b:	0f 85 d8 01          	jne    b57 <.debug_line+0x919>
     97f:	67 66 8b 45 e0       	mov    eax,DWORD PTR [ebp-0x20]
     984:	66 40                	inc    eax
     986:	67 8a 00             	mov    al,BYTE PTR [eax]
     989:	3c 79                	cmp    al,0x79
     98b:	0f 85 c8 01          	jne    b57 <.debug_line+0x919>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:162
		         in[2] == 'p' && in[3] == 'e') {
     98f:	67 66 8b 45 e0       	mov    eax,DWORD PTR [ebp-0x20]
     994:	66 83 c0 02          	add    eax,0x2
     998:	67 8a 00             	mov    al,BYTE PTR [eax]
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:161
		else if (in[0] == 't' && in[1] == 'y' &&
     99b:	3c 70                	cmp    al,0x70
     99d:	0f 85 b6 01          	jne    b57 <.debug_line+0x919>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:162
		         in[2] == 'p' && in[3] == 'e') {
     9a1:	67 66 8b 45 e0       	mov    eax,DWORD PTR [ebp-0x20]
     9a6:	66 83 c0 03          	add    eax,0x3
     9aa:	67 8a 00             	mov    al,BYTE PTR [eax]
     9ad:	3c 65                	cmp    al,0x65
     9af:	0f 85 a4 01          	jne    b57 <.debug_line+0x919>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:163
			tmp = find(in + 5);
     9b3:	67 66 8b 45 e0       	mov    eax,DWORD PTR [ebp-0x20]
     9b8:	66 83 c0 05          	add    eax,0x5
     9bc:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
     9c1:	66 e8 b6 2f 00 00    	call   397d <_find>
     9c7:	67 66 89 85 6c ff ff 	mov    DWORD PTR [ebp-0x94],eax
     9ce:	ff 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:164
			if (tmp != -1 && information[tmp].deleted != 1) {
     9cf:	67 66 8b 85 6c ff ff 	mov    eax,DWORD PTR [ebp-0x94]
     9d6:	ff 
     9d7:	66 83 f8 ff          	cmp    eax,0xffffffff
     9db:	0f 84 f6 07          	je     11d5 <__section_alignment__+0x1d5>
     9df:	67 66 8b 95 6c ff ff 	mov    edx,DWORD PTR [ebp-0x94]
     9e6:	ff 
     9e7:	66 89 d0             	mov    eax,edx
     9ea:	66 01 c0             	add    eax,eax
     9ed:	66 01 d0             	add    eax,edx
     9f0:	66 c1 e0 02          	shl    eax,0x2
     9f4:	66 01 d0             	add    eax,edx
     9f7:	66 c1 e0 02          	shl    eax,0x2
     9fb:	66 01 d0             	add    eax,edx
     9fe:	66 c1 e0 02          	shl    eax,0x2
     a02:	66 05 8c c0 00 00    	add    eax,0xc08c
     a08:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
     a0c:	66 83 f8 01          	cmp    eax,0x1
     a10:	0f 84 c1 07          	je     11d5 <__section_alignment__+0x1d5>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:165
				fopen(in + 5, readAndWriteFile);
     a14:	67 66 8b 45 e0       	mov    eax,DWORD PTR [ebp-0x20]
     a19:	66 83 c0 05          	add    eax,0x5
     a1d:	67 66 c7 44 24 04 03 	mov    DWORD PTR [esp+0x4],0x3
     a24:	00 00 00 
     a27:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
     a2c:	66 e8 82 35 00 00    	call   3fb4 <_fopen>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:166
				char * contents = malloc(information[tmp].size);
     a32:	67 66 8b 95 6c ff ff 	mov    edx,DWORD PTR [ebp-0x94]
     a39:	ff 
     a3a:	66 89 d0             	mov    eax,edx
     a3d:	66 01 c0             	add    eax,eax
     a40:	66 01 d0             	add    eax,edx
     a43:	66 c1 e0 02          	shl    eax,0x2
     a47:	66 01 d0             	add    eax,edx
     a4a:	66 c1 e0 02          	shl    eax,0x2
     a4e:	66 01 d0             	add    eax,edx
     a51:	66 c1 e0 02          	shl    eax,0x2
     a55:	66 05 88 c0 00 00    	add    eax,0xc088
     a5b:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
     a5f:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
     a64:	66 e8 d1 56 00 00    	call   613b <_malloc>
     a6a:	67 66 89 45 b8       	mov    DWORD PTR [ebp-0x48],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:168
				// fread(in + 5, contents, information[tmp].size);
				fread(in + 5, contents, information[tmp].size);
     a6f:	67 66 8b 95 6c ff ff 	mov    edx,DWORD PTR [ebp-0x94]
     a76:	ff 
     a77:	66 89 d0             	mov    eax,edx
     a7a:	66 01 c0             	add    eax,eax
     a7d:	66 01 d0             	add    eax,edx
     a80:	66 c1 e0 02          	shl    eax,0x2
     a84:	66 01 d0             	add    eax,edx
     a87:	66 c1 e0 02          	shl    eax,0x2
     a8b:	66 01 d0             	add    eax,edx
     a8e:	66 c1 e0 02          	shl    eax,0x2
     a92:	66 05 88 c0 00 00    	add    eax,0xc088
     a98:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
     a9c:	67 66 8b 55 e0       	mov    edx,DWORD PTR [ebp-0x20]
     aa1:	66 83 c2 05          	add    edx,0x5
     aa5:	67 66 89 44 24 08    	mov    DWORD PTR [esp+0x8],eax
     aab:	67 66 8b 45 b8       	mov    eax,DWORD PTR [ebp-0x48]
     ab0:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
     ab6:	67 66 89 14 24       	mov    DWORD PTR [esp],edx
     abb:	66 e8 7a 3b 00 00    	call   463b <_fread>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:170
				// printSentence(contents, line, 0, information[tmp].size, white);
				printSentence(contents, line, 0, information[tmp].size, white);
     ac1:	67 66 8b 95 6c ff ff 	mov    edx,DWORD PTR [ebp-0x94]
     ac8:	ff 
     ac9:	66 89 d0             	mov    eax,edx
     acc:	66 01 c0             	add    eax,eax
     acf:	66 01 d0             	add    eax,edx
     ad2:	66 c1 e0 02          	shl    eax,0x2
     ad6:	66 01 d0             	add    eax,edx
     ad9:	66 c1 e0 02          	shl    eax,0x2
     add:	66 01 d0             	add    eax,edx
     ae0:	66 c1 e0 02          	shl    eax,0x2
     ae4:	66 05 88 c0 00 00    	add    eax,0xc088
     aea:	67 66 8b 10          	mov    edx,DWORD PTR [eax]
     aee:	66 a1 60 a2          	mov    eax,ds:0xa260
     af2:	67 66 c7 44 24 10 0f 	mov    DWORD PTR [esp+0x10],0xf
     af9:	00 00 00 
     afc:	67 66 89 54 24 0c    	mov    DWORD PTR [esp+0xc],edx
     b02:	67 66 c7 44 24 08 00 	mov    DWORD PTR [esp+0x8],0x0
     b09:	00 00 00 
     b0c:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
     b12:	67 66 8b 45 b8       	mov    eax,DWORD PTR [ebp-0x48]
     b17:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
     b1c:	66 e8 64 0d 00 00    	call   1886 <_printSentence>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:171
				fclose(in + 5);
     b22:	67 66 8b 45 e0       	mov    eax,DWORD PTR [ebp-0x20]
     b27:	66 83 c0 05          	add    eax,0x5
     b2b:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
     b30:	66 e8 bf 38 00 00    	call   43f5 <_fclose>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:172
				line += countLines(contents);
     b36:	67 66 8b 45 b8       	mov    eax,DWORD PTR [ebp-0x48]
     b3b:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
     b40:	66 e8 d1 1b 00 00    	call   2717 <_countLines>
     b46:	66 89 c2             	mov    edx,eax
     b49:	66 a1 60 a2          	mov    eax,ds:0xa260
     b4d:	66 01 d0             	add    eax,edx
     b50:	66 a3 60 a2          	mov    ds:0xa260,eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:164
			if (tmp != -1 && information[tmp].deleted != 1) {
     b54:	e9 7e 06             	jmp    11d5 <__section_alignment__+0x1d5>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:175
			}
		}
		else if (in[0] == 'r' && in[1] == 'm') {
     b57:	67 66 8b 45 e0       	mov    eax,DWORD PTR [ebp-0x20]
     b5c:	67 8a 00             	mov    al,BYTE PTR [eax]
     b5f:	3c 72                	cmp    al,0x72
     b61:	0f 85 86 00          	jne    beb <.debug_info+0x17>
     b65:	67 66 8b 45 e0       	mov    eax,DWORD PTR [ebp-0x20]
     b6a:	66 40                	inc    eax
     b6c:	67 8a 00             	mov    al,BYTE PTR [eax]
     b6f:	3c 6d                	cmp    al,0x6d
     b71:	75 78                	jne    beb <.debug_info+0x17>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:176
			tmp = find(in + 3);
     b73:	67 66 8b 45 e0       	mov    eax,DWORD PTR [ebp-0x20]
     b78:	66 83 c0 03          	add    eax,0x3
     b7c:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
     b81:	66 e8 f6 2d 00 00    	call   397d <_find>
     b87:	67 66 89 85 6c ff ff 	mov    DWORD PTR [ebp-0x94],eax
     b8e:	ff 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:177
			if (tmp != -1 && information[tmp].deleted != 1) {
     b8f:	67 66 8b 85 6c ff ff 	mov    eax,DWORD PTR [ebp-0x94]
     b96:	ff 
     b97:	66 83 f8 ff          	cmp    eax,0xffffffff
     b9b:	0f 84 39 06          	je     11d8 <__section_alignment__+0x1d8>
     b9f:	67 66 8b 95 6c ff ff 	mov    edx,DWORD PTR [ebp-0x94]
     ba6:	ff 
     ba7:	66 89 d0             	mov    eax,edx
     baa:	66 01 c0             	add    eax,eax
     bad:	66 01 d0             	add    eax,edx
     bb0:	66 c1 e0 02          	shl    eax,0x2
     bb4:	66 01 d0             	add    eax,edx
     bb7:	66 c1 e0 02          	shl    eax,0x2
     bbb:	66 01 d0             	add    eax,edx
     bbe:	66 c1 e0 02          	shl    eax,0x2
     bc2:	66 05 8c c0 00 00    	add    eax,0xc08c
     bc8:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
     bcc:	66 83 f8 01          	cmp    eax,0x1
     bd0:	0f 84 04 06          	je     11d8 <__section_alignment__+0x1d8>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:178
				fdelete(in + 3);
     bd4:	67 66 8b 45 e0       	mov    eax,DWORD PTR [ebp-0x20]
     bd9:	66 83 c0 03          	add    eax,0x3
     bdd:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
     be2:	66 e8 96 3d 00 00    	call   497e <_fdelete>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:177
			if (tmp != -1 && information[tmp].deleted != 1) {
     be8:	e9 ed 05             	jmp    11d8 <__section_alignment__+0x1d8>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:181
			}
		}
		else if (in[0] == 'k' && in[1] == 'i' &&
     beb:	67 66 8b 45 e0       	mov    eax,DWORD PTR [ebp-0x20]
     bf0:	67 8a 00             	mov    al,BYTE PTR [eax]
     bf3:	3c 6b                	cmp    al,0x6b
     bf5:	75 50                	jne    c47 <.debug_info+0x73>
     bf7:	67 66 8b 45 e0       	mov    eax,DWORD PTR [ebp-0x20]
     bfc:	66 40                	inc    eax
     bfe:	67 8a 00             	mov    al,BYTE PTR [eax]
     c01:	3c 69                	cmp    al,0x69
     c03:	75 42                	jne    c47 <.debug_info+0x73>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:182
		         in[2] == 'l' && in[3] == 'l') {
     c05:	67 66 8b 45 e0       	mov    eax,DWORD PTR [ebp-0x20]
     c0a:	66 83 c0 02          	add    eax,0x2
     c0e:	67 8a 00             	mov    al,BYTE PTR [eax]
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:181
		else if (in[0] == 'k' && in[1] == 'i' &&
     c11:	3c 6c                	cmp    al,0x6c
     c13:	75 32                	jne    c47 <.debug_info+0x73>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:182
		         in[2] == 'l' && in[3] == 'l') {
     c15:	67 66 8b 45 e0       	mov    eax,DWORD PTR [ebp-0x20]
     c1a:	66 83 c0 03          	add    eax,0x3
     c1e:	67 8a 00             	mov    al,BYTE PTR [eax]
     c21:	3c 6c                	cmp    al,0x6c
     c23:	75 22                	jne    c47 <.debug_info+0x73>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:183
			kill(in[5] - '0');
     c25:	67 66 8b 45 e0       	mov    eax,DWORD PTR [ebp-0x20]
     c2a:	66 83 c0 05          	add    eax,0x5
     c2e:	67 8a 00             	mov    al,BYTE PTR [eax]
     c31:	66 0f be c0          	movsx  eax,al
     c35:	66 83 e8 30          	sub    eax,0x30
     c39:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
     c3e:	66 e8 a1 25 00 00    	call   31e5 <_kill>
     c44:	e9 92 05             	jmp    11d9 <__section_alignment__+0x1d9>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:185
		}
		else if (in[0] == 's' && in[1] == 'u' &&
     c47:	67 66 8b 45 e0       	mov    eax,DWORD PTR [ebp-0x20]
     c4c:	67 8a 00             	mov    al,BYTE PTR [eax]
     c4f:	3c 73                	cmp    al,0x73
     c51:	75 50                	jne    ca3 <.debug_info+0xcf>
     c53:	67 66 8b 45 e0       	mov    eax,DWORD PTR [ebp-0x20]
     c58:	66 40                	inc    eax
     c5a:	67 8a 00             	mov    al,BYTE PTR [eax]
     c5d:	3c 75                	cmp    al,0x75
     c5f:	75 42                	jne    ca3 <.debug_info+0xcf>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:186
		         in[2] == 's' && in[3] == 'p') {
     c61:	67 66 8b 45 e0       	mov    eax,DWORD PTR [ebp-0x20]
     c66:	66 83 c0 02          	add    eax,0x2
     c6a:	67 8a 00             	mov    al,BYTE PTR [eax]
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:185
		else if (in[0] == 's' && in[1] == 'u' &&
     c6d:	3c 73                	cmp    al,0x73
     c6f:	75 32                	jne    ca3 <.debug_info+0xcf>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:186
		         in[2] == 's' && in[3] == 'p') {
     c71:	67 66 8b 45 e0       	mov    eax,DWORD PTR [ebp-0x20]
     c76:	66 83 c0 03          	add    eax,0x3
     c7a:	67 8a 00             	mov    al,BYTE PTR [eax]
     c7d:	3c 70                	cmp    al,0x70
     c7f:	75 22                	jne    ca3 <.debug_info+0xcf>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:187
			Tosuspend(in[5] - '0');
     c81:	67 66 8b 45 e0       	mov    eax,DWORD PTR [ebp-0x20]
     c86:	66 83 c0 05          	add    eax,0x5
     c8a:	67 8a 00             	mov    al,BYTE PTR [eax]
     c8d:	66 0f be c0          	movsx  eax,al
     c91:	66 83 e8 30          	sub    eax,0x30
     c95:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
     c9a:	66 e8 30 4d 00 00    	call   59d0 <_Tosuspend>
     ca0:	e9 36 05             	jmp    11d9 <__section_alignment__+0x1d9>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:189
		}
		else if (in[0] == 'a' && in[1] == 'c' &&
     ca3:	67 66 8b 45 e0       	mov    eax,DWORD PTR [ebp-0x20]
     ca8:	67 8a 00             	mov    al,BYTE PTR [eax]
     cab:	3c 61                	cmp    al,0x61
     cad:	0f 85 1b 02          	jne    ecc <.debug_info+0x2f8>
     cb1:	67 66 8b 45 e0       	mov    eax,DWORD PTR [ebp-0x20]
     cb6:	66 40                	inc    eax
     cb8:	67 8a 00             	mov    al,BYTE PTR [eax]
     cbb:	3c 63                	cmp    al,0x63
     cbd:	0f 85 0b 02          	jne    ecc <.debug_info+0x2f8>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:190
		         in[2] == 't' && in[3] == 'i') {
     cc1:	67 66 8b 45 e0       	mov    eax,DWORD PTR [ebp-0x20]
     cc6:	66 83 c0 02          	add    eax,0x2
     cca:	67 8a 00             	mov    al,BYTE PTR [eax]
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:189
		else if (in[0] == 'a' && in[1] == 'c' &&
     ccd:	3c 74                	cmp    al,0x74
     ccf:	0f 85 f9 01          	jne    ecc <.debug_info+0x2f8>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:190
		         in[2] == 't' && in[3] == 'i') {
     cd3:	67 66 8b 45 e0       	mov    eax,DWORD PTR [ebp-0x20]
     cd8:	66 83 c0 03          	add    eax,0x3
     cdc:	67 8a 00             	mov    al,BYTE PTR [eax]
     cdf:	3c 69                	cmp    al,0x69
     ce1:	0f 85 e7 01          	jne    ecc <.debug_info+0x2f8>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:191
			tmp = in[5] - '0';
     ce5:	67 66 8b 45 e0       	mov    eax,DWORD PTR [ebp-0x20]
     cea:	66 83 c0 05          	add    eax,0x5
     cee:	67 8a 00             	mov    al,BYTE PTR [eax]
     cf1:	66 0f be c0          	movsx  eax,al
     cf5:	66 83 e8 30          	sub    eax,0x30
     cf9:	67 66 89 85 6c ff ff 	mov    DWORD PTR [ebp-0x94],eax
     d00:	ff 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:192
			int blockNum = findEnoughBlock(processTable[tmp].size);
     d01:	67 66 8b 95 6c ff ff 	mov    edx,DWORD PTR [ebp-0x94]
     d08:	ff 
     d09:	66 89 d0             	mov    eax,edx
     d0c:	66 c1 e0 03          	shl    eax,0x3
     d10:	66 01 d0             	add    eax,edx
     d13:	66 01 c0             	add    eax,eax
     d16:	66 01 d0             	add    eax,edx
     d19:	66 c1 e0 02          	shl    eax,0x2
     d1d:	66 01 d0             	add    eax,edx
     d20:	66 c1 e0 02          	shl    eax,0x2
     d24:	66 05 90 d1 00 00    	add    eax,0xd190
     d2a:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
     d2e:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
     d33:	66 e8 3d 64 00 00    	call   7176 <_findEnoughBlock>
     d39:	67 66 89 45 b4       	mov    DWORD PTR [ebp-0x4c],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:193
			blockNum = require(processTable[tmp].size, blockNum);
     d3e:	67 66 8b 95 6c ff ff 	mov    edx,DWORD PTR [ebp-0x94]
     d45:	ff 
     d46:	66 89 d0             	mov    eax,edx
     d49:	66 c1 e0 03          	shl    eax,0x3
     d4d:	66 01 d0             	add    eax,edx
     d50:	66 01 c0             	add    eax,eax
     d53:	66 01 d0             	add    eax,edx
     d56:	66 c1 e0 02          	shl    eax,0x2
     d5a:	66 01 d0             	add    eax,edx
     d5d:	66 c1 e0 02          	shl    eax,0x2
     d61:	66 05 90 d1 00 00    	add    eax,0xd190
     d67:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
     d6b:	67 66 8b 55 b4       	mov    edx,DWORD PTR [ebp-0x4c]
     d70:	67 66 89 54 24 04    	mov    DWORD PTR [esp+0x4],edx
     d76:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
     d7b:	66 e8 9e 64 00 00    	call   721f <_require>
     d81:	67 66 89 45 b4       	mov    DWORD PTR [ebp-0x4c],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:194
			processTable[tmp].blockNum = blockNum;
     d86:	67 66 8b 95 6c ff ff 	mov    edx,DWORD PTR [ebp-0x94]
     d8d:	ff 
     d8e:	66 89 d0             	mov    eax,edx
     d91:	66 c1 e0 03          	shl    eax,0x3
     d95:	66 01 d0             	add    eax,edx
     d98:	66 01 c0             	add    eax,eax
     d9b:	66 01 d0             	add    eax,edx
     d9e:	66 c1 e0 02          	shl    eax,0x2
     da2:	66 01 d0             	add    eax,edx
     da5:	66 c1 e0 02          	shl    eax,0x2
     da9:	67 66 8d 90 88 d1 00 	lea    edx,[eax+0xd188]
     db0:	00 
     db1:	67 66 8b 45 b4       	mov    eax,DWORD PTR [ebp-0x4c]
     db6:	67 66 89 02          	mov    DWORD PTR [edx],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:196
			int offsetOfPrg, segOfPrg;
			int offsetMask = 0x0000ffff;
     dba:	67 66 c7 45 b0 ff ff 	mov    DWORD PTR [ebp-0x50],0xffff
     dc1:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:197
			int segMask = 0xf0000;
     dc3:	67 66 c7 45 ac 00 00 	mov    DWORD PTR [ebp-0x54],0xf0000
     dca:	0f 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:198
			offsetOfPrg = memoryTable[blockNum].beginAddr & offsetMask;
     dcc:	67 66 8b 55 b4       	mov    edx,DWORD PTR [ebp-0x4c]
     dd1:	66 89 d0             	mov    eax,edx
     dd4:	66 01 c0             	add    eax,eax
     dd7:	66 01 d0             	add    eax,edx
     dda:	66 c1 e0 03          	shl    eax,0x3
     dde:	66 05 c0 a3 00 00    	add    eax,0xa3c0
     de4:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
     de8:	67 66 23 45 b0       	and    eax,DWORD PTR [ebp-0x50]
     ded:	67 66 89 45 a8       	mov    DWORD PTR [ebp-0x58],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:199
			segOfPrg = (memoryTable[blockNum].beginAddr & segMask) >> 4;
     df2:	67 66 8b 55 b4       	mov    edx,DWORD PTR [ebp-0x4c]
     df7:	66 89 d0             	mov    eax,edx
     dfa:	66 01 c0             	add    eax,eax
     dfd:	66 01 d0             	add    eax,edx
     e00:	66 c1 e0 03          	shl    eax,0x3
     e04:	66 05 c0 a3 00 00    	add    eax,0xa3c0
     e0a:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
     e0e:	67 66 23 45 ac       	and    eax,DWORD PTR [ebp-0x54]
     e13:	66 c1 f8 04          	sar    eax,0x4
     e17:	67 66 89 45 a4       	mov    DWORD PTR [ebp-0x5c],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:200
			int cs = segOfPrg + (offsetOfPrg >> 4), ss = segOfPrg + (offsetOfPrg >> 4);
     e1c:	67 66 8b 45 a8       	mov    eax,DWORD PTR [ebp-0x58]
     e21:	66 c1 f8 04          	sar    eax,0x4
     e25:	66 89 c2             	mov    edx,eax
     e28:	67 66 8b 45 a4       	mov    eax,DWORD PTR [ebp-0x5c]
     e2d:	66 01 d0             	add    eax,edx
     e30:	67 66 89 45 a0       	mov    DWORD PTR [ebp-0x60],eax
     e35:	67 66 8b 45 a8       	mov    eax,DWORD PTR [ebp-0x58]
     e3a:	66 c1 f8 04          	sar    eax,0x4
     e3e:	66 89 c2             	mov    edx,eax
     e41:	67 66 8b 45 a4       	mov    eax,DWORD PTR [ebp-0x5c]
     e46:	66 01 d0             	add    eax,edx
     e49:	67 66 89 45 9c       	mov    DWORD PTR [ebp-0x64],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:201
			processTable[tmp].pcb.cs = cs;
     e4e:	67 66 8b 95 6c ff ff 	mov    edx,DWORD PTR [ebp-0x94]
     e55:	ff 
     e56:	67 66 8b 45 a0       	mov    eax,DWORD PTR [ebp-0x60]
     e5b:	66 89 c1             	mov    ecx,eax
     e5e:	66 89 d0             	mov    eax,edx
     e61:	66 c1 e0 03          	shl    eax,0x3
     e65:	66 01 d0             	add    eax,edx
     e68:	66 01 c0             	add    eax,eax
     e6b:	66 01 d0             	add    eax,edx
     e6e:	66 c1 e0 02          	shl    eax,0x2
     e72:	66 01 d0             	add    eax,edx
     e75:	66 c1 e0 02          	shl    eax,0x2
     e79:	66 05 7a d1 00 00    	add    eax,0xd17a
     e7f:	67 89 08             	mov    WORD PTR [eax],cx
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:202
			processTable[tmp].pcb.ss_now = ss;
     e82:	67 66 8b 95 6c ff ff 	mov    edx,DWORD PTR [ebp-0x94]
     e89:	ff 
     e8a:	67 66 8b 45 9c       	mov    eax,DWORD PTR [ebp-0x64]
     e8f:	66 89 c1             	mov    ecx,eax
     e92:	66 89 d0             	mov    eax,edx
     e95:	66 c1 e0 03          	shl    eax,0x3
     e99:	66 01 d0             	add    eax,edx
     e9c:	66 01 c0             	add    eax,eax
     e9f:	66 01 d0             	add    eax,edx
     ea2:	66 c1 e0 02          	shl    eax,0x2
     ea6:	66 01 d0             	add    eax,edx
     ea9:	66 c1 e0 02          	shl    eax,0x2
     ead:	66 05 80 d1 00 00    	add    eax,0xd180
     eb3:	67 89 08             	mov    WORD PTR [eax],cx
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:203
			activate(tmp);
     eb6:	67 66 8b 85 6c ff ff 	mov    eax,DWORD PTR [ebp-0x94]
     ebd:	ff 
     ebe:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
     ec3:	66 e8 1f 4f 00 00    	call   5de8 <_activate>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:190
		         in[2] == 't' && in[3] == 'i') {
     ec9:	e9 0d 03             	jmp    11d9 <__section_alignment__+0x1d9>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:205
		}
		else if (in[0] == 't' && in[1] == 'o' && in[2] == 'u' && in[3] == 'c' && in[4] == 'h')
     ecc:	67 66 8b 45 e0       	mov    eax,DWORD PTR [ebp-0x20]
     ed1:	67 8a 00             	mov    al,BYTE PTR [eax]
     ed4:	3c 74                	cmp    al,0x74
     ed6:	75 55                	jne    f2d <.debug_info+0x359>
     ed8:	67 66 8b 45 e0       	mov    eax,DWORD PTR [ebp-0x20]
     edd:	66 40                	inc    eax
     edf:	67 8a 00             	mov    al,BYTE PTR [eax]
     ee2:	3c 6f                	cmp    al,0x6f
     ee4:	75 47                	jne    f2d <.debug_info+0x359>
     ee6:	67 66 8b 45 e0       	mov    eax,DWORD PTR [ebp-0x20]
     eeb:	66 83 c0 02          	add    eax,0x2
     eef:	67 8a 00             	mov    al,BYTE PTR [eax]
     ef2:	3c 75                	cmp    al,0x75
     ef4:	75 37                	jne    f2d <.debug_info+0x359>
     ef6:	67 66 8b 45 e0       	mov    eax,DWORD PTR [ebp-0x20]
     efb:	66 83 c0 03          	add    eax,0x3
     eff:	67 8a 00             	mov    al,BYTE PTR [eax]
     f02:	3c 63                	cmp    al,0x63
     f04:	75 27                	jne    f2d <.debug_info+0x359>
     f06:	67 66 8b 45 e0       	mov    eax,DWORD PTR [ebp-0x20]
     f0b:	66 83 c0 04          	add    eax,0x4
     f0f:	67 8a 00             	mov    al,BYTE PTR [eax]
     f12:	3c 68                	cmp    al,0x68
     f14:	75 17                	jne    f2d <.debug_info+0x359>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:207
		{
			fcreate(in + 6);
     f16:	67 66 8b 45 e0       	mov    eax,DWORD PTR [ebp-0x20]
     f1b:	66 83 c0 06          	add    eax,0x6
     f1f:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
     f24:	66 e8 51 39 00 00    	call   487b <_fcreate>
     f2a:	e9 ac 02             	jmp    11d9 <__section_alignment__+0x1d9>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:209
		}
		else if (in[0] == 'c' && in[1] == 'p')
     f2d:	67 66 8b 45 e0       	mov    eax,DWORD PTR [ebp-0x20]
     f32:	67 8a 00             	mov    al,BYTE PTR [eax]
     f35:	3c 63                	cmp    al,0x63
     f37:	0f 85 d1 00          	jne    100c <__section_alignment__+0xc>
     f3b:	67 66 8b 45 e0       	mov    eax,DWORD PTR [ebp-0x20]
     f40:	66 40                	inc    eax
     f42:	67 8a 00             	mov    al,BYTE PTR [eax]
     f45:	3c 70                	cmp    al,0x70
     f47:	0f 85 c1 00          	jne    100c <__section_alignment__+0xc>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:213
		{
			int firstEnd;
			char sour[40], des[40];
			for (firstEnd = 3; in[firstEnd] != ' '; ++firstEnd) {}
     f4b:	67 66 c7 45 ec 03 00 	mov    DWORD PTR [ebp-0x14],0x3
     f52:	00 00 
     f54:	eb 05                	jmp    f5b <.debug_info+0x387>
     f56:	67 66 ff 45 ec       	inc    DWORD PTR [ebp-0x14]
     f5b:	67 66 8b 55 ec       	mov    edx,DWORD PTR [ebp-0x14]
     f60:	67 66 8b 45 e0       	mov    eax,DWORD PTR [ebp-0x20]
     f65:	66 01 d0             	add    eax,edx
     f68:	67 8a 00             	mov    al,BYTE PTR [eax]
     f6b:	3c 20                	cmp    al,0x20
     f6d:	75 e7                	jne    f56 <.debug_info+0x382>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:214
			strncpy(in + 3, sour, firstEnd - 3);
     f6f:	67 66 8b 45 ec       	mov    eax,DWORD PTR [ebp-0x14]
     f74:	66 83 e8 03          	sub    eax,0x3
     f78:	67 66 8b 55 e0       	mov    edx,DWORD PTR [ebp-0x20]
     f7d:	66 83 c2 03          	add    edx,0x3
     f81:	67 66 89 44 24 08    	mov    DWORD PTR [esp+0x8],eax
     f87:	67 66 8d 85 02 ff ff 	lea    eax,[ebp-0xfe]
     f8e:	ff 
     f8f:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
     f95:	67 66 89 14 24       	mov    DWORD PTR [esp],edx
     f9a:	66 e8 3b 26 00 00    	call   35db <_strncpy>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:215
			strncpy(in + firstEnd + 1, des, strlen(in) - firstEnd - 1);
     fa0:	67 66 8b 45 e0       	mov    eax,DWORD PTR [ebp-0x20]
     fa5:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
     faa:	66 e8 45 24 00 00    	call   33f5 <_strlen>
     fb0:	67 66 2b 45 ec       	sub    eax,DWORD PTR [ebp-0x14]
     fb5:	66 48                	dec    eax
     fb7:	67 66 8b 55 ec       	mov    edx,DWORD PTR [ebp-0x14]
     fbc:	67 66 8d 4a 01       	lea    ecx,[edx+0x1]
     fc1:	67 66 8b 55 e0       	mov    edx,DWORD PTR [ebp-0x20]
     fc6:	66 01 ca             	add    edx,ecx
     fc9:	67 66 89 44 24 08    	mov    DWORD PTR [esp+0x8],eax
     fcf:	67 66 8d 85 2a ff ff 	lea    eax,[ebp-0xd6]
     fd6:	ff 
     fd7:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
     fdd:	67 66 89 14 24       	mov    DWORD PTR [esp],edx
     fe2:	66 e8 f3 25 00 00    	call   35db <_strncpy>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:216
			cp(sour, des);
     fe8:	67 66 8d 85 2a ff ff 	lea    eax,[ebp-0xd6]
     fef:	ff 
     ff0:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
     ff6:	67 66 8d 85 02 ff ff 	lea    eax,[ebp-0xfe]
     ffd:	ff 
     ffe:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    1003:	66 e8 90 15 00 00    	call   2599 <_cp>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:210
		{
    1009:	e9 cd 01             	jmp    11d9 <__section_alignment__+0x1d9>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:218
		}
		else if (strcmp(in, "loop") == 0)
    100c:	67 66 c7 44 24 04 02 	mov    DWORD PTR [esp+0x4],0x8002
    1013:	80 00 00 
    1016:	67 66 8b 45 e0       	mov    eax,DWORD PTR [ebp-0x20]
    101b:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    1020:	66 e8 a0 24 00 00    	call   34c6 <_strcmp>
    1026:	66 85 c0             	test   eax,eax
    1029:	0f 85 a0 00          	jne    10cd <__section_alignment__+0xcd>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:220
		{
			char text[] = "testing multiple terminal";
    102d:	67 66 8d 85 52 ff ff 	lea    eax,[ebp-0xae]
    1034:	ff 
    1035:	66 bb 28 80 00 00    	mov    ebx,0x8028
    103b:	66 ba 1a 00 00 00    	mov    edx,0x1a
    1041:	66 89 c7             	mov    edi,eax
    1044:	66 89 de             	mov    esi,ebx
    1047:	66 89 d1             	mov    ecx,edx
    104a:	f3 a4                	rep movs BYTE PTR es:[di],BYTE PTR ds:[si]
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:221
			for (int i = 0; i < 20; ++i)
    104c:	67 66 c7 45 e8 00 00 	mov    DWORD PTR [ebp-0x18],0x0
    1053:	00 00 
    1055:	eb 6b                	jmp    10c2 <__section_alignment__+0xc2>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:223
			{
				printSentence(text, i, 0, strlen(text), white);
    1057:	67 66 8d 85 52 ff ff 	lea    eax,[ebp-0xae]
    105e:	ff 
    105f:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    1064:	66 e8 8b 23 00 00    	call   33f5 <_strlen>
    106a:	67 66 c7 44 24 10 0f 	mov    DWORD PTR [esp+0x10],0xf
    1071:	00 00 00 
    1074:	67 66 89 44 24 0c    	mov    DWORD PTR [esp+0xc],eax
    107a:	67 66 c7 44 24 08 00 	mov    DWORD PTR [esp+0x8],0x0
    1081:	00 00 00 
    1084:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
    1089:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    108f:	67 66 8d 85 52 ff ff 	lea    eax,[ebp-0xae]
    1096:	ff 
    1097:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    109c:	66 e8 e4 07 00 00    	call   1886 <_printSentence>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:224
				for (int j = 0; j < 5000000; ++j)
    10a2:	67 66 c7 45 e4 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
    10a9:	00 00 
    10ab:	eb 05                	jmp    10b2 <__section_alignment__+0xb2>
    10ad:	67 66 ff 45 e4       	inc    DWORD PTR [ebp-0x1c]
    10b2:	67 66 81 7d e4 3f 4b 	cmp    DWORD PTR [ebp-0x1c],0x4c4b3f
    10b9:	4c 00 
    10bb:	7e f0                	jle    10ad <__section_alignment__+0xad>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:221
			for (int i = 0; i < 20; ++i)
    10bd:	67 66 ff 45 e8       	inc    DWORD PTR [ebp-0x18]
    10c2:	67 66 83 7d e8 13    	cmp    DWORD PTR [ebp-0x18],0x13
    10c8:	7e 8d                	jle    1057 <__section_alignment__+0x57>
    10ca:	e9 0c 01             	jmp    11d9 <__section_alignment__+0x1d9>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:229
				{}
			}
		}
		else {
			if (strcmp(in, "reboot") == 0)
    10cd:	67 66 c7 44 24 04 07 	mov    DWORD PTR [esp+0x4],0x8007
    10d4:	80 00 00 
    10d7:	67 66 8b 45 e0       	mov    eax,DWORD PTR [ebp-0x20]
    10dc:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    10e1:	66 e8 df 23 00 00    	call   34c6 <_strcmp>
    10e7:	66 85 c0             	test   eax,eax
    10ea:	75 06                	jne    10f2 <__section_alignment__+0xf2>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:230
				reboot();
    10ec:	66 e8 91 0a 00 00    	call   1b83 <_reboot>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:231
			if (strcmp(in, "clear") == 0)
    10f2:	67 66 c7 44 24 04 0e 	mov    DWORD PTR [esp+0x4],0x800e
    10f9:	80 00 00 
    10fc:	67 66 8b 45 e0       	mov    eax,DWORD PTR [ebp-0x20]
    1101:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    1106:	66 e8 ba 23 00 00    	call   34c6 <_strcmp>
    110c:	66 85 c0             	test   eax,eax
    110f:	75 06                	jne    1117 <__section_alignment__+0x117>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:232
				clear();
    1111:	66 e8 3f 17 00 00    	call   2856 <_clear>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:233
			if (strcmp(in, "date") == 0)
    1117:	67 66 c7 44 24 04 14 	mov    DWORD PTR [esp+0x4],0x8014
    111e:	80 00 00 
    1121:	67 66 8b 45 e0       	mov    eax,DWORD PTR [ebp-0x20]
    1126:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    112b:	66 e8 95 23 00 00    	call   34c6 <_strcmp>
    1131:	66 85 c0             	test   eax,eax
    1134:	75 06                	jne    113c <__section_alignment__+0x13c>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:234
				date();
    1136:	66 e8 72 17 00 00    	call   28ae <_date>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:235
			if (strcmp(in, "man") == 0)
    113c:	67 66 c7 44 24 04 19 	mov    DWORD PTR [esp+0x4],0x8019
    1143:	80 00 00 
    1146:	67 66 8b 45 e0       	mov    eax,DWORD PTR [ebp-0x20]
    114b:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    1150:	66 e8 70 23 00 00    	call   34c6 <_strcmp>
    1156:	66 85 c0             	test   eax,eax
    1159:	75 06                	jne    1161 <__section_alignment__+0x161>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:236
				man();
    115b:	66 e8 d1 17 00 00    	call   2932 <_man>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:237
			if (strcmp(in, "ls") == 0)
    1161:	67 66 c7 44 24 04 1d 	mov    DWORD PTR [esp+0x4],0x801d
    1168:	80 00 00 
    116b:	67 66 8b 45 e0       	mov    eax,DWORD PTR [ebp-0x20]
    1170:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    1175:	66 e8 4b 23 00 00    	call   34c6 <_strcmp>
    117b:	66 85 c0             	test   eax,eax
    117e:	75 06                	jne    1186 <__section_alignment__+0x186>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:238
				ls();
    1180:	66 e8 44 19 00 00    	call   2aca <_ls>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:239
			if (strcmp(in, "exit") == 0)
    1186:	67 66 c7 44 24 04 20 	mov    DWORD PTR [esp+0x4],0x8020
    118d:	80 00 00 
    1190:	67 66 8b 45 e0       	mov    eax,DWORD PTR [ebp-0x20]
    1195:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    119a:	66 e8 26 23 00 00    	call   34c6 <_strcmp>
    11a0:	66 85 c0             	test   eax,eax
    11a3:	75 06                	jne    11ab <__section_alignment__+0x1ab>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:240
				shutdown();
    11a5:	66 e8 77 08 00 00    	call   1a22 <_shutdown>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:241
			if (strcmp(in, "ps") == 0)
    11ab:	67 66 c7 44 24 04 25 	mov    DWORD PTR [esp+0x4],0x8025
    11b2:	80 00 00 
    11b5:	67 66 8b 45 e0       	mov    eax,DWORD PTR [ebp-0x20]
    11ba:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    11bf:	66 e8 01 23 00 00    	call   34c6 <_strcmp>
    11c5:	66 85 c0             	test   eax,eax
    11c8:	75 0f                	jne    11d9 <__section_alignment__+0x1d9>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:242
				ps();
    11ca:	66 e8 00 1d 00 00    	call   2ed0 <_ps>
    11d0:	eb 07                	jmp    11d9 <__section_alignment__+0x1d9>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:142
			if (tmp != -1 && information[tmp].deleted != 1) {
    11d2:	90                   	nop
    11d3:	eb 04                	jmp    11d9 <__section_alignment__+0x1d9>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:164
			if (tmp != -1 && information[tmp].deleted != 1) {
    11d5:	90                   	nop
    11d6:	eb 01                	jmp    11d9 <__section_alignment__+0x1d9>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:177
			if (tmp != -1 && information[tmp].deleted != 1) {
    11d8:	90                   	nop
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:244
		}
		newline();
    11d9:	66 e8 26 18 00 00    	call   2a05 <_newline>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./kernel/os.c:80
		in = getInput();
    11df:	e9 ed ee             	jmp    cf <.debug_str+0x94>
    11e2:	00 00                	add    BYTE PTR [bx+si],al
    11e4:	66 90                	xchg   eax,eax
    11e6:	66 90                	xchg   eax,eax
    11e8:	66 90                	xchg   eax,eax
    11ea:	66 90                	xchg   eax,eax
    11ec:	66 90                	xchg   eax,eax
    11ee:	66 90                	xchg   eax,eax

000011f0 <_test>:
    11f0:	ea 00 00 50 00       	jmp    0x50:0x0

000011f5 <_inisys>:
    11f5:	60                   	pusha  
    11f6:	e8 6c 04             	call   1665 <installInt8h>
    11f9:	e8 dc 03             	call   15d8 <installInt9h>
    11fc:	e8 e9 02             	call   14e8 <installInt16h>
    11ff:	e8 93 02             	call   1495 <installInt2Bh>
    1202:	e8 05 00             	call   120a <installInt21h>
    1205:	e8 04 06             	call   180c <installInt34_37h>
    1208:	61                   	popa   
    1209:	c3                   	ret    

0000120a <installInt21h>:
    120a:	50                   	push   ax
    120b:	06                   	push   es
    120c:	b8 00 00             	mov    ax,0x0
    120f:	8e c0                	mov    es,ax
    1211:	26 c7 06 84 00 20 12 	mov    WORD PTR es:0x84,0x1220
    1218:	26 8c 0e 86 00       	mov    WORD PTR es:0x86,cs
    121d:	07                   	pop    es
    121e:	58                   	pop    ax
    121f:	c3                   	ret    

00001220 <int21h>:
    1220:	2e 89 1e de 12       	mov    WORD PTR cs:0x12de,bx
    1225:	53                   	push   bx
    1226:	1e                   	push   ds
    1227:	0e                   	push   cs
    1228:	1f                   	pop    ds
    1229:	bb 00 00             	mov    bx,0x0
    122c:	50                   	push   ax
    122d:	88 e0                	mov    al,ah
    122f:	b3 02                	mov    bl,0x2
    1231:	f6 e3                	mul    bl
    1233:	88 c3                	mov    bl,al
    1235:	58                   	pop    ax
    1236:	2e ff 97 3e 12       	call   WORD PTR cs:[bx+0x123e]

0000123b <int21hre>:
    123b:	1f                   	pop    ds
    123c:	5b                   	pop    bx
    123d:	cf                   	iret   

0000123e <int21hTable>:
    123e:	15 13 23             	adc    ax,0x2313
    1241:	13 68 13             	adc    bp,WORD PTR [bx+si+0x13]
    1244:	41                   	inc    cx
    1245:	13 4c 13             	adc    cx,WORD PTR [si+0x13]
    1248:	9c                   	pushf  
    1249:	13 b3 13 cc          	adc    si,WORD PTR [bp+di-0x33ed]
    124d:	13 db                	adc    bx,bx
    124f:	13 ff                	adc    di,di
    1251:	12 3f                	adc    bh,BYTE PTR [bx]
    1253:	14 4d                	adc    al,0x4d
    1255:	14 5f                	adc    al,0x5f
    1257:	14 71                	adc    al,0x71
    1259:	14 83                	adc    al,0x83
    125b:	14 e4                	adc    al,0xe4
    125d:	12 00                	adc    al,BYTE PTR [bx+si]
	...
    12d3:	00 00                	add    BYTE PTR [bx+si],al
    12d5:	00 5a 13             	add    BYTE PTR [bp+si+0x13],bl

000012d8 <int21h_store_ip>:
	...

000012da <int21h_store_cs>:
	...

000012dc <int21h_store_flags>:
	...

000012de <int21h_store_ebx>:
    12de:	00 00                	add    BYTE PTR [bx+si],al
	...

000012e2 <int21_store_retaddr>:
	...

000012e4 <int21hFree>:
    12e4:	66 50                	push   eax
    12e6:	66 b8 00 00 00 00    	mov    eax,0x0
    12ec:	8c e8                	mov    ax,gs
    12ee:	66 50                	push   eax
    12f0:	66 51                	push   ecx
    12f2:	b8 f4 62             	mov    ax,0x62f4
    12f5:	66 ff d0             	call   eax
    12f8:	66 59                	pop    ecx
    12fa:	66 58                	pop    eax
    12fc:	66 58                	pop    eax
    12fe:	c3                   	ret    

000012ff <int21hMalloc>:
    12ff:	66 53                	push   ebx
    1301:	1e                   	push   ds
    1302:	0e                   	push   cs
    1303:	1f                   	pop    ds
    1304:	66 53                	push   ebx
    1306:	66 b8 3b 61 00 00    	mov    eax,0x613b
    130c:	66 ff d0             	call   eax
    130f:	66 5b                	pop    ebx
    1311:	1f                   	pop    ds
    1312:	66 5b                	pop    ebx
    1314:	c3                   	ret    

00001315 <int21hps>:
    1315:	66 50                	push   eax
    1317:	66 31 c0             	xor    eax,eax
    131a:	b8 d0 2e             	mov    ax,0x2ed0
    131d:	66 ff d0             	call   eax
    1320:	66 58                	pop    eax
    1322:	c3                   	ret    

00001323 <int21hkill>:
    1323:	66 50                	push   eax
    1325:	66 53                	push   ebx
    1327:	66 bb 00 00 00 00    	mov    ebx,0x0
    132d:	88 c3                	mov    bl,al
    132f:	66 53                	push   ebx
    1331:	66 31 c0             	xor    eax,eax
    1334:	b8 e5 31             	mov    ax,0x31e5
    1337:	66 ff d0             	call   eax
    133a:	66 5b                	pop    ebx
    133c:	66 5b                	pop    ebx
    133e:	66 58                	pop    eax
    1340:	c3                   	ret    

00001341 <int21hshowDate>:
    1341:	fb                   	sti    
    1342:	66 31 c0             	xor    eax,eax
    1345:	b8 ae 28             	mov    ax,0x28ae
    1348:	66 ff d0             	call   eax
    134b:	c3                   	ret    

0000134c <int21hClear>:
    134c:	66 50                	push   eax
    134e:	66 31 c0             	xor    eax,eax
    1351:	b8 b4 18             	mov    ax,0x18b4
    1354:	66 ff d0             	call   eax
    1357:	66 58                	pop    eax
    1359:	c3                   	ret    

0000135a <int21hexit>:
    135a:	66 50                	push   eax
    135c:	66 31 c0             	xor    eax,eax
    135f:	b8 22 1a             	mov    ax,0x1a22
    1362:	66 ff d0             	call   eax
    1365:	66 58                	pop    eax
    1367:	c3                   	ret    

00001368 <int21hPrintString>:
    1368:	60                   	pusha  
    1369:	1e                   	push   ds
    136a:	66 50                	push   eax
    136c:	8c e8                	mov    ax,gs
    136e:	8e d8                	mov    ds,ax
    1370:	66 53                	push   ebx
    1372:	66 51                	push   ecx
    1374:	66 b8 00 00 00 00    	mov    eax,0x0
    137a:	88 d0                	mov    al,dl
    137c:	66 50                	push   eax
    137e:	88 f0                	mov    al,dh
    1380:	66 50                	push   eax
    1382:	66 57                	push   edi
    1384:	66 31 c0             	xor    eax,eax
    1387:	b8 86 18             	mov    ax,0x1886
    138a:	66 ff d0             	call   eax
    138d:	66 5f                	pop    edi
    138f:	66 58                	pop    eax
    1391:	66 58                	pop    eax
    1393:	66 59                	pop    ecx
    1395:	66 5b                	pop    ebx
    1397:	66 58                	pop    eax
    1399:	1f                   	pop    ds
    139a:	61                   	popa   
    139b:	c3                   	ret    

0000139c <int21hint2str>:
    139c:	60                   	pusha  
    139d:	1e                   	push   ds
    139e:	8c e8                	mov    ax,gs
    13a0:	8e d8                	mov    ds,ax
    13a2:	66 57                	push   edi
    13a4:	66 53                	push   ebx
    13a6:	b8 4a 36             	mov    ax,0x364a
    13a9:	66 ff d0             	call   eax
    13ac:	66 5b                	pop    ebx
    13ae:	66 5f                	pop    edi
    13b0:	1f                   	pop    ds
    13b1:	61                   	popa   
    13b2:	c3                   	ret    

000013b3 <int21hexitprg>:
    13b3:	60                   	pusha  
    13b4:	1e                   	push   ds
    13b5:	2e 66 ff 36 de 12    	push   DWORD PTR cs:0x12de
    13bb:	66 b8 00 00 00 00    	mov    eax,0x0
    13c1:	b8 e5 57             	mov    ax,0x57e5
    13c4:	66 ff d0             	call   eax
    13c7:	66 5b                	pop    ebx
    13c9:	1f                   	pop    ds
    13ca:	61                   	popa   
    13cb:	c3                   	ret    

000013cc <int21hwait>:
    13cc:	1e                   	push   ds
    13cd:	66 b8 00 00 00 00    	mov    eax,0x0
    13d3:	b8 d3 58             	mov    ax,0x58d3
    13d6:	66 ff d0             	call   eax
    13d9:	1f                   	pop    ds
    13da:	c3                   	ret    

000013db <int21hfork>:
    13db:	fa                   	cli    
    13dc:	0e                   	push   cs
    13dd:	53                   	push   bx
    13de:	50                   	push   ax
    13df:	1e                   	push   ds
    13e0:	8c c8                	mov    ax,cs
    13e2:	8e d8                	mov    ds,ax
    13e4:	2e 8b 1e 70 e9       	mov    bx,WORD PTR cs:0xe970
    13e9:	2e a1 e4 a7          	mov    ax,cs:0xa7e4
    13ed:	f6 e3                	mul    bl
    13ef:	89 c3                	mov    bx,ax
    13f1:	81 c3 60 d1          	add    bx,0xd160
    13f5:	2e 89 1e 6f 1b       	mov    WORD PTR cs:0x1b6f,bx
    13fa:	1f                   	pop    ds
    13fb:	58                   	pop    ax
    13fc:	5b                   	pop    bx
    13fd:	fb                   	sti    
    13fe:	e8 9a 06             	call   1a9b <save>
    1401:	fa                   	cli    
    1402:	60                   	pusha  
    1403:	1e                   	push   ds
    1404:	66 b8 00 00 00 00    	mov    eax,0x0
    140a:	8c c8                	mov    ax,cs
    140c:	8e d8                	mov    ds,ax
    140e:	b8 ec 52             	mov    ax,0x52ec
    1411:	66 ff d0             	call   eax
    1414:	1f                   	pop    ds
    1415:	61                   	popa   
    1416:	53                   	push   bx
    1417:	50                   	push   ax
    1418:	1e                   	push   ds
    1419:	8c c8                	mov    ax,cs
    141b:	8e d8                	mov    ds,ax
    141d:	2e 8b 1e 70 e9       	mov    bx,WORD PTR cs:0xe970
    1422:	2e a1 e4 a7          	mov    ax,cs:0xa7e4
    1426:	f6 e3                	mul    bl
    1428:	89 c3                	mov    bx,ax
    142a:	81 c3 60 d1          	add    bx,0xd160
    142e:	2e 89 1e 6d 1b       	mov    WORD PTR cs:0x1b6d,bx
    1433:	1f                   	pop    ds
    1434:	58                   	pop    ax
    1435:	5b                   	pop    bx
    1436:	e8 e1 06             	call   1b1a <restart>

00001439 <int21hfork_store_cs>:
	...

0000143b <int21hfork_store_ip>:
	...

0000143d <int21hfork_store_flags>:
	...

0000143f <int21hGetSem>:
    143f:	66 31 c0             	xor    eax,eax
    1442:	b8 c6 75             	mov    ax,0x75c6
    1445:	66 51                	push   ecx
    1447:	66 ff d0             	call   eax
    144a:	66 59                	pop    ecx
    144c:	c3                   	ret    

0000144d <int21hFreeSem>:
    144d:	66 50                	push   eax
    144f:	66 31 c0             	xor    eax,eax
    1452:	b8 85 76             	mov    ax,0x7685
    1455:	66 51                	push   ecx
    1457:	66 ff d0             	call   eax
    145a:	66 59                	pop    ecx
    145c:	66 58                	pop    eax
    145e:	c3                   	ret    

0000145f <int21hP>:
    145f:	66 50                	push   eax
    1461:	66 31 c0             	xor    eax,eax
    1464:	b8 f6 76             	mov    ax,0x76f6
    1467:	66 51                	push   ecx
    1469:	66 ff d0             	call   eax
    146c:	66 59                	pop    ecx
    146e:	66 58                	pop    eax
    1470:	c3                   	ret    

00001471 <int21hV>:
    1471:	66 50                	push   eax
    1473:	66 31 c0             	xor    eax,eax
    1476:	b8 19 78             	mov    ax,0x7819
    1479:	66 51                	push   ecx
    147b:	66 ff d0             	call   eax
    147e:	66 59                	pop    ecx
    1480:	66 58                	pop    eax
    1482:	c3                   	ret    

00001483 <int21hDelay>:
    1483:	66 50                	push   eax
    1485:	66 31 c0             	xor    eax,eax
    1488:	b8 b9 5f             	mov    ax,0x5fb9
    148b:	66 51                	push   ecx
    148d:	66 ff d0             	call   eax
    1490:	66 59                	pop    ecx
    1492:	66 58                	pop    eax
    1494:	c3                   	ret    

00001495 <installInt2Bh>:
    1495:	60                   	pusha  
    1496:	06                   	push   es
    1497:	b8 00 00             	mov    ax,0x0
    149a:	8e c0                	mov    es,ax
    149c:	26 c7 06 ac 00 ab 14 	mov    WORD PTR es:0xac,0x14ab
    14a3:	26 8c 0e ae 00       	mov    WORD PTR es:0xae,cs
    14a8:	07                   	pop    es
    14a9:	61                   	popa   
    14aa:	c3                   	ret    

000014ab <int2Bh>:
    14ab:	2e 8f 06 e4 14       	pop    WORD PTR cs:0x14e4
    14b0:	2e 8f 06 e6 14       	pop    WORD PTR cs:0x14e6
    14b5:	9d                   	popf   
    14b6:	2e 8f 06 e4 14       	pop    WORD PTR cs:0x14e4
    14bb:	60                   	pusha  
    14bc:	1e                   	push   ds
    14bd:	66 b8 00 00 00 00    	mov    eax,0x0
    14c3:	8c c8                	mov    ax,cs
    14c5:	8e d8                	mov    ds,ax
    14c7:	a1 70 e9             	mov    ax,ds:0xe970
    14ca:	66 50                	push   eax
    14cc:	b8 e6 4e             	mov    ax,0x4ee6
    14cf:	66 ff d0             	call   eax
    14d2:	66 58                	pop    eax
    14d4:	1f                   	pop    ds
    14d5:	61                   	popa   
    14d6:	9c                   	pushf  
    14d7:	2e ff 36 e6 14       	push   WORD PTR cs:0x14e6
    14dc:	2e ff 36 e4 14       	push   WORD PTR cs:0x14e4
    14e1:	e9 c0 01             	jmp    16a4 <int8h>

000014e4 <in2b_store_ip>:
	...

000014e6 <in2b_store_cs>:
	...

000014e8 <installInt16h>:
    14e8:	60                   	pusha  
    14e9:	06                   	push   es
    14ea:	1e                   	push   ds
    14eb:	31 c0                	xor    ax,ax
    14ed:	8e c0                	mov    es,ax
    14ef:	8c c8                	mov    ax,cs
    14f1:	8e d8                	mov    ds,ax
    14f3:	26 a1 42 00          	mov    ax,es:0x42
    14f7:	2e a3 17 15          	mov    cs:0x1517,ax
    14fb:	26 a1 40 00          	mov    ax,es:0x40
    14ff:	2e a3 15 15          	mov    cs:0x1515,ax
    1503:	fa                   	cli    
    1504:	26 8c 0e 42 00       	mov    WORD PTR es:0x42,cs
    1509:	26 c7 06 40 00 19 15 	mov    WORD PTR es:0x40,0x1519
    1510:	fb                   	sti    
    1511:	1f                   	pop    ds
    1512:	07                   	pop    es
    1513:	61                   	popa   
    1514:	c3                   	ret    

00001515 <tmp16>:
    1515:	00 00                	add    BYTE PTR [bx+si],al
	...

00001519 <int16h>:
    1519:	9c                   	pushf  
    151a:	50                   	push   ax
    151b:	80 fc 00             	cmp    ah,0x0
    151e:	74 10                	je     1530 <extend00hIn16h>
    1520:	80 fc 01             	cmp    ah,0x1
    1523:	74 53                	je     1578 <extend01hIn16h>
    1525:	58                   	pop    ax
    1526:	9d                   	popf   
    1527:	9c                   	pushf  
    1528:	2e ff 1e 15 15       	call   DWORD PTR cs:0x1515
    152d:	e9 a7 00             	jmp    15d7 <int16ret>

00001530 <extend00hIn16h>:
    1530:	9c                   	pushf  
    1531:	2e ff 1e 15 15       	call   DWORD PTR cs:0x1515
    1536:	66 53                	push   ebx
    1538:	50                   	push   ax
    1539:	66 31 db             	xor    ebx,ebx
    153c:	66 bb 2b 33 00 00    	mov    ebx,0x332b
    1542:	66 e8 e3 1d 00 00    	call   332b <_getKey>
    1548:	53                   	push   bx
    1549:	66 53                	push   ebx
    154b:	3d ff 00             	cmp    ax,0xff
    154e:	74 0c                	je     155c <nocurPage00h>
    1550:	2e 8f 06 d1 15       	pop    WORD PTR cs:0x15d1
    1555:	2e 8f 06 d1 15       	pop    WORD PTR cs:0x15d1
    155a:	eb 7b                	jmp    15d7 <int16ret>

0000155c <nocurPage00h>:
    155c:	58                   	pop    ax
    155d:	2e 8f 06 d1 15       	pop    WORD PTR cs:0x15d1
    1562:	2e 8f 06 d1 15       	pop    WORD PTR cs:0x15d1
    1567:	2e a3 d3 15          	mov    cs:0x15d3,ax
    156b:	2e a1 d1 15          	mov    ax,cs:0x15d1
    156f:	83 e8 02             	sub    ax,0x2
    1572:	50                   	push   ax
    1573:	2e a1 d3 15          	mov    ax,cs:0x15d3
    1577:	cf                   	iret   

00001578 <extend01hIn16h>:
    1578:	9c                   	pushf  
    1579:	2e ff 1e 15 15       	call   DWORD PTR cs:0x1515
    157e:	66 53                	push   ebx
    1580:	50                   	push   ax
    1581:	66 31 db             	xor    ebx,ebx
    1584:	66 bb b4 33 00 00    	mov    ebx,0x33b4
    158a:	66 ff d3             	call   ebx
    158d:	83 f8 01             	cmp    ax,0x1
    1590:	75 0f                	jne    15a1 <nocurPage01h>
    1592:	58                   	pop    ax
    1593:	66 5b                	pop    ebx
    1595:	2e 8f 06 d1 15       	pop    WORD PTR cs:0x15d1
    159a:	2e 8f 06 d1 15       	pop    WORD PTR cs:0x15d1
    159f:	eb 36                	jmp    15d7 <int16ret>

000015a1 <nocurPage01h>:
    15a1:	58                   	pop    ax
    15a2:	66 5b                	pop    ebx
    15a4:	2e 8f 06 d1 15       	pop    WORD PTR cs:0x15d1
    15a9:	2e 8f 06 d1 15       	pop    WORD PTR cs:0x15d1
    15ae:	2e 8f 06 d1 15       	pop    WORD PTR cs:0x15d1
    15b3:	2e 8f 06 d3 15       	pop    WORD PTR cs:0x15d3
    15b8:	2e a3 d5 15          	mov    cs:0x15d5,ax
    15bc:	58                   	pop    ax
    15bd:	83 c8 01             	or     ax,0x1
    15c0:	50                   	push   ax
    15c1:	2e a1 d5 15          	mov    ax,cs:0x15d5
    15c5:	2e ff 36 d3 15       	push   WORD PTR cs:0x15d3
    15ca:	2e ff 36 d1 15       	push   WORD PTR cs:0x15d1
    15cf:	eb 06                	jmp    15d7 <int16ret>

000015d1 <tmpinInt16h>:
	...

000015d3 <tmp2inInt16h>:
	...

000015d5 <tmp3inInt16h>:
	...

000015d7 <int16ret>:
    15d7:	cf                   	iret   

000015d8 <installInt9h>:
    15d8:	60                   	pusha  
    15d9:	06                   	push   es
    15da:	1e                   	push   ds
    15db:	31 c0                	xor    ax,ax
    15dd:	8e c0                	mov    es,ax
    15df:	8c c8                	mov    ax,cs
    15e1:	8e d8                	mov    ds,ax
    15e3:	26 a1 26 00          	mov    ax,es:0x26
    15e7:	2e a3 07 16          	mov    cs:0x1607,ax
    15eb:	26 a1 24 00          	mov    ax,es:0x24
    15ef:	2e a3 05 16          	mov    cs:0x1605,ax
    15f3:	fa                   	cli    
    15f4:	26 8c 0e 26 00       	mov    WORD PTR es:0x26,cs
    15f9:	26 c7 06 24 00 09 16 	mov    WORD PTR es:0x24,0x1609
    1600:	fb                   	sti    
    1601:	1f                   	pop    ds
    1602:	07                   	pop    es
    1603:	61                   	popa   
    1604:	c3                   	ret    

00001605 <tmp9>:
    1605:	00 00                	add    BYTE PTR [bx+si],al
	...

00001609 <int9h>:
    1609:	60                   	pusha  
    160a:	06                   	push   es
    160b:	1e                   	push   ds
    160c:	8c c8                	mov    ax,cs
    160e:	8e d8                	mov    ds,ax
    1610:	8e c0                	mov    es,ax
    1612:	9c                   	pushf  
    1613:	2e ff 1e 05 16       	call   DWORD PTR cs:0x1605
    1618:	50                   	push   ax
    1619:	66 51                	push   ecx
    161b:	53                   	push   bx
    161c:	31 db                	xor    bx,bx
    161e:	31 c0                	xor    ax,ax
    1620:	66 31 c9             	xor    ecx,ecx
    1623:	e4 60                	in     al,0x60
    1625:	06                   	push   es
    1626:	bb 40 00             	mov    bx,0x40
    1629:	8e c3                	mov    es,bx
    162b:	26 8a 1e 17 00       	mov    bl,BYTE PTR es:0x17
    1630:	07                   	pop    es
    1631:	b9 80 24             	mov    cx,0x2480
    1634:	53                   	push   bx
    1635:	50                   	push   ax
    1636:	66 ff d1             	call   ecx
    1639:	58                   	pop    ax
    163a:	5b                   	pop    bx
    163b:	5b                   	pop    bx
    163c:	66 59                	pop    ecx
    163e:	58                   	pop    ax

0000163f <showInsert>:
    163f:	b9 09 00             	mov    cx,0x9
    1642:	bd 5c 16             	mov    bp,0x165c
    1645:	ba 45 18             	mov    dx,0x1845
    1648:	b3 0f                	mov    bl,0xf
    164a:	b7 00                	mov    bh,0x0
    164c:	b4 13                	mov    ah,0x13
    164e:	b0 00                	mov    al,0x0
    1650:	cd 10                	int    0x10
    1652:	b0 20                	mov    al,0x20
    1654:	e6 20                	out    0x20,al
    1656:	e6 a0                	out    0xa0,al
    1658:	1f                   	pop    ds
    1659:	07                   	pop    es
    165a:	61                   	popa   
    165b:	cf                   	iret   

0000165c <inserting>:
    165c:	69 6e 73 65 72       	imul   bp,WORD PTR [bp+0x73],0x7265
    1661:	74 69                	je     16cc <int8h+0x28>
    1663:	6e                   	outs   dx,BYTE PTR ds:[si]
    1664:	67                   	addr32

00001665 <installInt8h>:
    1665:	06                   	push   es
    1666:	50                   	push   ax
    1667:	31 c0                	xor    ax,ax
    1669:	8e c0                	mov    es,ax
    166b:	26 a1 22 00          	mov    ax,es:0x22
    166f:	2e a3 a2 16          	mov    cs:0x16a2,ax
    1673:	26 a1 20 00          	mov    ax,es:0x20
    1677:	2e a3 a0 16          	mov    cs:0x16a0,ax
    167b:	fa                   	cli    
    167c:	26 8c 0e 22 00       	mov    WORD PTR es:0x22,cs
    1681:	26 c7 06 20 00 a4 16 	mov    WORD PTR es:0x20,0x16a4
    1688:	2e c7 06 f9 17 28 00 	mov    WORD PTR cs:0x17f9,0x28
    168f:	fb                   	sti    

00001690 <SetTimer>:
    1690:	b0 34                	mov    al,0x34
    1692:	e6 43                	out    0x43,al
    1694:	b8 0b e9             	mov    ax,0xe90b
    1697:	e6 40                	out    0x40,al
    1699:	88 e0                	mov    al,ah
    169b:	e6 40                	out    0x40,al
    169d:	58                   	pop    ax
    169e:	07                   	pop    es
    169f:	c3                   	ret    

000016a0 <tmp8>:
    16a0:	00 00                	add    BYTE PTR [bx+si],al
	...

000016a4 <int8h>:
    16a4:	60                   	pusha  
    16a5:	1e                   	push   ds
    16a6:	06                   	push   es
    16a7:	8c c8                	mov    ax,cs
    16a9:	8e d8                	mov    ds,ax
    16ab:	9c                   	pushf  
    16ac:	ff 1e a0 16          	call   DWORD PTR ds:0x16a0
    16b0:	ff 0e f9 17          	dec    WORD PTR ds:0x17f9
    16b4:	83 3e f9 17 00       	cmp    WORD PTR ds:0x17f9,0x0
    16b9:	75 67                	jne    1722 <int8hret>
    16bb:	c7 06 f9 17 28 00    	mov    WORD PTR ds:0x17f9,0x28
    16c1:	b8 00 b8             	mov    ax,0xb800
    16c4:	8e c0                	mov    es,ax
    16c6:	b4 04                	mov    ah,0x4
    16c8:	b7 00                	mov    bh,0x0
    16ca:	b4 03                	mov    ah,0x3
    16cc:	cd 10                	int    0x10
    16ce:	b8 00 00             	mov    ax,0x0
    16d1:	88 f0                	mov    al,dh
    16d3:	b3 50                	mov    bl,0x50
    16d5:	f6 e3                	mul    bl
    16d7:	b6 00                	mov    dh,0x0
    16d9:	01 d0                	add    ax,dx
    16db:	bb 02 00             	mov    bx,0x2
    16de:	f7 e3                	mul    bx
    16e0:	89 c5                	mov    bp,ax
    16e2:	bb fd 17             	mov    bx,0x17fd
    16e5:	03 1e fb 17          	add    bx,WORD PTR ds:0x17fb
    16e9:	8a 07                	mov    al,BYTE PTR [bx]
    16eb:	b4 0f                	mov    ah,0xf
    16ed:	26 89 46 00          	mov    WORD PTR es:[bp+0x0],ax
    16f1:	b8 20 0f             	mov    ax,0xf20
    16f4:	26 89 46 02          	mov    WORD PTR es:[bp+0x2],ax
    16f8:	ff 06 fb 17          	inc    WORD PTR ds:0x17fb
    16fc:	83 3e fb 17 04       	cmp    WORD PTR ds:0x17fb,0x4
    1701:	7c 06                	jl     1709 <insertShow>
    1703:	c7 06 fb 17 00 00    	mov    WORD PTR ds:0x17fb,0x0

00001709 <insertShow>:
    1709:	06                   	push   es
    170a:	8c c8                	mov    ax,cs
    170c:	8e c0                	mov    es,ax
    170e:	b9 09 00             	mov    cx,0x9
    1711:	bd 01 18             	mov    bp,0x1801
    1714:	ba 45 18             	mov    dx,0x1845
    1717:	b3 0f                	mov    bl,0xf
    1719:	b7 00                	mov    bh,0x0
    171b:	b4 13                	mov    ah,0x13
    171d:	b0 00                	mov    al,0x0
    171f:	cd 10                	int    0x10
    1721:	07                   	pop    es

00001722 <int8hret>:
    1722:	06                   	push   es
    1723:	0e                   	push   cs
    1724:	07                   	pop    es
    1725:	50                   	push   ax
    1726:	51                   	push   cx
    1727:	55                   	push   bp
    1728:	52                   	push   dx
    1729:	b9 0a 00             	mov    cx,0xa
    172c:	bd ef 17             	mov    bp,0x17ef
    172f:	ba 05 18             	mov    dx,0x1805
    1732:	b3 0f                	mov    bl,0xf
    1734:	2e 8a 3e 80 a2       	mov    bh,BYTE PTR cs:0xa280
    1739:	b4 13                	mov    ah,0x13
    173b:	b0 00                	mov    al,0x0
    173d:	cd 10                	int    0x10
    173f:	2e a1 80 a2          	mov    ax,cs:0xa280
    1743:	83 c0 30             	add    ax,0x30
    1746:	2e a3 ee 17          	mov    cs:0x17ee,ax
    174a:	bd ee 17             	mov    bp,0x17ee
    174d:	b9 01 00             	mov    cx,0x1
    1750:	ba 0f 18             	mov    dx,0x180f
    1753:	b3 0f                	mov    bl,0xf
    1755:	2e 8a 3e 80 a2       	mov    bh,BYTE PTR cs:0xa280
    175a:	b4 13                	mov    ah,0x13
    175c:	b0 00                	mov    al,0x0
    175e:	cd 10                	int    0x10
    1760:	66 31 c0             	xor    eax,eax
    1763:	b8 50 25             	mov    ax,0x2550
    1766:	66 ff d0             	call   eax
    1769:	5a                   	pop    dx
    176a:	5d                   	pop    bp
    176b:	59                   	pop    cx
    176c:	58                   	pop    ax
    176d:	07                   	pop    es
    176e:	fa                   	cli    
    176f:	b0 20                	mov    al,0x20
    1771:	e6 20                	out    0x20,al
    1773:	e6 a0                	out    0xa0,al
    1775:	07                   	pop    es
    1776:	1f                   	pop    ds
    1777:	61                   	popa   
    1778:	53                   	push   bx
    1779:	50                   	push   ax
    177a:	1e                   	push   ds
    177b:	8c c8                	mov    ax,cs
    177d:	8e d8                	mov    ds,ax
    177f:	2e 8b 1e 70 e9       	mov    bx,WORD PTR cs:0xe970
    1784:	2e a1 e4 a7          	mov    ax,cs:0xa7e4
    1788:	f6 e3                	mul    bl
    178a:	89 c3                	mov    bx,ax
    178c:	81 c3 60 d1          	add    bx,0xd160
    1790:	2e 89 1e 6f 1b       	mov    WORD PTR cs:0x1b6f,bx
    1795:	1f                   	pop    ds
    1796:	58                   	pop    ax
    1797:	5b                   	pop    bx
    1798:	50                   	push   ax
    1799:	1e                   	push   ds
    179a:	0e                   	push   cs
    179b:	1f                   	pop    ds
    179c:	60                   	pusha  
    179d:	66 31 c0             	xor    eax,eax
    17a0:	b8 62 60             	mov    ax,0x6062
    17a3:	66 ff d0             	call   eax
    17a6:	66 31 c0             	xor    eax,eax
    17a9:	b8 6c 50             	mov    ax,0x506c
    17ac:	66 ff d0             	call   eax
    17af:	61                   	popa   
    17b0:	1f                   	pop    ds
    17b1:	58                   	pop    ax
    17b2:	2e 8f 06 e4 14       	pop    WORD PTR cs:0x14e4
    17b7:	2e 8f 06 e6 14       	pop    WORD PTR cs:0x14e6
    17bc:	9d                   	popf   
    17bd:	2e ff 36 e4 14       	push   WORD PTR cs:0x14e4
    17c2:	2e ff 36 e6 14       	push   WORD PTR cs:0x14e6
    17c7:	53                   	push   bx
    17c8:	50                   	push   ax
    17c9:	1e                   	push   ds
    17ca:	8c c8                	mov    ax,cs
    17cc:	8e d8                	mov    ds,ax
    17ce:	2e 8b 1e 70 e9       	mov    bx,WORD PTR cs:0xe970
    17d3:	2e a1 e4 a7          	mov    ax,cs:0xa7e4
    17d7:	f6 e3                	mul    bl
    17d9:	89 c3                	mov    bx,ax
    17db:	81 c3 60 d1          	add    bx,0xd160
    17df:	2e 89 1e 6d 1b       	mov    WORD PTR cs:0x1b6d,bx
    17e4:	1f                   	pop    ds
    17e5:	58                   	pop    ax
    17e6:	5b                   	pop    bx
    17e7:	e8 b1 02             	call   1a9b <save>
    17ea:	e8 2d 03             	call   1b1a <restart>
    17ed:	cf                   	iret   

000017ee <pageId>:
	...

000017ef <pageNum>:
    17ef:	20 54 65             	and    BYTE PTR [si+0x65],dl
    17f2:	72 6d                	jb     1861 <int35h+0x5>
    17f4:	69 6e 61 6c 20       	imul   bp,WORD PTR [bp+0x61],0x206c

000017f9 <count>:
    17f9:	28 00                	sub    BYTE PTR [bx+si],al

000017fb <k>:
	...

000017fd <char>:
    17fd:	7c 5c                	jl     185b <int34h+0xd>
    17ff:	2d                   	.byte 0x2d
    1800:	2f                   	das    

00001801 <inserted>:
    1801:	69 6e 73 65 72       	imul   bp,WORD PTR [bp+0x73],0x7265
    1806:	74 65                	je     186d <int36h+0x3>
    1808:	64                   	fs
    1809:	20                   	.byte 0x20

0000180a <int8h_store_ss>:
	...

0000180c <installInt34_37h>:
    180c:	06                   	push   es
    180d:	50                   	push   ax
    180e:	b8 00 00             	mov    ax,0x0
    1811:	8e c0                	mov    es,ax
    1813:	fa                   	cli    
    1814:	26 8c 0e d2 00       	mov    WORD PTR es:0xd2,cs
    1819:	26 c7 06 d0 00 4e 18 	mov    WORD PTR es:0xd0,0x184e
    1820:	fb                   	sti    
    1821:	fa                   	cli    
    1822:	26 8c 0e d6 00       	mov    WORD PTR es:0xd6,cs
    1827:	26 c7 06 d4 00 5c 18 	mov    WORD PTR es:0xd4,0x185c
    182e:	fb                   	sti    
    182f:	fa                   	cli    
    1830:	26 8c 0e da 00       	mov    WORD PTR es:0xda,cs
    1835:	26 c7 06 d8 00 6a 18 	mov    WORD PTR es:0xd8,0x186a
    183c:	fb                   	sti    
    183d:	fa                   	cli    
    183e:	26 8c 0e de 00       	mov    WORD PTR es:0xde,cs
    1843:	26 c7 06 dc 00 78 18 	mov    WORD PTR es:0xdc,0x1878
    184a:	fb                   	sti    
    184b:	58                   	pop    ax
    184c:	07                   	pop    es
    184d:	c3                   	ret    

0000184e <int34h>:
    184e:	8c c8                	mov    ax,cs
    1850:	8e d8                	mov    ds,ax
    1852:	66 31 c0             	xor    eax,eax
    1855:	b8 40 7b             	mov    ax,0x7b40
    1858:	66 ff d0             	call   eax
    185b:	cf                   	iret   

0000185c <int35h>:
    185c:	8c c8                	mov    ax,cs
    185e:	8e d8                	mov    ds,ax
    1860:	66 31 c0             	xor    eax,eax
    1863:	b8 9b 7b             	mov    ax,0x7b9b
    1866:	66 ff d0             	call   eax
    1869:	cf                   	iret   

0000186a <int36h>:
    186a:	8c c8                	mov    ax,cs
    186c:	8e d8                	mov    ds,ax
    186e:	66 31 c0             	xor    eax,eax
    1871:	b8 f6 7b             	mov    ax,0x7bf6
    1874:	66 ff d0             	call   eax
    1877:	cf                   	iret   

00001878 <int37h>:
    1878:	8c c8                	mov    ax,cs
    187a:	8e d8                	mov    ds,ax
    187c:	66 31 c0             	xor    eax,eax
    187f:	b8 51 7c             	mov    ax,0x7c51
    1882:	66 ff d0             	call   eax
    1885:	cf                   	iret   

00001886 <_printSentence>:
    1886:	66 55                	push   ebp
    1888:	67 8a 5c 24 18       	mov    bl,BYTE PTR [esp+0x18]
    188d:	67 8b 4c 24 14       	mov    cx,WORD PTR [esp+0x14]
    1892:	67 8a 54 24 10       	mov    dl,BYTE PTR [esp+0x10]
    1897:	67 8a 74 24 0c       	mov    dh,BYTE PTR [esp+0xc]
    189c:	67 8b 6c 24 08       	mov    bp,WORD PTR [esp+0x8]
    18a1:	b0 01                	mov    al,0x1
    18a3:	2e 8a 3e 80 a2       	mov    bh,BYTE PTR cs:0xa280
    18a8:	1e                   	push   ds
    18a9:	07                   	pop    es
    18aa:	b4 13                	mov    ah,0x13
    18ac:	cd 10                	int    0x10
    18ae:	66 5d                	pop    ebp
    18b0:	66 59                	pop    ecx
    18b2:	ff e1                	jmp    cx

000018b4 <_ClearScreen>:
    18b4:	60                   	pusha  
    18b5:	b4 06                	mov    ah,0x6
    18b7:	b0 00                	mov    al,0x0
    18b9:	b7 0f                	mov    bh,0xf
    18bb:	b5 00                	mov    ch,0x0
    18bd:	b1 00                	mov    cl,0x0
    18bf:	b6 18                	mov    dh,0x18
    18c1:	b2 4f                	mov    dl,0x4f
    18c3:	cd 10                	int    0x10
    18c5:	61                   	popa   
    18c6:	2e 66 8f 06 d1 18    	pop    DWORD PTR cs:0x18d1
    18cc:	2e ff 26 d1 18       	jmp    WORD PTR cs:0x18d1

000018d1 <retaddr>:
    18d1:	00 00                	add    BYTE PTR [bx+si],al
	...

000018d5 <_getInput>:
    18d5:	c7 06 1a 1a 00 00    	mov    WORD PTR ds:0x1a1a,0x0

000018db <getStr>:
    18db:	b4 00                	mov    ah,0x0
    18dd:	cd 16                	int    0x16
    18df:	3c 20                	cmp    al,0x20
    18e1:	7c 07                	jl     18ea <nochar>
    18e3:	b4 00                	mov    ah,0x0
    18e5:	e8 26 00             	call   190e <Charmini>
    18e8:	eb f1                	jmp    18db <getStr>

000018ea <nochar>:
    18ea:	80 fc 0e             	cmp    ah,0xe
    18ed:	74 07                	je     18f6 <backspace>
    18ef:	80 fc 1c             	cmp    ah,0x1c
    18f2:	74 09                	je     18fd <enter>
    18f4:	eb e5                	jmp    18db <getStr>

000018f6 <backspace>:
    18f6:	b4 01                	mov    ah,0x1
    18f8:	e8 13 00             	call   190e <Charmini>
    18fb:	eb de                	jmp    18db <getStr>

000018fd <enter>:
    18fd:	b0 00                	mov    al,0x0
    18ff:	b4 00                	mov    ah,0x0
    1901:	e8 0a 00             	call   190e <Charmini>
    1904:	66 29 c0             	sub    eax,eax
    1907:	b8 b5 19             	mov    ax,0x19b5
    190a:	66 59                	pop    ecx
    190c:	ff e1                	jmp    cx

0000190e <Charmini>:
    190e:	53                   	push   bx
    190f:	52                   	push   dx
    1910:	57                   	push   di
    1911:	06                   	push   es
    1912:	80 fc 01             	cmp    ah,0x1
    1915:	0f 8f 97 00          	jg     19b0 <Charminiret>
    1919:	88 e3                	mov    bl,ah
    191b:	b7 00                	mov    bh,0x0
    191d:	01 db                	add    bx,bx
    191f:	ff a7 1c 1a          	jmp    WORD PTR [bx+0x1a1c]

00001923 <charpush>:
    1923:	80 3e 1a 1a 64       	cmp    BYTE PTR ds:0x1a1a,0x64
    1928:	0f 8d 84 00          	jge    19b0 <Charminiret>
    192c:	8b 1e 1a 1a          	mov    bx,WORD PTR ds:0x1a1a
    1930:	fe 06 1a 1a          	inc    BYTE PTR ds:0x1a1a
    1934:	88 87 b5 19          	mov    BYTE PTR [bx+0x19b5],al
    1938:	e8 1a 00             	call   1955 <charshow>
    193b:	eb 73                	jmp    19b0 <Charminiret>

0000193d <charpop>:
    193d:	80 3e 1a 1a 00       	cmp    BYTE PTR ds:0x1a1a,0x0
    1942:	7e 6c                	jle    19b0 <Charminiret>
    1944:	fe 0e 1a 1a          	dec    BYTE PTR ds:0x1a1a
    1948:	8b 1e 1a 1a          	mov    bx,WORD PTR ds:0x1a1a
    194c:	8a 87 b5 19          	mov    al,BYTE PTR [bx+0x19b5]
    1950:	e8 2a 00             	call   197d <coverLast>
    1953:	eb 5b                	jmp    19b0 <Charminiret>

00001955 <charshow>:
    1955:	66 55                	push   ebp
    1957:	2e 8a 3e 80 a2       	mov    bh,BYTE PTR cs:0xa280
    195c:	b4 03                	mov    ah,0x3
    195e:	cd 10                	int    0x10
    1960:	b0 01                	mov    al,0x1
    1962:	b4 13                	mov    ah,0x13
    1964:	2e 8a 3e 80 a2       	mov    bh,BYTE PTR cs:0xa280
    1969:	b3 0e                	mov    bl,0xe
    196b:	b9 01 00             	mov    cx,0x1
    196e:	0e                   	push   cs
    196f:	07                   	pop    es
    1970:	bd b5 19             	mov    bp,0x19b5
    1973:	03 2e 1a 1a          	add    bp,WORD PTR ds:0x1a1a
    1977:	4d                   	dec    bp
    1978:	cd 10                	int    0x10
    197a:	66 5d                	pop    ebp
    197c:	c3                   	ret    

0000197d <coverLast>:
    197d:	b8 00 b8             	mov    ax,0xb800
    1980:	8e c0                	mov    es,ax
    1982:	b4 03                	mov    ah,0x3
    1984:	cd 10                	int    0x10
    1986:	80 fa 00             	cmp    dl,0x0
    1989:	7f 04                	jg     198f <noEndofLine>
    198b:	b2 50                	mov    dl,0x50
    198d:	fe ce                	dec    dh

0000198f <noEndofLine>:
    198f:	fe ca                	dec    dl
    1991:	b4 02                	mov    ah,0x2
    1993:	2e 8a 3e 80 a2       	mov    bh,BYTE PTR cs:0xa280
    1998:	cd 10                	int    0x10
    199a:	b8 50 00             	mov    ax,0x50
    199d:	f6 e6                	mul    dh
    199f:	b6 00                	mov    dh,0x0
    19a1:	01 d0                	add    ax,dx
    19a3:	ba 02 00             	mov    dx,0x2
    19a6:	f7 e2                	mul    dx
    19a8:	89 c3                	mov    bx,ax
    19aa:	26 c7 07 20 0f       	mov    WORD PTR es:[bx],0xf20
    19af:	c3                   	ret    

000019b0 <Charminiret>:
    19b0:	07                   	pop    es
    19b1:	5f                   	pop    di
    19b2:	5a                   	pop    dx
    19b3:	5b                   	pop    bx
    19b4:	c3                   	ret    

000019b5 <input>:
	...

00001a1a <top>:
	...

00001a1c <getInputTable>:
    1a1c:	23 19                	and    bx,WORD PTR [bx+di]
    1a1e:	3d 19 55             	cmp    ax,0x5519
    1a21:	19                   	.byte 0x19

00001a22 <_shutdown>:
    1a22:	60                   	pusha  
    1a23:	b8 01 53             	mov    ax,0x5301
    1a26:	31 db                	xor    bx,bx
    1a28:	cd 15                	int    0x15
    1a2a:	b8 0e 53             	mov    ax,0x530e
    1a2d:	b9 02 01             	mov    cx,0x102
    1a30:	cd 15                	int    0x15
    1a32:	b8 07 53             	mov    ax,0x5307
    1a35:	b3 01                	mov    bl,0x1
    1a37:	b9 03 00             	mov    cx,0x3
    1a3a:	cd 15                	int    0x15
    1a3c:	61                   	popa   
    1a3d:	66 59                	pop    ecx
    1a3f:	ff e1                	jmp    cx

00001a41 <_loadReal>:
    1a41:	66 55                	push   ebp
    1a43:	06                   	push   es
    1a44:	1e                   	push   ds
    1a45:	50                   	push   ax
    1a46:	52                   	push   dx
    1a47:	51                   	push   cx
    1a48:	53                   	push   bx
    1a49:	8c c8                	mov    ax,cs
    1a4b:	8e d8                	mov    ds,ax
    1a4d:	67 8b 44 24 20       	mov    ax,WORD PTR [esp+0x20]
    1a52:	8e c0                	mov    es,ax
    1a54:	67 8b 44 24 14       	mov    ax,WORD PTR [esp+0x14]
    1a59:	ba 00 00             	mov    dx,0x0
    1a5c:	b9 00 02             	mov    cx,0x200
    1a5f:	f7 f1                	div    cx
    1a61:	b9 12 00             	mov    cx,0x12
    1a64:	f7 f1                	div    cx
    1a66:	88 d1                	mov    cl,dl
    1a68:	fe c1                	inc    cl
    1a6a:	89 c2                	mov    dx,ax
    1a6c:	d1 e8                	shr    ax,1
    1a6e:	88 c5                	mov    ch,al
    1a70:	88 d6                	mov    dh,dl
    1a72:	80 e6 01             	and    dh,0x1
    1a75:	b2 00                	mov    dl,0x0
    1a77:	51                   	push   cx
    1a78:	67 8b 44 24 1c       	mov    ax,WORD PTR [esp+0x1c]
    1a7d:	b9 00 02             	mov    cx,0x200
    1a80:	ba 00 00             	mov    dx,0x0
    1a83:	f7 f1                	div    cx
    1a85:	59                   	pop    cx
    1a86:	67 8b 5c 24 1c       	mov    bx,WORD PTR [esp+0x1c]
    1a8b:	b4 02                	mov    ah,0x2
    1a8d:	cd 13                	int    0x13
    1a8f:	5b                   	pop    bx
    1a90:	59                   	pop    cx
    1a91:	5a                   	pop    dx
    1a92:	58                   	pop    ax
    1a93:	1f                   	pop    ds
    1a94:	07                   	pop    es
    1a95:	66 5d                	pop    ebp
    1a97:	66 59                	pop    ecx
    1a99:	ff e1                	jmp    cx

00001a9b <save>:
    1a9b:	83 c4 06             	add    sp,0x6
    1a9e:	2e 89 26 67 1b       	mov    WORD PTR cs:0x1b67,sp
    1aa3:	2e 8c 16 69 1b       	mov    WORD PTR cs:0x1b69,ss
    1aa8:	83 ec 06             	sub    sp,0x6
    1aab:	2e 8f 06 81 1b       	pop    WORD PTR cs:0x1b81
    1ab0:	1e                   	push   ds
    1ab1:	0e                   	push   cs
    1ab2:	1f                   	pop    ds
    1ab3:	56                   	push   si
    1ab4:	57                   	push   di
    1ab5:	2e 8b 3e 6f 1b       	mov    di,WORD PTR cs:0x1b6f
    1aba:	2e 8f 06 73 1b       	pop    WORD PTR cs:0x1b73
    1abf:	2e 8f 06 75 1b       	pop    WORD PTR cs:0x1b75
    1ac4:	2e 8f 06 77 1b       	pop    WORD PTR cs:0x1b77
    1ac9:	2e 8f 06 7b 1b       	pop    WORD PTR cs:0x1b7b
    1ace:	2e 8f 06 79 1b       	pop    WORD PTR cs:0x1b79
    1ad3:	8c 55 20             	mov    WORD PTR [di+0x20],ss
    1ad6:	89 65 1e             	mov    WORD PTR [di+0x1e],sp
    1ad9:	0e                   	push   cs
    1ada:	17                   	pop    ss
    1adb:	83 c7 1e             	add    di,0x1e
    1ade:	89 fc                	mov    sp,di
    1ae0:	9c                   	pushf  
    1ae1:	2e ff 36 7b 1b       	push   WORD PTR cs:0x1b7b
    1ae6:	2e ff 36 79 1b       	push   WORD PTR cs:0x1b79
    1aeb:	60                   	pusha  
    1aec:	5f                   	pop    di
    1aed:	5f                   	pop    di
    1aee:	2e ff 36 75 1b       	push   WORD PTR cs:0x1b75
    1af3:	2e ff 36 73 1b       	push   WORD PTR cs:0x1b73
    1af8:	2e ff 36 77 1b       	push   WORD PTR cs:0x1b77
    1afd:	06                   	push   es
    1afe:	0f a0                	push   fs
    1b00:	0f a8                	push   gs
    1b02:	2e 8e 16 69 1b       	mov    ss,WORD PTR cs:0x1b69
    1b07:	2e a3 6b 1b          	mov    cs:0x1b6b,ax
    1b0b:	2e a1 67 1b          	mov    ax,cs:0x1b67
    1b0f:	89 c4                	mov    sp,ax
    1b11:	2e a1 6b 1b          	mov    ax,cs:0x1b6b
    1b15:	2e ff 26 81 1b       	jmp    WORD PTR cs:0x1b81

00001b1a <restart>:
    1b1a:	0e                   	push   cs
    1b1b:	17                   	pop    ss
    1b1c:	2e 8f 06 81 1b       	pop    WORD PTR cs:0x1b81
    1b21:	2e 8b 26 6d 1b       	mov    sp,WORD PTR cs:0x1b6d
    1b26:	89 e0                	mov    ax,sp
    1b28:	83 c0 18             	add    ax,0x18
    1b2b:	2e a3 7f 1b          	mov    cs:0x1b7f,ax
    1b2f:	0f a9                	pop    gs
    1b31:	0f a1                	pop    fs
    1b33:	07                   	pop    es
    1b34:	1f                   	pop    ds
    1b35:	61                   	popa   
    1b36:	2e 8b 26 7f 1b       	mov    sp,WORD PTR cs:0x1b7f
    1b3b:	2e 8f 06 79 1b       	pop    WORD PTR cs:0x1b79
    1b40:	2e 8f 06 7b 1b       	pop    WORD PTR cs:0x1b7b
    1b45:	9d                   	popf   
    1b46:	2e 8f 06 7f 1b       	pop    WORD PTR cs:0x1b7f
    1b4b:	17                   	pop    ss
    1b4c:	2e a3 71 1b          	mov    cs:0x1b71,ax
    1b50:	2e a1 7f 1b          	mov    ax,cs:0x1b7f
    1b54:	89 c4                	mov    sp,ax
    1b56:	2e a1 71 1b          	mov    ax,cs:0x1b71
    1b5a:	fb                   	sti    
    1b5b:	9c                   	pushf  
    1b5c:	2e ff 36 7b 1b       	push   WORD PTR cs:0x1b7b
    1b61:	2e ff 36 79 1b       	push   WORD PTR cs:0x1b79
    1b66:	cf                   	iret   

00001b67 <store_sp_dispatch>:
	...

00001b69 <store_ss_dispatch>:
	...

00001b6b <store_ax_dispatch>:
	...

00001b6d <new_process>:
	...

00001b6f <old_process>:
	...

00001b71 <store_ax>:
	...

00001b73 <store_di>:
	...

00001b75 <store_si>:
	...

00001b77 <store_ds>:
	...

00001b79 <store_ip>:
	...

00001b7b <store_cs>:
	...

00001b7d <store_ss>:
	...

00001b7f <store_sp>:
	...

00001b81 <store_retaddr>:
	...

00001b83 <_reboot>:
    1b83:	cd 19                	int    0x19

00001b85 <_getDate>:
    1b85:	60                   	pusha  
    1b86:	b4 04                	mov    ah,0x4
    1b88:	cd 1a                	int    0x1a
    1b8a:	88 cb                	mov    bl,cl
    1b8c:	88 d8                	mov    al,bl
    1b8e:	24 f0                	and    al,0xf0
    1b90:	b1 04                	mov    cl,0x4
    1b92:	d2 e8                	shr    al,cl
    1b94:	80 e3 0f             	and    bl,0xf
    1b97:	88 dc                	mov    ah,bl
    1b99:	05 30 30             	add    ax,0x3030
    1b9c:	c7 06 ea 1b 32 30    	mov    WORD PTR ds:0x1bea,0x3032
    1ba2:	a3 ec 1b             	mov    ds:0x1bec,ax
    1ba5:	88 f3                	mov    bl,dh
    1ba7:	88 d8                	mov    al,bl
    1ba9:	24 f0                	and    al,0xf0
    1bab:	b1 04                	mov    cl,0x4
    1bad:	d2 e8                	shr    al,cl
    1baf:	80 e3 0f             	and    bl,0xf
    1bb2:	88 dc                	mov    ah,bl
    1bb4:	05 30 30             	add    ax,0x3030
    1bb7:	a3 e7 1b             	mov    ds:0x1be7,ax
    1bba:	c6 06 e9 1b 2f       	mov    BYTE PTR ds:0x1be9,0x2f
    1bbf:	88 d3                	mov    bl,dl
    1bc1:	88 d8                	mov    al,bl
    1bc3:	24 f0                	and    al,0xf0
    1bc5:	b1 04                	mov    cl,0x4
    1bc7:	d2 e8                	shr    al,cl
    1bc9:	80 e3 0f             	and    bl,0xf
    1bcc:	88 dc                	mov    ah,bl
    1bce:	05 30 30             	add    ax,0x3030
    1bd1:	a3 e4 1b             	mov    ds:0x1be4,ax
    1bd4:	c6 06 e6 1b 2f       	mov    BYTE PTR ds:0x1be6,0x2f
    1bd9:	61                   	popa   
    1bda:	66 31 c0             	xor    eax,eax
    1bdd:	b8 e4 1b             	mov    ax,0x1be4
    1be0:	66 59                	pop    ecx
    1be2:	ff e1                	jmp    cx

00001be4 <date>:
	...

00001bef <_roll>:
    1bef:	66 55                	push   ebp
    1bf1:	b4 06                	mov    ah,0x6
    1bf3:	b0 01                	mov    al,0x1
    1bf5:	b7 0f                	mov    bh,0xf
    1bf7:	b9 00 00             	mov    cx,0x0
    1bfa:	ba 4f 17             	mov    dx,0x174f
    1bfd:	cd 10                	int    0x10
    1bff:	66 5d                	pop    ebp
    1c01:	66 59                	pop    ecx
    1c03:	ff e1                	jmp    cx

00001c05 <lastline>:
	...

00002385 <_getRecords>:
    2385:	66 55                	push   ebp
    2387:	8c c8                	mov    ax,cs
    2389:	67 8b 44 24 08       	mov    ax,WORD PTR [esp+0x8]
    238e:	8e c0                	mov    es,ax
    2390:	66 31 db             	xor    ebx,ebx
    2393:	66 67 8b 5c 24 0c    	mov    ebx,DWORD PTR [esp+0xc]
    2399:	66 31 c0             	xor    eax,eax
    239c:	89 d8                	mov    ax,bx
    239e:	66 5d                	pop    ebp
    23a0:	66 59                	pop    ecx
    23a2:	ff e1                	jmp    cx

000023a4 <_fork>:
    23a4:	60                   	pusha  
    23a5:	b4 08                	mov    ah,0x8
    23a7:	cd 21                	int    0x21
    23a9:	61                   	popa   
    23aa:	c3                   	ret    

000023ab <_exitprg>:
    23ab:	66 55                	push   ebp
    23ad:	66 89 e5             	mov    ebp,esp
    23b0:	60                   	pusha  
    23b1:	36 67 8b 5d 08       	mov    bx,WORD PTR ss:[ebp+0x8]
    23b6:	b4 06                	mov    ah,0x6
    23b8:	cd 21                	int    0x21
    23ba:	61                   	popa   
    23bb:	66 89 ec             	mov    esp,ebp
    23be:	66 5d                	pop    ebp
    23c0:	c3                   	ret    

000023c1 <_wait>:
    23c1:	66 55                	push   ebp
    23c3:	66 89 e5             	mov    ebp,esp
    23c6:	60                   	pusha  
    23c7:	36 67 8b 5d 08       	mov    bx,WORD PTR ss:[ebp+0x8]
    23cc:	b4 07                	mov    ah,0x7
    23ce:	cd 21                	int    0x21
    23d0:	61                   	popa   
    23d1:	66 89 ec             	mov    esp,ebp
    23d4:	66 5d                	pop    ebp
    23d6:	c3                   	ret    

000023d7 <_memcpy>:
    23d7:	66 55                	push   ebp
    23d9:	66 89 e5             	mov    ebp,esp
    23dc:	60                   	pusha  
    23dd:	1e                   	push   ds
    23de:	06                   	push   es
    23df:	36 67 8b 45 08       	mov    ax,WORD PTR ss:[ebp+0x8]
    23e4:	8e d8                	mov    ds,ax
    23e6:	36 67 8b 75 0c       	mov    si,WORD PTR ss:[ebp+0xc]
    23eb:	36 67 8b 45 10       	mov    ax,WORD PTR ss:[ebp+0x10]
    23f0:	8e c0                	mov    es,ax
    23f2:	36 67 8b 7d 14       	mov    di,WORD PTR ss:[ebp+0x14]
    23f7:	36 67 8b 4d 18       	mov    cx,WORD PTR ss:[ebp+0x18]
    23fc:	f3 a4                	rep movs BYTE PTR es:[di],BYTE PTR ds:[si]
    23fe:	07                   	pop    es
    23ff:	1f                   	pop    ds
    2400:	61                   	popa   
    2401:	66 89 ec             	mov    esp,ebp
    2404:	66 5d                	pop    ebp
    2406:	66 59                	pop    ecx
    2408:	ff e1                	jmp    cx

0000240a <_write>:
    240a:	66 55                	push   ebp
    240c:	06                   	push   es
    240d:	1e                   	push   ds
    240e:	50                   	push   ax
    240f:	52                   	push   dx
    2410:	51                   	push   cx
    2411:	53                   	push   bx
    2412:	8c c8                	mov    ax,cs
    2414:	8e d8                	mov    ds,ax
    2416:	67 8b 44 24 20       	mov    ax,WORD PTR [esp+0x20]
    241b:	8e c0                	mov    es,ax
    241d:	67 8b 44 24 14       	mov    ax,WORD PTR [esp+0x14]
    2422:	ba 00 00             	mov    dx,0x0
    2425:	b9 00 02             	mov    cx,0x200
    2428:	f7 f1                	div    cx
    242a:	b9 12 00             	mov    cx,0x12
    242d:	f7 f1                	div    cx
    242f:	88 d1                	mov    cl,dl
    2431:	fe c1                	inc    cl
    2433:	89 c2                	mov    dx,ax
    2435:	d1 e8                	shr    ax,1
    2437:	88 c5                	mov    ch,al
    2439:	88 d6                	mov    dh,dl
    243b:	80 e6 01             	and    dh,0x1
    243e:	b2 00                	mov    dl,0x0
    2440:	52                   	push   dx
    2441:	51                   	push   cx
    2442:	67 8b 44 24 1c       	mov    ax,WORD PTR [esp+0x1c]
    2447:	b9 00 02             	mov    cx,0x200
    244a:	ba 00 00             	mov    dx,0x0
    244d:	f7 f1                	div    cx
    244f:	59                   	pop    cx
    2450:	5a                   	pop    dx
    2451:	67 8b 5c 24 1c       	mov    bx,WORD PTR [esp+0x1c]
    2456:	b4 03                	mov    ah,0x3
    2458:	cd 13                	int    0x13
    245a:	5b                   	pop    bx
    245b:	59                   	pop    cx
    245c:	5a                   	pop    dx
    245d:	58                   	pop    ax
    245e:	1f                   	pop    ds
    245f:	07                   	pop    es
    2460:	66 5d                	pop    ebp
    2462:	66 59                	pop    ecx
    2464:	ff e1                	jmp    cx
    2466:	66 90                	xchg   eax,eax
    2468:	66 90                	xchg   eax,eax
    246a:	66 90                	xchg   eax,eax
    246c:	66 90                	xchg   eax,eax
    246e:	66 90                	xchg   eax,eax
    2470:	66 90                	xchg   eax,eax
    2472:	66 90                	xchg   eax,eax
    2474:	66 90                	xchg   eax,eax
    2476:	66 90                	xchg   eax,eax
    2478:	66 90                	xchg   eax,eax
    247a:	66 90                	xchg   eax,eax
    247c:	66 90                	xchg   eax,eax
    247e:	66 90                	xchg   eax,eax

00002480 <_changePage>:
changePage():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:47
void initialProcessTable();
/////////// inside declarations end ////////////

//////////// IO ////////////////////
void changePage(short scanCode, short status)
{
    2480:	66 55                	push   ebp
    2482:	66 89 e5             	mov    ebp,esp
    2485:	66 83 ec 08          	sub    esp,0x8
    2489:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    248e:	67 66 8b 45 0c       	mov    eax,DWORD PTR [ebp+0xc]
    2493:	67 89 55 fc          	mov    WORD PTR [ebp-0x4],dx
    2497:	67 89 45 f8          	mov    WORD PTR [ebp-0x8],ax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:48
	if (status & (1 << 2))
    249b:	67 66 0f bf 45 f8    	movsx  eax,WORD PTR [ebp-0x8]
    24a1:	66 83 e0 04          	and    eax,0x4
    24a5:	66 85 c0             	test   eax,eax
    24a8:	74 72                	je     251c <_changePage+0x9c>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:50
	{
		if (scanCode == 0x48)
    24aa:	67 83 7d fc 48       	cmp    WORD PTR [ebp-0x4],0x48
    24af:	75 34                	jne    24e5 <_changePage+0x65>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:52
		{
			curPageId = (curPageId - 1) % (MaxPage + 1);
    24b1:	66 a1 80 a2          	mov    eax,ds:0xa280
    24b5:	66 48                	dec    eax
    24b7:	66 25 03 00 00 80    	and    eax,0x80000003
    24bd:	66 85 c0             	test   eax,eax
    24c0:	79 08                	jns    24ca <_changePage+0x4a>
    24c2:	66 48                	dec    eax
    24c4:	66 83 c8 fc          	or     eax,0xfffffffc
    24c8:	66 40                	inc    eax
    24ca:	66 a3 80 a2          	mov    ds:0xa280,eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:53
			if (curPageId == 0) {
    24ce:	66 a1 80 a2          	mov    eax,ds:0xa280
    24d2:	66 85 c0             	test   eax,eax
    24d5:	75 45                	jne    251c <_changePage+0x9c>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:54
				curPageId += MaxPage;
    24d7:	66 a1 80 a2          	mov    eax,ds:0xa280
    24db:	66 83 c0 03          	add    eax,0x3
    24df:	66 a3 80 a2          	mov    ds:0xa280,eax
    24e3:	eb 37                	jmp    251c <_changePage+0x9c>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:57
			}
		}
		else if (scanCode == 0x50)
    24e5:	67 83 7d fc 50       	cmp    WORD PTR [ebp-0x4],0x50
    24ea:	75 30                	jne    251c <_changePage+0x9c>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:59
		{
			curPageId = (curPageId + 1) % (MaxPage + 1);
    24ec:	66 a1 80 a2          	mov    eax,ds:0xa280
    24f0:	66 40                	inc    eax
    24f2:	66 25 03 00 00 80    	and    eax,0x80000003
    24f8:	66 85 c0             	test   eax,eax
    24fb:	79 08                	jns    2505 <_changePage+0x85>
    24fd:	66 48                	dec    eax
    24ff:	66 83 c8 fc          	or     eax,0xfffffffc
    2503:	66 40                	inc    eax
    2505:	66 a3 80 a2          	mov    ds:0xa280,eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:60
			if (curPageId == 0)
    2509:	66 a1 80 a2          	mov    eax,ds:0xa280
    250d:	66 85 c0             	test   eax,eax
    2510:	75 0a                	jne    251c <_changePage+0x9c>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:61
				curPageId += 1;
    2512:	66 a1 80 a2          	mov    eax,ds:0xa280
    2516:	66 40                	inc    eax
    2518:	66 a3 80 a2          	mov    ds:0xa280,eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:64
		}
	}
	processTable[curProcessId].pageID = curPageId;
    251c:	66 8b 16 70 e9       	mov    edx,DWORD PTR ds:0xe970
    2521:	66 8b 0e 80 a2       	mov    ecx,DWORD PTR ds:0xa280
    2526:	66 89 d0             	mov    eax,edx
    2529:	66 c1 e0 03          	shl    eax,0x3
    252d:	66 01 d0             	add    eax,edx
    2530:	66 01 c0             	add    eax,eax
    2533:	66 01 d0             	add    eax,edx
    2536:	66 c1 e0 02          	shl    eax,0x2
    253a:	66 01 d0             	add    eax,edx
    253d:	66 c1 e0 02          	shl    eax,0x2
    2541:	66 05 8c d2 00 00    	add    eax,0xd28c
    2547:	67 66 89 08          	mov    DWORD PTR [eax],ecx
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:65
}
    254b:	90                   	nop
    254c:	66 c9                	leave  
    254e:	66 c3                	ret    

00002550 <_copyPage>:
copyPage():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:70



void copyPage()
{
    2550:	66 55                	push   ebp
    2552:	66 89 e5             	mov    ebp,esp
    2555:	66 83 ec 14          	sub    esp,0x14
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:71
	memcpy(0xb800, curPageId * 1024 * 4, 0xb800, 0, 4 * 1024);
    2559:	66 a1 80 a2          	mov    eax,ds:0xa280
    255d:	66 c1 e0 0c          	shl    eax,0xc
    2561:	67 66 c7 44 24 10 00 	mov    DWORD PTR [esp+0x10],0x1000
    2568:	10 00 00 
    256b:	67 66 c7 44 24 0c 00 	mov    DWORD PTR [esp+0xc],0x0
    2572:	00 00 00 
    2575:	67 66 c7 44 24 08 00 	mov    DWORD PTR [esp+0x8],0xb800
    257c:	b8 00 00 
    257f:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    2585:	67 66 c7 04 24 00 b8 	mov    DWORD PTR [esp],0xb800
    258c:	00 00 
    258e:	66 e8 43 fe ff ff    	call   23d7 <_memcpy>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:72
}
    2594:	90                   	nop
    2595:	66 c9                	leave  
    2597:	66 c3                	ret    

00002599 <_cp>:
cp():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:75

void cp(char * sour, char * des)
{
    2599:	66 55                	push   ebp
    259b:	66 89 e5             	mov    ebp,esp
    259e:	66 83 ec 20          	sub    esp,0x20
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:76
	fcreate(des);
    25a2:	67 66 8b 45 0c       	mov    eax,DWORD PTR [ebp+0xc]
    25a7:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    25ac:	66 e8 c9 22 00 00    	call   487b <_fcreate>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:77
	int sourInd = find(sour), desInd = find(des);
    25b2:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    25b7:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    25bc:	66 e8 bb 13 00 00    	call   397d <_find>
    25c2:	67 66 89 45 fc       	mov    DWORD PTR [ebp-0x4],eax
    25c7:	67 66 8b 45 0c       	mov    eax,DWORD PTR [ebp+0xc]
    25cc:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    25d1:	66 e8 a6 13 00 00    	call   397d <_find>
    25d7:	67 66 89 45 f8       	mov    DWORD PTR [ebp-0x8],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:78
	int segMask = 0xf0000, offsetMask = 0x0000ffff;
    25dc:	67 66 c7 45 f4 00 00 	mov    DWORD PTR [ebp-0xc],0xf0000
    25e3:	0f 00 
    25e5:	67 66 c7 45 f0 ff ff 	mov    DWORD PTR [ebp-0x10],0xffff
    25ec:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:79
	fopen(sour, readFile);
    25ee:	67 66 c7 44 24 04 00 	mov    DWORD PTR [esp+0x4],0x0
    25f5:	00 00 00 
    25f8:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    25fd:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    2602:	66 e8 ac 19 00 00    	call   3fb4 <_fopen>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:80
	char * buffer = malloc(information[sourInd].size);
    2608:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    260d:	66 89 d0             	mov    eax,edx
    2610:	66 01 c0             	add    eax,eax
    2613:	66 01 d0             	add    eax,edx
    2616:	66 c1 e0 02          	shl    eax,0x2
    261a:	66 01 d0             	add    eax,edx
    261d:	66 c1 e0 02          	shl    eax,0x2
    2621:	66 01 d0             	add    eax,edx
    2624:	66 c1 e0 02          	shl    eax,0x2
    2628:	66 05 88 c0 00 00    	add    eax,0xc088
    262e:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    2632:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    2637:	66 e8 fe 3a 00 00    	call   613b <_malloc>
    263d:	67 66 89 45 ec       	mov    DWORD PTR [ebp-0x14],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:81
	fread(sour, buffer, information[sourInd].size);
    2642:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    2647:	66 89 d0             	mov    eax,edx
    264a:	66 01 c0             	add    eax,eax
    264d:	66 01 d0             	add    eax,edx
    2650:	66 c1 e0 02          	shl    eax,0x2
    2654:	66 01 d0             	add    eax,edx
    2657:	66 c1 e0 02          	shl    eax,0x2
    265b:	66 01 d0             	add    eax,edx
    265e:	66 c1 e0 02          	shl    eax,0x2
    2662:	66 05 88 c0 00 00    	add    eax,0xc088
    2668:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    266c:	67 66 89 44 24 08    	mov    DWORD PTR [esp+0x8],eax
    2672:	67 66 8b 45 ec       	mov    eax,DWORD PTR [ebp-0x14]
    2677:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    267d:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    2682:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    2687:	66 e8 ae 1f 00 00    	call   463b <_fread>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:82
	fclose(sour);
    268d:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    2692:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    2697:	66 e8 58 1d 00 00    	call   43f5 <_fclose>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:83
	fopen(des, readFile);
    269d:	67 66 c7 44 24 04 00 	mov    DWORD PTR [esp+0x4],0x0
    26a4:	00 00 00 
    26a7:	67 66 8b 45 0c       	mov    eax,DWORD PTR [ebp+0xc]
    26ac:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    26b1:	66 e8 fd 18 00 00    	call   3fb4 <_fopen>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:84
	fwrite(des, buffer, information[sourInd].size);
    26b7:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    26bc:	66 89 d0             	mov    eax,edx
    26bf:	66 01 c0             	add    eax,eax
    26c2:	66 01 d0             	add    eax,edx
    26c5:	66 c1 e0 02          	shl    eax,0x2
    26c9:	66 01 d0             	add    eax,edx
    26cc:	66 c1 e0 02          	shl    eax,0x2
    26d0:	66 01 d0             	add    eax,edx
    26d3:	66 c1 e0 02          	shl    eax,0x2
    26d7:	66 05 88 c0 00 00    	add    eax,0xc088
    26dd:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    26e1:	67 66 89 44 24 08    	mov    DWORD PTR [esp+0x8],eax
    26e7:	67 66 8b 45 ec       	mov    eax,DWORD PTR [ebp-0x14]
    26ec:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    26f2:	67 66 8b 45 0c       	mov    eax,DWORD PTR [ebp+0xc]
    26f7:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    26fc:	66 e8 59 20 00 00    	call   475b <_fwrite>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:85
	fclose(des);
    2702:	67 66 8b 45 0c       	mov    eax,DWORD PTR [ebp+0xc]
    2707:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    270c:	66 e8 e3 1c 00 00    	call   43f5 <_fclose>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:86
}
    2712:	90                   	nop
    2713:	66 c9                	leave  
    2715:	66 c3                	ret    

00002717 <_countLines>:
countLines():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:90


int countLines(char * sen)
{
    2717:	66 55                	push   ebp
    2719:	66 89 e5             	mov    ebp,esp
    271c:	66 83 ec 08          	sub    esp,0x8
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:91
	int lines = 0;
    2720:	67 66 c7 45 fc 00 00 	mov    DWORD PTR [ebp-0x4],0x0
    2727:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:92
	for (int i = 0; sen[i]; ++i) {
    2729:	67 66 c7 45 f8 00 00 	mov    DWORD PTR [ebp-0x8],0x0
    2730:	00 00 
    2732:	eb 1e                	jmp    2752 <_countLines+0x3b>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:93
		if (sen[i] == '\n') {
    2734:	67 66 8b 55 f8       	mov    edx,DWORD PTR [ebp-0x8]
    2739:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    273e:	66 01 d0             	add    eax,edx
    2741:	67 8a 00             	mov    al,BYTE PTR [eax]
    2744:	3c 0a                	cmp    al,0xa
    2746:	75 05                	jne    274d <_countLines+0x36>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:94
			++lines;
    2748:	67 66 ff 45 fc       	inc    DWORD PTR [ebp-0x4]
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:92
	for (int i = 0; sen[i]; ++i) {
    274d:	67 66 ff 45 f8       	inc    DWORD PTR [ebp-0x8]
    2752:	67 66 8b 55 f8       	mov    edx,DWORD PTR [ebp-0x8]
    2757:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    275c:	66 01 d0             	add    eax,edx
    275f:	67 8a 00             	mov    al,BYTE PTR [eax]
    2762:	84 c0                	test   al,al
    2764:	75 ce                	jne    2734 <_countLines+0x1d>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:97
		}
	}
	lines += 1;
    2766:	67 66 ff 45 fc       	inc    DWORD PTR [ebp-0x4]
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:98
	return lines;
    276b:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:99
}
    2770:	66 c9                	leave  
    2772:	66 c3                	ret    

00002774 <_initialScreen>:
initialScreen():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:102

void initialScreen(int welcome)
{
    2774:	66 55                	push   ebp
    2776:	66 89 e5             	mov    ebp,esp
    2779:	66 83 ec 14          	sub    esp,0x14
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:103
	clear();
    277d:	66 e8 d3 00 00 00    	call   2856 <_clear>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:104
	if (welcome) {
    2783:	67 66 83 7d 08 00    	cmp    DWORD PTR [ebp+0x8],0x0
    2789:	74 63                	je     27ee <_initialScreen+0x7a>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:105
		printSentence(WelcomeSentence, line, 0, strlen(WelcomeSentence), white);
    278b:	66 a1 ac 7c          	mov    eax,ds:0x7cac
    278f:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    2794:	66 e8 5b 0c 00 00    	call   33f5 <_strlen>
    279a:	66 89 c1             	mov    ecx,eax
    279d:	66 8b 16 60 a2       	mov    edx,DWORD PTR ds:0xa260
    27a2:	66 a1 ac 7c          	mov    eax,ds:0x7cac
    27a6:	67 66 c7 44 24 10 0f 	mov    DWORD PTR [esp+0x10],0xf
    27ad:	00 00 00 
    27b0:	67 66 89 4c 24 0c    	mov    DWORD PTR [esp+0xc],ecx
    27b6:	67 66 c7 44 24 08 00 	mov    DWORD PTR [esp+0x8],0x0
    27bd:	00 00 00 
    27c0:	67 66 89 54 24 04    	mov    DWORD PTR [esp+0x4],edx
    27c6:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    27cb:	66 e8 b5 f0 ff ff    	call   1886 <_printSentence>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:106
		line += countLines(WelcomeSentence);
    27d1:	66 a1 ac 7c          	mov    eax,ds:0x7cac
    27d5:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    27da:	66 e8 37 ff ff ff    	call   2717 <_countLines>
    27e0:	66 89 c2             	mov    edx,eax
    27e3:	66 a1 60 a2          	mov    eax,ds:0xa260
    27e7:	66 01 d0             	add    eax,edx
    27ea:	66 a3 60 a2          	mov    ds:0xa260,eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:108
	}
	printSentence(prompt, line, 0, strlen(prompt), white);
    27ee:	66 a1 b0 7c          	mov    eax,ds:0x7cb0
    27f2:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    27f7:	66 e8 f8 0b 00 00    	call   33f5 <_strlen>
    27fd:	66 89 c1             	mov    ecx,eax
    2800:	66 8b 16 60 a2       	mov    edx,DWORD PTR ds:0xa260
    2805:	66 a1 b0 7c          	mov    eax,ds:0x7cb0
    2809:	67 66 c7 44 24 10 0f 	mov    DWORD PTR [esp+0x10],0xf
    2810:	00 00 00 
    2813:	67 66 89 4c 24 0c    	mov    DWORD PTR [esp+0xc],ecx
    2819:	67 66 c7 44 24 08 00 	mov    DWORD PTR [esp+0x8],0x0
    2820:	00 00 00 
    2823:	67 66 89 54 24 04    	mov    DWORD PTR [esp+0x4],edx
    2829:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    282e:	66 e8 52 f0 ff ff    	call   1886 <_printSentence>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:109
	line += countLines(prompt);
    2834:	66 a1 b0 7c          	mov    eax,ds:0x7cb0
    2838:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    283d:	66 e8 d4 fe ff ff    	call   2717 <_countLines>
    2843:	66 89 c2             	mov    edx,eax
    2846:	66 a1 60 a2          	mov    eax,ds:0xa260
    284a:	66 01 d0             	add    eax,edx
    284d:	66 a3 60 a2          	mov    ds:0xa260,eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:110
}
    2851:	90                   	nop
    2852:	66 c9                	leave  
    2854:	66 c3                	ret    

00002856 <_clear>:
clear():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:113

void clear()
{
    2856:	66 55                	push   ebp
    2858:	66 89 e5             	mov    ebp,esp
    285b:	66 83 ec 14          	sub    esp,0x14
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:114
	line = 0;
    285f:	66 c7 06 60 a2 00 00 	mov    DWORD PTR ds:0xa260,0x0
    2866:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:115
	ClearScreen();
    2868:	66 e8 46 f0 ff ff    	call   18b4 <_ClearScreen>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:116
	memcpy(0xb800, 0, 0xb800, curPageId * 4 * 1024, 4 * 1024);
    286e:	66 a1 80 a2          	mov    eax,ds:0xa280
    2872:	66 c1 e0 0c          	shl    eax,0xc
    2876:	67 66 c7 44 24 10 00 	mov    DWORD PTR [esp+0x10],0x1000
    287d:	10 00 00 
    2880:	67 66 89 44 24 0c    	mov    DWORD PTR [esp+0xc],eax
    2886:	67 66 c7 44 24 08 00 	mov    DWORD PTR [esp+0x8],0xb800
    288d:	b8 00 00 
    2890:	67 66 c7 44 24 04 00 	mov    DWORD PTR [esp+0x4],0x0
    2897:	00 00 00 
    289a:	67 66 c7 04 24 00 b8 	mov    DWORD PTR [esp],0xb800
    28a1:	00 00 
    28a3:	66 e8 2e fb ff ff    	call   23d7 <_memcpy>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:117
}
    28a9:	90                   	nop
    28aa:	66 c9                	leave  
    28ac:	66 c3                	ret    

000028ae <_date>:
date():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:121


void date()
{
    28ae:	66 55                	push   ebp
    28b0:	66 89 e5             	mov    ebp,esp
    28b3:	66 83 ec 18          	sub    esp,0x18
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:122
	char * dateSen = getDate();
    28b7:	66 e8 c8 f2 ff ff    	call   1b85 <_getDate>
    28bd:	67 66 89 45 fc       	mov    DWORD PTR [ebp-0x4],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:123
	printSentence(dateSen, line, 30, strlen(dateSen), purple);
    28c2:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
    28c7:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    28cc:	66 e8 23 0b 00 00    	call   33f5 <_strlen>
    28d2:	66 89 c2             	mov    edx,eax
    28d5:	66 a1 60 a2          	mov    eax,ds:0xa260
    28d9:	67 66 c7 44 24 10 0d 	mov    DWORD PTR [esp+0x10],0xd
    28e0:	00 00 00 
    28e3:	67 66 89 54 24 0c    	mov    DWORD PTR [esp+0xc],edx
    28e9:	67 66 c7 44 24 08 1e 	mov    DWORD PTR [esp+0x8],0x1e
    28f0:	00 00 00 
    28f3:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    28f9:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
    28fe:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    2903:	66 e8 7d ef ff ff    	call   1886 <_printSentence>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:124
	newline();
    2909:	66 e8 f6 00 00 00    	call   2a05 <_newline>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:125
	line += countLines(dateSen);
    290f:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
    2914:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    2919:	66 e8 f8 fd ff ff    	call   2717 <_countLines>
    291f:	66 89 c2             	mov    edx,eax
    2922:	66 a1 60 a2          	mov    eax,ds:0xa260
    2926:	66 01 d0             	add    eax,edx
    2929:	66 a3 60 a2          	mov    ds:0xa260,eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:126
}
    292d:	90                   	nop
    292e:	66 c9                	leave  
    2930:	66 c3                	ret    

00002932 <_man>:
man():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:130


void man()
{
    2932:	66 55                	push   ebp
    2934:	66 89 e5             	mov    ebp,esp
    2937:	66 83 ec 18          	sub    esp,0x18
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:131
	char * manual = getRecords(segOfOs, offsetOfManual);
    293b:	67 66 c7 44 24 04 00 	mov    DWORD PTR [esp+0x4],0xd500
    2942:	d5 00 00 
    2945:	67 66 c7 04 24 00 20 	mov    DWORD PTR [esp],0x2000
    294c:	00 00 
    294e:	66 e8 31 fa ff ff    	call   2385 <_getRecords>
    2954:	67 66 89 45 fc       	mov    DWORD PTR [ebp-0x4],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:132
	line = 0;
    2959:	66 c7 06 60 a2 00 00 	mov    DWORD PTR ds:0xa260,0x0
    2960:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:133
	ClearScreen();
    2962:	66 e8 4c ef ff ff    	call   18b4 <_ClearScreen>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:134
	printSentence(manual, line, 0, strlen(manual), purple);
    2968:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
    296d:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    2972:	66 e8 7d 0a 00 00    	call   33f5 <_strlen>
    2978:	66 89 c2             	mov    edx,eax
    297b:	66 a1 60 a2          	mov    eax,ds:0xa260
    297f:	67 66 c7 44 24 10 0d 	mov    DWORD PTR [esp+0x10],0xd
    2986:	00 00 00 
    2989:	67 66 89 54 24 0c    	mov    DWORD PTR [esp+0xc],edx
    298f:	67 66 c7 44 24 08 00 	mov    DWORD PTR [esp+0x8],0x0
    2996:	00 00 00 
    2999:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    299f:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
    29a4:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    29a9:	66 e8 d7 ee ff ff    	call   1886 <_printSentence>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:135
	line += countLines(manual);
    29af:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
    29b4:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    29b9:	66 e8 58 fd ff ff    	call   2717 <_countLines>
    29bf:	66 89 c2             	mov    edx,eax
    29c2:	66 a1 60 a2          	mov    eax,ds:0xa260
    29c6:	66 01 d0             	add    eax,edx
    29c9:	66 a3 60 a2          	mov    ds:0xa260,eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:136
}
    29cd:	90                   	nop
    29ce:	66 c9                	leave  
    29d0:	66 c3                	ret    

000029d2 <_getPage>:
getPage():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:139

int getPage()
{
    29d2:	66 55                	push   ebp
    29d4:	66 89 e5             	mov    ebp,esp
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:140
	return processTable[curProcessId].pageID;
    29d7:	66 8b 16 70 e9       	mov    edx,DWORD PTR ds:0xe970
    29dc:	66 89 d0             	mov    eax,edx
    29df:	66 c1 e0 03          	shl    eax,0x3
    29e3:	66 01 d0             	add    eax,edx
    29e6:	66 01 c0             	add    eax,eax
    29e9:	66 01 d0             	add    eax,edx
    29ec:	66 c1 e0 02          	shl    eax,0x2
    29f0:	66 01 d0             	add    eax,edx
    29f3:	66 c1 e0 02          	shl    eax,0x2
    29f7:	66 05 8c d2 00 00    	add    eax,0xd28c
    29fd:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:141
}
    2a01:	66 5d                	pop    ebp
    2a03:	66 c3                	ret    

00002a05 <_newline>:
newline():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:144

void newline()
{
    2a05:	66 55                	push   ebp
    2a07:	66 89 e5             	mov    ebp,esp
    2a0a:	66 83 ec 14          	sub    esp,0x14
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:145
	if (line >= 24) {
    2a0e:	66 a1 60 a2          	mov    eax,ds:0xa260
    2a12:	66 83 f8 17          	cmp    eax,0x17
    2a16:	7e 4a                	jle    2a62 <_newline+0x5d>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:146
		roll();
    2a18:	66 e8 d1 f1 ff ff    	call   1bef <_roll>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:147
		memcpy(0xb800, 0, 0xb800, curPageId * 4 * 1024, 4 * 1024);
    2a1e:	66 a1 80 a2          	mov    eax,ds:0xa280
    2a22:	66 c1 e0 0c          	shl    eax,0xc
    2a26:	67 66 c7 44 24 10 00 	mov    DWORD PTR [esp+0x10],0x1000
    2a2d:	10 00 00 
    2a30:	67 66 89 44 24 0c    	mov    DWORD PTR [esp+0xc],eax
    2a36:	67 66 c7 44 24 08 00 	mov    DWORD PTR [esp+0x8],0xb800
    2a3d:	b8 00 00 
    2a40:	67 66 c7 44 24 04 00 	mov    DWORD PTR [esp+0x4],0x0
    2a47:	00 00 00 
    2a4a:	67 66 c7 04 24 00 b8 	mov    DWORD PTR [esp],0xb800
    2a51:	00 00 
    2a53:	66 e8 7e f9 ff ff    	call   23d7 <_memcpy>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:148
		line = 23;
    2a59:	66 c7 06 60 a2 17 00 	mov    DWORD PTR ds:0xa260,0x17
    2a60:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:150
	}
	printSentence(prompt, line, 0, strlen(prompt), white);
    2a62:	66 a1 b0 7c          	mov    eax,ds:0x7cb0
    2a66:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    2a6b:	66 e8 84 09 00 00    	call   33f5 <_strlen>
    2a71:	66 89 c1             	mov    ecx,eax
    2a74:	66 8b 16 60 a2       	mov    edx,DWORD PTR ds:0xa260
    2a79:	66 a1 b0 7c          	mov    eax,ds:0x7cb0
    2a7d:	67 66 c7 44 24 10 0f 	mov    DWORD PTR [esp+0x10],0xf
    2a84:	00 00 00 
    2a87:	67 66 89 4c 24 0c    	mov    DWORD PTR [esp+0xc],ecx
    2a8d:	67 66 c7 44 24 08 00 	mov    DWORD PTR [esp+0x8],0x0
    2a94:	00 00 00 
    2a97:	67 66 89 54 24 04    	mov    DWORD PTR [esp+0x4],edx
    2a9d:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    2aa2:	66 e8 de ed ff ff    	call   1886 <_printSentence>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:151
	line += countLines(prompt);
    2aa8:	66 a1 b0 7c          	mov    eax,ds:0x7cb0
    2aac:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    2ab1:	66 e8 60 fc ff ff    	call   2717 <_countLines>
    2ab7:	66 89 c2             	mov    edx,eax
    2aba:	66 a1 60 a2          	mov    eax,ds:0xa260
    2abe:	66 01 d0             	add    eax,edx
    2ac1:	66 a3 60 a2          	mov    ds:0xa260,eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:152
}
    2ac5:	90                   	nop
    2ac6:	66 c9                	leave  
    2ac8:	66 c3                	ret    

00002aca <_ls>:
ls():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:155

void ls()
{
    2aca:	66 55                	push   ebp
    2acc:	66 89 e5             	mov    ebp,esp
    2acf:	66 57                	push   edi
    2ad1:	66 53                	push   ebx
    2ad3:	66 83 ec 38          	sub    esp,0x38
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:156
	char * head = "Name           Size           Lma            Type";
    2ad7:	67 66 c7 45 f0 88 80 	mov    DWORD PTR [ebp-0x10],0x8088
    2ade:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:157
	printSentence(head, line, 10, strlen(head), green);
    2ae0:	67 66 8b 45 f0       	mov    eax,DWORD PTR [ebp-0x10]
    2ae5:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    2aea:	66 e8 05 09 00 00    	call   33f5 <_strlen>
    2af0:	66 89 c2             	mov    edx,eax
    2af3:	66 a1 60 a2          	mov    eax,ds:0xa260
    2af7:	67 66 c7 44 24 10 0a 	mov    DWORD PTR [esp+0x10],0xa
    2afe:	00 00 00 
    2b01:	67 66 89 54 24 0c    	mov    DWORD PTR [esp+0xc],edx
    2b07:	67 66 c7 44 24 08 0a 	mov    DWORD PTR [esp+0x8],0xa
    2b0e:	00 00 00 
    2b11:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    2b17:	67 66 8b 45 f0       	mov    eax,DWORD PTR [ebp-0x10]
    2b1c:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    2b21:	66 e8 5f ed ff ff    	call   1886 <_printSentence>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:158
	char typeTable[10][1] = {"N", "D", "E", "F"};
    2b27:	67 66 8d 55 e6       	lea    edx,[ebp-0x1a]
    2b2c:	66 b9 0a 00 00 00    	mov    ecx,0xa
    2b32:	b0 00                	mov    al,0x0
    2b34:	66 89 d7             	mov    edi,edx
    2b37:	f3 aa                	rep stos BYTE PTR es:[di],al
    2b39:	67 c6 45 e6 4e       	mov    BYTE PTR [ebp-0x1a],0x4e
    2b3e:	67 c6 45 e7 44       	mov    BYTE PTR [ebp-0x19],0x44
    2b43:	67 c6 45 e8 45       	mov    BYTE PTR [ebp-0x18],0x45
    2b48:	67 c6 45 e9 46       	mov    BYTE PTR [ebp-0x17],0x46
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:159
	line += countLines(head);
    2b4d:	67 66 8b 45 f0       	mov    eax,DWORD PTR [ebp-0x10]
    2b52:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    2b57:	66 e8 ba fb ff ff    	call   2717 <_countLines>
    2b5d:	66 89 c2             	mov    edx,eax
    2b60:	66 a1 60 a2          	mov    eax,ds:0xa260
    2b64:	66 01 d0             	add    eax,edx
    2b67:	66 a3 60 a2          	mov    ds:0xa260,eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:161
	char tmp[15];
	for (int i = 0; i < Len; ++i)
    2b6b:	67 66 c7 45 f4 00 00 	mov    DWORD PTR [ebp-0xc],0x0
    2b72:	00 00 
    2b74:	e9 42 03             	jmp    2eb9 <_ls+0x3ef>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:163
	{
		if (information[i].type != null && information[i].deleted != 1) {
    2b77:	67 66 8b 55 f4       	mov    edx,DWORD PTR [ebp-0xc]
    2b7c:	66 89 d0             	mov    eax,edx
    2b7f:	66 01 c0             	add    eax,eax
    2b82:	66 01 d0             	add    eax,edx
    2b85:	66 c1 e0 02          	shl    eax,0x2
    2b89:	66 01 d0             	add    eax,edx
    2b8c:	66 c1 e0 02          	shl    eax,0x2
    2b90:	66 01 d0             	add    eax,edx
    2b93:	66 c1 e0 02          	shl    eax,0x2
    2b97:	66 05 80 c0 00 00    	add    eax,0xc080
    2b9d:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    2ba1:	66 85 c0             	test   eax,eax
    2ba4:	0f 84 0c 03          	je     2eb4 <_ls+0x3ea>
    2ba8:	67 66 8b 55 f4       	mov    edx,DWORD PTR [ebp-0xc]
    2bad:	66 89 d0             	mov    eax,edx
    2bb0:	66 01 c0             	add    eax,eax
    2bb3:	66 01 d0             	add    eax,edx
    2bb6:	66 c1 e0 02          	shl    eax,0x2
    2bba:	66 01 d0             	add    eax,edx
    2bbd:	66 c1 e0 02          	shl    eax,0x2
    2bc1:	66 01 d0             	add    eax,edx
    2bc4:	66 c1 e0 02          	shl    eax,0x2
    2bc8:	66 05 8c c0 00 00    	add    eax,0xc08c
    2bce:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    2bd2:	66 83 f8 01          	cmp    eax,0x1
    2bd6:	0f 84 da 02          	je     2eb4 <_ls+0x3ea>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:164
			printSentence(information[i].name, line, 10, strlen(information[i].name), purple);
    2bda:	67 66 8b 55 f4       	mov    edx,DWORD PTR [ebp-0xc]
    2bdf:	66 89 d0             	mov    eax,edx
    2be2:	66 01 c0             	add    eax,eax
    2be5:	66 01 d0             	add    eax,edx
    2be8:	66 c1 e0 02          	shl    eax,0x2
    2bec:	66 01 d0             	add    eax,edx
    2bef:	66 c1 e0 02          	shl    eax,0x2
    2bf3:	66 01 d0             	add    eax,edx
    2bf6:	66 c1 e0 02          	shl    eax,0x2
    2bfa:	66 05 60 c0 00 00    	add    eax,0xc060
    2c00:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    2c05:	66 e8 ea 07 00 00    	call   33f5 <_strlen>
    2c0b:	66 89 c3             	mov    ebx,eax
    2c0e:	66 8b 0e 60 a2       	mov    ecx,DWORD PTR ds:0xa260
    2c13:	67 66 8b 55 f4       	mov    edx,DWORD PTR [ebp-0xc]
    2c18:	66 89 d0             	mov    eax,edx
    2c1b:	66 01 c0             	add    eax,eax
    2c1e:	66 01 d0             	add    eax,edx
    2c21:	66 c1 e0 02          	shl    eax,0x2
    2c25:	66 01 d0             	add    eax,edx
    2c28:	66 c1 e0 02          	shl    eax,0x2
    2c2c:	66 01 d0             	add    eax,edx
    2c2f:	66 c1 e0 02          	shl    eax,0x2
    2c33:	66 05 60 c0 00 00    	add    eax,0xc060
    2c39:	67 66 c7 44 24 10 0d 	mov    DWORD PTR [esp+0x10],0xd
    2c40:	00 00 00 
    2c43:	67 66 89 5c 24 0c    	mov    DWORD PTR [esp+0xc],ebx
    2c49:	67 66 c7 44 24 08 0a 	mov    DWORD PTR [esp+0x8],0xa
    2c50:	00 00 00 
    2c53:	67 66 89 4c 24 04    	mov    DWORD PTR [esp+0x4],ecx
    2c59:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    2c5e:	66 e8 22 ec ff ff    	call   1886 <_printSentence>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:165
			if (information[i].size == 0) {
    2c64:	67 66 8b 55 f4       	mov    edx,DWORD PTR [ebp-0xc]
    2c69:	66 89 d0             	mov    eax,edx
    2c6c:	66 01 c0             	add    eax,eax
    2c6f:	66 01 d0             	add    eax,edx
    2c72:	66 c1 e0 02          	shl    eax,0x2
    2c76:	66 01 d0             	add    eax,edx
    2c79:	66 c1 e0 02          	shl    eax,0x2
    2c7d:	66 01 d0             	add    eax,edx
    2c80:	66 c1 e0 02          	shl    eax,0x2
    2c84:	66 05 88 c0 00 00    	add    eax,0xc088
    2c8a:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    2c8e:	66 85 c0             	test   eax,eax
    2c91:	75 3a                	jne    2ccd <_ls+0x203>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:166
				printSentence("--", line, 25, 2, purple);
    2c93:	66 a1 60 a2          	mov    eax,ds:0xa260
    2c97:	67 66 c7 44 24 10 0d 	mov    DWORD PTR [esp+0x10],0xd
    2c9e:	00 00 00 
    2ca1:	67 66 c7 44 24 0c 02 	mov    DWORD PTR [esp+0xc],0x2
    2ca8:	00 00 00 
    2cab:	67 66 c7 44 24 08 19 	mov    DWORD PTR [esp+0x8],0x19
    2cb2:	00 00 00 
    2cb5:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    2cbb:	67 66 c7 04 24 ba 80 	mov    DWORD PTR [esp],0x80ba
    2cc2:	00 00 
    2cc4:	66 e8 bc eb ff ff    	call   1886 <_printSentence>
    2cca:	e9 87 00             	jmp    2d54 <_ls+0x28a>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:168
			} else {
				int2str(information[i].size, tmp);
    2ccd:	67 66 8b 55 f4       	mov    edx,DWORD PTR [ebp-0xc]
    2cd2:	66 89 d0             	mov    eax,edx
    2cd5:	66 01 c0             	add    eax,eax
    2cd8:	66 01 d0             	add    eax,edx
    2cdb:	66 c1 e0 02          	shl    eax,0x2
    2cdf:	66 01 d0             	add    eax,edx
    2ce2:	66 c1 e0 02          	shl    eax,0x2
    2ce6:	66 01 d0             	add    eax,edx
    2ce9:	66 c1 e0 02          	shl    eax,0x2
    2ced:	66 05 88 c0 00 00    	add    eax,0xc088
    2cf3:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    2cf7:	67 66 8d 55 d7       	lea    edx,[ebp-0x29]
    2cfc:	67 66 89 54 24 04    	mov    DWORD PTR [esp+0x4],edx
    2d02:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    2d07:	66 e8 3d 09 00 00    	call   364a <_int2str>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:169
				printSentence(tmp, line, 25, strlen(tmp), purple);
    2d0d:	67 66 8d 45 d7       	lea    eax,[ebp-0x29]
    2d12:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    2d17:	66 e8 d8 06 00 00    	call   33f5 <_strlen>
    2d1d:	66 89 c2             	mov    edx,eax
    2d20:	66 a1 60 a2          	mov    eax,ds:0xa260
    2d24:	67 66 c7 44 24 10 0d 	mov    DWORD PTR [esp+0x10],0xd
    2d2b:	00 00 00 
    2d2e:	67 66 89 54 24 0c    	mov    DWORD PTR [esp+0xc],edx
    2d34:	67 66 c7 44 24 08 19 	mov    DWORD PTR [esp+0x8],0x19
    2d3b:	00 00 00 
    2d3e:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    2d44:	67 66 8d 45 d7       	lea    eax,[ebp-0x29]
    2d49:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    2d4e:	66 e8 32 eb ff ff    	call   1886 <_printSentence>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:171
			}
			if (information[i].lmaddress == 0) {
    2d54:	67 66 8b 55 f4       	mov    edx,DWORD PTR [ebp-0xc]
    2d59:	66 89 d0             	mov    eax,edx
    2d5c:	66 01 c0             	add    eax,eax
    2d5f:	66 01 d0             	add    eax,edx
    2d62:	66 c1 e0 02          	shl    eax,0x2
    2d66:	66 01 d0             	add    eax,edx
    2d69:	66 c1 e0 02          	shl    eax,0x2
    2d6d:	66 01 d0             	add    eax,edx
    2d70:	66 c1 e0 02          	shl    eax,0x2
    2d74:	66 05 84 c0 00 00    	add    eax,0xc084
    2d7a:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    2d7e:	66 85 c0             	test   eax,eax
    2d81:	75 3a                	jne    2dbd <_ls+0x2f3>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:172
				printSentence("--", line, 40, 2, purple);
    2d83:	66 a1 60 a2          	mov    eax,ds:0xa260
    2d87:	67 66 c7 44 24 10 0d 	mov    DWORD PTR [esp+0x10],0xd
    2d8e:	00 00 00 
    2d91:	67 66 c7 44 24 0c 02 	mov    DWORD PTR [esp+0xc],0x2
    2d98:	00 00 00 
    2d9b:	67 66 c7 44 24 08 28 	mov    DWORD PTR [esp+0x8],0x28
    2da2:	00 00 00 
    2da5:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    2dab:	67 66 c7 04 24 ba 80 	mov    DWORD PTR [esp],0x80ba
    2db2:	00 00 
    2db4:	66 e8 cc ea ff ff    	call   1886 <_printSentence>
    2dba:	e9 87 00             	jmp    2e44 <_ls+0x37a>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:174
			} else {
				int2str(information[i].lmaddress, tmp);
    2dbd:	67 66 8b 55 f4       	mov    edx,DWORD PTR [ebp-0xc]
    2dc2:	66 89 d0             	mov    eax,edx
    2dc5:	66 01 c0             	add    eax,eax
    2dc8:	66 01 d0             	add    eax,edx
    2dcb:	66 c1 e0 02          	shl    eax,0x2
    2dcf:	66 01 d0             	add    eax,edx
    2dd2:	66 c1 e0 02          	shl    eax,0x2
    2dd6:	66 01 d0             	add    eax,edx
    2dd9:	66 c1 e0 02          	shl    eax,0x2
    2ddd:	66 05 84 c0 00 00    	add    eax,0xc084
    2de3:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    2de7:	67 66 8d 55 d7       	lea    edx,[ebp-0x29]
    2dec:	67 66 89 54 24 04    	mov    DWORD PTR [esp+0x4],edx
    2df2:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    2df7:	66 e8 4d 08 00 00    	call   364a <_int2str>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:175
				printSentence(tmp, line, 40, strlen(tmp), purple);
    2dfd:	67 66 8d 45 d7       	lea    eax,[ebp-0x29]
    2e02:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    2e07:	66 e8 e8 05 00 00    	call   33f5 <_strlen>
    2e0d:	66 89 c2             	mov    edx,eax
    2e10:	66 a1 60 a2          	mov    eax,ds:0xa260
    2e14:	67 66 c7 44 24 10 0d 	mov    DWORD PTR [esp+0x10],0xd
    2e1b:	00 00 00 
    2e1e:	67 66 89 54 24 0c    	mov    DWORD PTR [esp+0xc],edx
    2e24:	67 66 c7 44 24 08 28 	mov    DWORD PTR [esp+0x8],0x28
    2e2b:	00 00 00 
    2e2e:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    2e34:	67 66 8d 45 d7       	lea    eax,[ebp-0x29]
    2e39:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    2e3e:	66 e8 42 ea ff ff    	call   1886 <_printSentence>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:177
			}
			printSentence(typeTable[information[i].type], line, 55, 1, purple);
    2e44:	66 8b 0e 60 a2       	mov    ecx,DWORD PTR ds:0xa260
    2e49:	67 66 8b 55 f4       	mov    edx,DWORD PTR [ebp-0xc]
    2e4e:	66 89 d0             	mov    eax,edx
    2e51:	66 01 c0             	add    eax,eax
    2e54:	66 01 d0             	add    eax,edx
    2e57:	66 c1 e0 02          	shl    eax,0x2
    2e5b:	66 01 d0             	add    eax,edx
    2e5e:	66 c1 e0 02          	shl    eax,0x2
    2e62:	66 01 d0             	add    eax,edx
    2e65:	66 c1 e0 02          	shl    eax,0x2
    2e69:	66 05 80 c0 00 00    	add    eax,0xc080
    2e6f:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    2e73:	67 66 8d 55 e6       	lea    edx,[ebp-0x1a]
    2e78:	66 01 d0             	add    eax,edx
    2e7b:	67 66 c7 44 24 10 0d 	mov    DWORD PTR [esp+0x10],0xd
    2e82:	00 00 00 
    2e85:	67 66 c7 44 24 0c 01 	mov    DWORD PTR [esp+0xc],0x1
    2e8c:	00 00 00 
    2e8f:	67 66 c7 44 24 08 37 	mov    DWORD PTR [esp+0x8],0x37
    2e96:	00 00 00 
    2e99:	67 66 89 4c 24 04    	mov    DWORD PTR [esp+0x4],ecx
    2e9f:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    2ea4:	66 e8 dc e9 ff ff    	call   1886 <_printSentence>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:178
			line += 1;
    2eaa:	66 a1 60 a2          	mov    eax,ds:0xa260
    2eae:	66 40                	inc    eax
    2eb0:	66 a3 60 a2          	mov    ds:0xa260,eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:161
	for (int i = 0; i < Len; ++i)
    2eb4:	67 66 ff 45 f4       	inc    DWORD PTR [ebp-0xc]
    2eb9:	67 66 83 7d f4 13    	cmp    DWORD PTR [ebp-0xc],0x13
    2ebf:	0f 8e b4 fc          	jle    2b77 <_ls+0xad>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:181
		}
	}
}
    2ec3:	90                   	nop
    2ec4:	66 83 c4 38          	add    esp,0x38
    2ec8:	66 5b                	pop    ebx
    2eca:	66 5f                	pop    edi
    2ecc:	66 5d                	pop    ebp
    2ece:	66 c3                	ret    

00002ed0 <_ps>:
ps():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:184

void ps()
{
    2ed0:	66 55                	push   ebp
    2ed2:	66 89 e5             	mov    ebp,esp
    2ed5:	66 57                	push   edi
    2ed7:	66 56                	push   esi
    2ed9:	66 53                	push   ebx
    2edb:	66 83 ec 7c          	sub    esp,0x7c
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:185
	char * head = "Id  ProcessName       Status\n";
    2edf:	67 66 c7 45 ec bd 80 	mov    DWORD PTR [ebp-0x14],0x80bd
    2ee6:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:186
	char status[6][10] = {"Origin", "ready", "running", "blocked", "suspend", "exit"};
    2ee8:	67 66 8d 45 ac       	lea    eax,[ebp-0x54]
    2eed:	66 bb c0 7c 00 00    	mov    ebx,0x7cc0
    2ef3:	66 ba 0f 00 00 00    	mov    edx,0xf
    2ef9:	66 89 c7             	mov    edi,eax
    2efc:	66 89 de             	mov    esi,ebx
    2eff:	66 89 d1             	mov    ecx,edx
    2f02:	66 f3 a5             	rep movs DWORD PTR es:[di],DWORD PTR ds:[si]
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:187
	int begin = 20;
    2f05:	67 66 c7 45 e8 14 00 	mov    DWORD PTR [ebp-0x18],0x14
    2f0c:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:188
	printSentence(head, line++, begin, strlen(head), purple);
    2f0e:	67 66 8b 45 ec       	mov    eax,DWORD PTR [ebp-0x14]
    2f13:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    2f18:	66 e8 d7 04 00 00    	call   33f5 <_strlen>
    2f1e:	66 89 c2             	mov    edx,eax
    2f21:	66 a1 60 a2          	mov    eax,ds:0xa260
    2f25:	67 66 8d 48 01       	lea    ecx,[eax+0x1]
    2f2a:	66 89 0e 60 a2       	mov    DWORD PTR ds:0xa260,ecx
    2f2f:	67 66 c7 44 24 10 0d 	mov    DWORD PTR [esp+0x10],0xd
    2f36:	00 00 00 
    2f39:	67 66 89 54 24 0c    	mov    DWORD PTR [esp+0xc],edx
    2f3f:	67 66 8b 55 e8       	mov    edx,DWORD PTR [ebp-0x18]
    2f44:	67 66 89 54 24 08    	mov    DWORD PTR [esp+0x8],edx
    2f4a:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    2f50:	67 66 8b 45 ec       	mov    eax,DWORD PTR [ebp-0x14]
    2f55:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    2f5a:	66 e8 26 e9 ff ff    	call   1886 <_printSentence>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:190
	char str[30];
	for (int i = 0; i < Len; ++i)
    2f60:	67 66 c7 45 f0 00 00 	mov    DWORD PTR [ebp-0x10],0x0
    2f67:	00 00 
    2f69:	e9 60 02             	jmp    31cc <_ps+0x2fc>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:192
	{
		if (processTable[i].id != -1 && processTable[i].status != Origin)
    2f6c:	67 66 8b 55 f0       	mov    edx,DWORD PTR [ebp-0x10]
    2f71:	66 89 d0             	mov    eax,edx
    2f74:	66 c1 e0 03          	shl    eax,0x3
    2f78:	66 01 d0             	add    eax,edx
    2f7b:	66 01 c0             	add    eax,eax
    2f7e:	66 01 d0             	add    eax,edx
    2f81:	66 c1 e0 02          	shl    eax,0x2
    2f85:	66 01 d0             	add    eax,edx
    2f88:	66 c1 e0 02          	shl    eax,0x2
    2f8c:	66 05 84 d1 00 00    	add    eax,0xd184
    2f92:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    2f96:	66 83 f8 ff          	cmp    eax,0xffffffff
    2f9a:	0f 84 29 02          	je     31c7 <_ps+0x2f7>
    2f9e:	67 66 8b 55 f0       	mov    edx,DWORD PTR [ebp-0x10]
    2fa3:	66 89 d0             	mov    eax,edx
    2fa6:	66 c1 e0 03          	shl    eax,0x3
    2faa:	66 01 d0             	add    eax,edx
    2fad:	66 01 c0             	add    eax,eax
    2fb0:	66 01 d0             	add    eax,edx
    2fb3:	66 c1 e0 02          	shl    eax,0x2
    2fb7:	66 01 d0             	add    eax,edx
    2fba:	66 c1 e0 02          	shl    eax,0x2
    2fbe:	66 05 90 d2 00 00    	add    eax,0xd290
    2fc4:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    2fc8:	66 85 c0             	test   eax,eax
    2fcb:	0f 84 f8 01          	je     31c7 <_ps+0x2f7>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:194
		{
			int2str(processTable[i].id, str);
    2fcf:	67 66 8b 55 f0       	mov    edx,DWORD PTR [ebp-0x10]
    2fd4:	66 89 d0             	mov    eax,edx
    2fd7:	66 c1 e0 03          	shl    eax,0x3
    2fdb:	66 01 d0             	add    eax,edx
    2fde:	66 01 c0             	add    eax,eax
    2fe1:	66 01 d0             	add    eax,edx
    2fe4:	66 c1 e0 02          	shl    eax,0x2
    2fe8:	66 01 d0             	add    eax,edx
    2feb:	66 c1 e0 02          	shl    eax,0x2
    2fef:	66 05 84 d1 00 00    	add    eax,0xd184
    2ff5:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    2ff9:	67 66 8d 55 8e       	lea    edx,[ebp-0x72]
    2ffe:	67 66 89 54 24 04    	mov    DWORD PTR [esp+0x4],edx
    3004:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    3009:	66 e8 3b 06 00 00    	call   364a <_int2str>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:195
			printSentence(str, line, begin + 1, strlen(str), purple);
    300f:	67 66 8d 45 8e       	lea    eax,[ebp-0x72]
    3014:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    3019:	66 e8 d6 03 00 00    	call   33f5 <_strlen>
    301f:	66 89 c2             	mov    edx,eax
    3022:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
    3027:	67 66 8d 48 01       	lea    ecx,[eax+0x1]
    302c:	66 a1 60 a2          	mov    eax,ds:0xa260
    3030:	67 66 c7 44 24 10 0d 	mov    DWORD PTR [esp+0x10],0xd
    3037:	00 00 00 
    303a:	67 66 89 54 24 0c    	mov    DWORD PTR [esp+0xc],edx
    3040:	67 66 89 4c 24 08    	mov    DWORD PTR [esp+0x8],ecx
    3046:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    304c:	67 66 8d 45 8e       	lea    eax,[ebp-0x72]
    3051:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    3056:	66 e8 2a e8 ff ff    	call   1886 <_printSentence>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:196
			printSentence(processTable[i].name, line, begin + 5, strlen(processTable[i].name), purple);
    305c:	67 66 8b 55 f0       	mov    edx,DWORD PTR [ebp-0x10]
    3061:	66 89 d0             	mov    eax,edx
    3064:	66 c1 e0 03          	shl    eax,0x3
    3068:	66 01 d0             	add    eax,edx
    306b:	66 01 c0             	add    eax,eax
    306e:	66 01 d0             	add    eax,edx
    3071:	66 c1 e0 02          	shl    eax,0x2
    3075:	66 01 d0             	add    eax,edx
    3078:	66 c1 e0 02          	shl    eax,0x2
    307c:	66 83 c0 30          	add    eax,0x30
    3080:	66 05 60 d1 00 00    	add    eax,0xd160
    3086:	66 83 c0 04          	add    eax,0x4
    308a:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    308f:	66 e8 60 03 00 00    	call   33f5 <_strlen>
    3095:	66 89 c3             	mov    ebx,eax
    3098:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
    309d:	67 66 8d 70 05       	lea    esi,[eax+0x5]
    30a2:	66 8b 0e 60 a2       	mov    ecx,DWORD PTR ds:0xa260
    30a7:	67 66 8b 55 f0       	mov    edx,DWORD PTR [ebp-0x10]
    30ac:	66 89 d0             	mov    eax,edx
    30af:	66 c1 e0 03          	shl    eax,0x3
    30b3:	66 01 d0             	add    eax,edx
    30b6:	66 01 c0             	add    eax,eax
    30b9:	66 01 d0             	add    eax,edx
    30bc:	66 c1 e0 02          	shl    eax,0x2
    30c0:	66 01 d0             	add    eax,edx
    30c3:	66 c1 e0 02          	shl    eax,0x2
    30c7:	66 83 c0 30          	add    eax,0x30
    30cb:	66 05 60 d1 00 00    	add    eax,0xd160
    30d1:	66 83 c0 04          	add    eax,0x4
    30d5:	67 66 c7 44 24 10 0d 	mov    DWORD PTR [esp+0x10],0xd
    30dc:	00 00 00 
    30df:	67 66 89 5c 24 0c    	mov    DWORD PTR [esp+0xc],ebx
    30e5:	67 66 89 74 24 08    	mov    DWORD PTR [esp+0x8],esi
    30eb:	67 66 89 4c 24 04    	mov    DWORD PTR [esp+0x4],ecx
    30f1:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    30f6:	66 e8 8a e7 ff ff    	call   1886 <_printSentence>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:197
			printSentence(status[processTable[i].status], line++, begin + 23, strlen(status[processTable[i].status]), purple);
    30fc:	67 66 8b 55 f0       	mov    edx,DWORD PTR [ebp-0x10]
    3101:	66 89 d0             	mov    eax,edx
    3104:	66 c1 e0 03          	shl    eax,0x3
    3108:	66 01 d0             	add    eax,edx
    310b:	66 01 c0             	add    eax,eax
    310e:	66 01 d0             	add    eax,edx
    3111:	66 c1 e0 02          	shl    eax,0x2
    3115:	66 01 d0             	add    eax,edx
    3118:	66 c1 e0 02          	shl    eax,0x2
    311c:	66 05 90 d2 00 00    	add    eax,0xd290
    3122:	67 66 8b 10          	mov    edx,DWORD PTR [eax]
    3126:	67 66 8d 4d ac       	lea    ecx,[ebp-0x54]
    312b:	66 89 d0             	mov    eax,edx
    312e:	66 c1 e0 02          	shl    eax,0x2
    3132:	66 01 d0             	add    eax,edx
    3135:	66 01 c0             	add    eax,eax
    3138:	66 01 c8             	add    eax,ecx
    313b:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    3140:	66 e8 af 02 00 00    	call   33f5 <_strlen>
    3146:	66 89 c3             	mov    ebx,eax
    3149:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
    314e:	67 66 8d 70 17       	lea    esi,[eax+0x17]
    3153:	66 8b 0e 60 a2       	mov    ecx,DWORD PTR ds:0xa260
    3158:	67 66 8d 41 01       	lea    eax,[ecx+0x1]
    315d:	66 a3 60 a2          	mov    ds:0xa260,eax
    3161:	67 66 8b 55 f0       	mov    edx,DWORD PTR [ebp-0x10]
    3166:	66 89 d0             	mov    eax,edx
    3169:	66 c1 e0 03          	shl    eax,0x3
    316d:	66 01 d0             	add    eax,edx
    3170:	66 01 c0             	add    eax,eax
    3173:	66 01 d0             	add    eax,edx
    3176:	66 c1 e0 02          	shl    eax,0x2
    317a:	66 01 d0             	add    eax,edx
    317d:	66 c1 e0 02          	shl    eax,0x2
    3181:	66 05 90 d2 00 00    	add    eax,0xd290
    3187:	67 66 8b 10          	mov    edx,DWORD PTR [eax]
    318b:	67 66 8d 7d ac       	lea    edi,[ebp-0x54]
    3190:	66 89 d0             	mov    eax,edx
    3193:	66 c1 e0 02          	shl    eax,0x2
    3197:	66 01 d0             	add    eax,edx
    319a:	66 01 c0             	add    eax,eax
    319d:	66 01 f8             	add    eax,edi
    31a0:	67 66 c7 44 24 10 0d 	mov    DWORD PTR [esp+0x10],0xd
    31a7:	00 00 00 
    31aa:	67 66 89 5c 24 0c    	mov    DWORD PTR [esp+0xc],ebx
    31b0:	67 66 89 74 24 08    	mov    DWORD PTR [esp+0x8],esi
    31b6:	67 66 89 4c 24 04    	mov    DWORD PTR [esp+0x4],ecx
    31bc:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    31c1:	66 e8 bf e6 ff ff    	call   1886 <_printSentence>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:190
	for (int i = 0; i < Len; ++i)
    31c7:	67 66 ff 45 f0       	inc    DWORD PTR [ebp-0x10]
    31cc:	67 66 83 7d f0 13    	cmp    DWORD PTR [ebp-0x10],0x13
    31d2:	0f 8e 96 fd          	jle    2f6c <_ps+0x9c>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:200
		}
	}
}
    31d6:	90                   	nop
    31d7:	66 83 c4 7c          	add    esp,0x7c
    31db:	66 5b                	pop    ebx
    31dd:	66 5e                	pop    esi
    31df:	66 5f                	pop    edi
    31e1:	66 5d                	pop    ebp
    31e3:	66 c3                	ret    

000031e5 <_kill>:
kill():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:203

void kill(int id)
{
    31e5:	66 55                	push   ebp
    31e7:	66 89 e5             	mov    ebp,esp
    31ea:	66 83 ec 08          	sub    esp,0x8
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:204
	if (id != 0) {
    31ee:	67 66 83 7d 08 00    	cmp    DWORD PTR [ebp+0x8],0x0
    31f4:	0f 84 f9 00          	je     32f1 <_kill+0x10c>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:205
		--ProcessSize;
    31f8:	66 a1 dc a7          	mov    eax,ds:0xa7dc
    31fc:	66 48                	dec    eax
    31fe:	66 a3 dc a7          	mov    ds:0xa7dc,eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:206
		processTable[id].status = exit;
    3202:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    3207:	66 89 d0             	mov    eax,edx
    320a:	66 c1 e0 03          	shl    eax,0x3
    320e:	66 01 d0             	add    eax,edx
    3211:	66 01 c0             	add    eax,eax
    3214:	66 01 d0             	add    eax,edx
    3217:	66 c1 e0 02          	shl    eax,0x2
    321b:	66 01 d0             	add    eax,edx
    321e:	66 c1 e0 02          	shl    eax,0x2
    3222:	66 05 90 d2 00 00    	add    eax,0xd290
    3228:	67 66 c7 00 05 00 00 	mov    DWORD PTR [eax],0x5
    322f:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:207
		processTable[id].id = -1;
    3230:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    3235:	66 89 d0             	mov    eax,edx
    3238:	66 c1 e0 03          	shl    eax,0x3
    323c:	66 01 d0             	add    eax,edx
    323f:	66 01 c0             	add    eax,eax
    3242:	66 01 d0             	add    eax,edx
    3245:	66 c1 e0 02          	shl    eax,0x2
    3249:	66 01 d0             	add    eax,edx
    324c:	66 c1 e0 02          	shl    eax,0x2
    3250:	66 05 84 d1 00 00    	add    eax,0xd184
    3256:	67 66 c7 00 ff ff ff 	mov    DWORD PTR [eax],0xffffffff
    325d:	ff 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:208
		release(memoryTable[processTable[id].blockNum].beginAddr, memoryTable[processTable[id].blockNum].endAddr);
    325e:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    3263:	66 89 d0             	mov    eax,edx
    3266:	66 c1 e0 03          	shl    eax,0x3
    326a:	66 01 d0             	add    eax,edx
    326d:	66 01 c0             	add    eax,eax
    3270:	66 01 d0             	add    eax,edx
    3273:	66 c1 e0 02          	shl    eax,0x2
    3277:	66 01 d0             	add    eax,edx
    327a:	66 c1 e0 02          	shl    eax,0x2
    327e:	66 05 88 d1 00 00    	add    eax,0xd188
    3284:	67 66 8b 10          	mov    edx,DWORD PTR [eax]
    3288:	66 89 d0             	mov    eax,edx
    328b:	66 01 c0             	add    eax,eax
    328e:	66 01 d0             	add    eax,edx
    3291:	66 c1 e0 03          	shl    eax,0x3
    3295:	66 05 c4 a3 00 00    	add    eax,0xa3c4
    329b:	67 66 8b 08          	mov    ecx,DWORD PTR [eax]
    329f:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    32a4:	66 89 d0             	mov    eax,edx
    32a7:	66 c1 e0 03          	shl    eax,0x3
    32ab:	66 01 d0             	add    eax,edx
    32ae:	66 01 c0             	add    eax,eax
    32b1:	66 01 d0             	add    eax,edx
    32b4:	66 c1 e0 02          	shl    eax,0x2
    32b8:	66 01 d0             	add    eax,edx
    32bb:	66 c1 e0 02          	shl    eax,0x2
    32bf:	66 05 88 d1 00 00    	add    eax,0xd188
    32c5:	67 66 8b 10          	mov    edx,DWORD PTR [eax]
    32c9:	66 89 d0             	mov    eax,edx
    32cc:	66 01 c0             	add    eax,eax
    32cf:	66 01 d0             	add    eax,edx
    32d2:	66 c1 e0 03          	shl    eax,0x3
    32d6:	66 05 c0 a3 00 00    	add    eax,0xa3c0
    32dc:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    32e0:	67 66 89 4c 24 04    	mov    DWORD PTR [esp+0x4],ecx
    32e6:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    32eb:	66 e8 32 3e 00 00    	call   7123 <_release>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:210
	}
}
    32f1:	90                   	nop
    32f2:	66 c9                	leave  
    32f4:	66 c3                	ret    

000032f6 <_initial>:
initial():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:213

void initial()
{
    32f6:	66 55                	push   ebp
    32f8:	66 89 e5             	mov    ebp,esp
    32fb:	66 83 ec 04          	sub    esp,0x4
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:214
	initialFile();
    32ff:	66 e8 61 07 00 00    	call   3a66 <_initialFile>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:215
	initialScreen(1);
    3305:	67 66 c7 04 24 01 00 	mov    DWORD PTR [esp],0x1
    330c:	00 00 
    330e:	66 e8 60 f4 ff ff    	call   2774 <_initialScreen>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:216
	initialProcessTable();
    3314:	66 e8 fc 17 00 00    	call   4b16 <_initialProcessTable>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:217
	initialMemoryTable();
    331a:	66 e8 aa 30 00 00    	call   63ca <_initialMemoryTable>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:218
	initSemaphore();
    3320:	66 e8 19 42 00 00    	call   753f <_initSemaphore>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:219
}
    3326:	90                   	nop
    3327:	66 c9                	leave  
    3329:	66 c3                	ret    

0000332b <_getKey>:
getKey():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:223

int tmpInGetKey;
int getKey(short in)
{
    332b:	66 55                	push   ebp
    332d:	66 89 e5             	mov    ebp,esp
    3330:	66 83 ec 0c          	sub    esp,0xc
    3334:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    3339:	67 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:224
	enqueue(&KeyboardQue, in);
    333d:	67 66 0f bf 45 fc    	movsx  eax,WORD PTR [ebp-0x4]
    3343:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    3349:	67 66 c7 04 24 60 a3 	mov    DWORD PTR [esp],0xa360
    3350:	00 00 
    3352:	66 e8 40 46 00 00    	call   7998 <_enqueue>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:225
	if (curPageId == processTable[curProcessId].pageID)
    3358:	66 8b 16 70 e9       	mov    edx,DWORD PTR ds:0xe970
    335d:	66 89 d0             	mov    eax,edx
    3360:	66 c1 e0 03          	shl    eax,0x3
    3364:	66 01 d0             	add    eax,edx
    3367:	66 01 c0             	add    eax,eax
    336a:	66 01 d0             	add    eax,edx
    336d:	66 c1 e0 02          	shl    eax,0x2
    3371:	66 01 d0             	add    eax,edx
    3374:	66 c1 e0 02          	shl    eax,0x2
    3378:	66 05 8c d2 00 00    	add    eax,0xd28c
    337e:	67 66 8b 10          	mov    edx,DWORD PTR [eax]
    3382:	66 a1 80 a2          	mov    eax,ds:0xa280
    3386:	66 39 c2             	cmp    edx,eax
    3389:	75 1f                	jne    33aa <_getKey+0x7f>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:227
	{
		dequeue(&KeyboardQue, &tmpInGetKey);
    338b:	67 66 c7 44 24 04 2c 	mov    DWORD PTR [esp+0x4],0xea2c
    3392:	ea 00 00 
    3395:	67 66 c7 04 24 60 a3 	mov    DWORD PTR [esp],0xa360
    339c:	00 00 
    339e:	66 e8 61 46 00 00    	call   7a05 <_dequeue>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:228
		return tmpInGetKey;
    33a4:	66 a1 2c ea          	mov    eax,ds:0xea2c
    33a8:	eb 06                	jmp    33b0 <_getKey+0x85>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:230
	} else {
		return 0xff;
    33aa:	66 b8 ff 00 00 00    	mov    eax,0xff
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:232
	}
}
    33b0:	66 c9                	leave  
    33b2:	66 c3                	ret    

000033b4 <_judgePage>:
judgePage():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:235

int judgePage()
{
    33b4:	66 55                	push   ebp
    33b6:	66 89 e5             	mov    ebp,esp
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:236
	return (processTable[curProcessId].pageID == curPageId ? 1 : 0);
    33b9:	66 8b 16 70 e9       	mov    edx,DWORD PTR ds:0xe970
    33be:	66 89 d0             	mov    eax,edx
    33c1:	66 c1 e0 03          	shl    eax,0x3
    33c5:	66 01 d0             	add    eax,edx
    33c8:	66 01 c0             	add    eax,eax
    33cb:	66 01 d0             	add    eax,edx
    33ce:	66 c1 e0 02          	shl    eax,0x2
    33d2:	66 01 d0             	add    eax,edx
    33d5:	66 c1 e0 02          	shl    eax,0x2
    33d9:	66 05 8c d2 00 00    	add    eax,0xd28c
    33df:	67 66 8b 10          	mov    edx,DWORD PTR [eax]
    33e3:	66 a1 80 a2          	mov    eax,ds:0xa280
    33e7:	66 39 c2             	cmp    edx,eax
    33ea:	0f 94 c0             	sete   al
    33ed:	66 0f b6 c0          	movzx  eax,al
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:237
}
    33f1:	66 5d                	pop    ebp
    33f3:	66 c3                	ret    

000033f5 <_strlen>:
strlen():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:244


//////////// string /////////////////
// ×¢Òâ×Ö·û´®ÒªÓÐ'0'½áÎ²¡£
int strlen(char * sen)
{
    33f5:	66 55                	push   ebp
    33f7:	66 89 e5             	mov    ebp,esp
    33fa:	66 83 ec 04          	sub    esp,0x4
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:245
	int i = 0;
    33fe:	67 66 c7 45 fc 00 00 	mov    DWORD PTR [ebp-0x4],0x0
    3405:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:246
	while (sen[i]) { ++i; }
    3407:	eb 05                	jmp    340e <_strlen+0x19>
    3409:	67 66 ff 45 fc       	inc    DWORD PTR [ebp-0x4]
    340e:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    3413:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    3418:	66 01 d0             	add    eax,edx
    341b:	67 8a 00             	mov    al,BYTE PTR [eax]
    341e:	84 c0                	test   al,al
    3420:	75 e7                	jne    3409 <_strlen+0x14>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:247
	return i;
    3422:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:248
}
    3427:	66 c9                	leave  
    3429:	66 c3                	ret    

0000342b <_concate>:
concate():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:252


void concate(char * sour, char * append)
{
    342b:	66 55                	push   ebp
    342d:	66 89 e5             	mov    ebp,esp
    3430:	66 83 ec 10          	sub    esp,0x10
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:253
	int lenOfAppend = strlen(append);
    3434:	67 66 8b 45 0c       	mov    eax,DWORD PTR [ebp+0xc]
    3439:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    343e:	66 e8 b1 ff ff ff    	call   33f5 <_strlen>
    3444:	67 66 89 45 f8       	mov    DWORD PTR [ebp-0x8],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:254
	int lenOfSour = strlen(sour);
    3449:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    344e:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    3453:	66 e8 9c ff ff ff    	call   33f5 <_strlen>
    3459:	67 66 89 45 f4       	mov    DWORD PTR [ebp-0xc],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:255
	for (int i = 0; i < lenOfAppend; ++i)
    345e:	67 66 c7 45 fc 00 00 	mov    DWORD PTR [ebp-0x4],0x0
    3465:	00 00 
    3467:	eb 30                	jmp    3499 <_concate+0x6e>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:257
	{
		sour[i + lenOfSour] = append[i];
    3469:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    346e:	67 66 8b 45 f4       	mov    eax,DWORD PTR [ebp-0xc]
    3473:	66 01 d0             	add    eax,edx
    3476:	66 89 c2             	mov    edx,eax
    3479:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    347e:	66 01 c2             	add    edx,eax
    3481:	67 66 8b 4d fc       	mov    ecx,DWORD PTR [ebp-0x4]
    3486:	67 66 8b 45 0c       	mov    eax,DWORD PTR [ebp+0xc]
    348b:	66 01 c8             	add    eax,ecx
    348e:	67 8a 00             	mov    al,BYTE PTR [eax]
    3491:	67 88 02             	mov    BYTE PTR [edx],al
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:255
	for (int i = 0; i < lenOfAppend; ++i)
    3494:	67 66 ff 45 fc       	inc    DWORD PTR [ebp-0x4]
    3499:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
    349e:	67 66 3b 45 f8       	cmp    eax,DWORD PTR [ebp-0x8]
    34a3:	7c c4                	jl     3469 <_concate+0x3e>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:259
	}
	sour[lenOfAppend + lenOfSour] = '\0';
    34a5:	67 66 8b 55 f8       	mov    edx,DWORD PTR [ebp-0x8]
    34aa:	67 66 8b 45 f4       	mov    eax,DWORD PTR [ebp-0xc]
    34af:	66 01 d0             	add    eax,edx
    34b2:	66 89 c2             	mov    edx,eax
    34b5:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    34ba:	66 01 d0             	add    eax,edx
    34bd:	67 c6 00 00          	mov    BYTE PTR [eax],0x0
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:260
}
    34c1:	90                   	nop
    34c2:	66 c9                	leave  
    34c4:	66 c3                	ret    

000034c6 <_strcmp>:
strcmp():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:263

int strcmp(char * l, char * r)
{
    34c6:	66 55                	push   ebp
    34c8:	66 89 e5             	mov    ebp,esp
    34cb:	66 83 ec 08          	sub    esp,0x8
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:264
	int i = 0, j = 0;
    34cf:	67 66 c7 45 fc 00 00 	mov    DWORD PTR [ebp-0x4],0x0
    34d6:	00 00 
    34d8:	67 66 c7 45 f8 00 00 	mov    DWORD PTR [ebp-0x8],0x0
    34df:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:265
	for (; l[i] && r[i]; ++i, ++j)
    34e1:	eb 64                	jmp    3547 <_strcmp+0x81>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:267
	{
		if (l[i] < r[j]) {
    34e3:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    34e8:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    34ed:	66 01 d0             	add    eax,edx
    34f0:	67 8a 10             	mov    dl,BYTE PTR [eax]
    34f3:	67 66 8b 4d f8       	mov    ecx,DWORD PTR [ebp-0x8]
    34f8:	67 66 8b 45 0c       	mov    eax,DWORD PTR [ebp+0xc]
    34fd:	66 01 c8             	add    eax,ecx
    3500:	67 8a 00             	mov    al,BYTE PTR [eax]
    3503:	38 c2                	cmp    dl,al
    3505:	7d 09                	jge    3510 <_strcmp+0x4a>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:268
			return -1;
    3507:	66 b8 ff ff ff ff    	mov    eax,0xffffffff
    350d:	e9 c7 00             	jmp    35d7 <_strcmp+0x111>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:269
		} else if (l[i] > r[j]) {
    3510:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    3515:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    351a:	66 01 d0             	add    eax,edx
    351d:	67 8a 10             	mov    dl,BYTE PTR [eax]
    3520:	67 66 8b 4d f8       	mov    ecx,DWORD PTR [ebp-0x8]
    3525:	67 66 8b 45 0c       	mov    eax,DWORD PTR [ebp+0xc]
    352a:	66 01 c8             	add    eax,ecx
    352d:	67 8a 00             	mov    al,BYTE PTR [eax]
    3530:	38 c2                	cmp    dl,al
    3532:	7e 09                	jle    353d <_strcmp+0x77>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:270
			return 1;
    3534:	66 b8 01 00 00 00    	mov    eax,0x1
    353a:	e9 9a 00             	jmp    35d7 <_strcmp+0x111>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:265
	for (; l[i] && r[i]; ++i, ++j)
    353d:	67 66 ff 45 fc       	inc    DWORD PTR [ebp-0x4]
    3542:	67 66 ff 45 f8       	inc    DWORD PTR [ebp-0x8]
    3547:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    354c:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    3551:	66 01 d0             	add    eax,edx
    3554:	67 8a 00             	mov    al,BYTE PTR [eax]
    3557:	84 c0                	test   al,al
    3559:	74 16                	je     3571 <_strcmp+0xab>
    355b:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    3560:	67 66 8b 45 0c       	mov    eax,DWORD PTR [ebp+0xc]
    3565:	66 01 d0             	add    eax,edx
    3568:	67 8a 00             	mov    al,BYTE PTR [eax]
    356b:	84 c0                	test   al,al
    356d:	0f 85 72 ff          	jne    34e3 <_strcmp+0x1d>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:273
		}
	}
	if (!l[i] && r[j]) {
    3571:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    3576:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    357b:	66 01 d0             	add    eax,edx
    357e:	67 8a 00             	mov    al,BYTE PTR [eax]
    3581:	84 c0                	test   al,al
    3583:	75 1c                	jne    35a1 <_strcmp+0xdb>
    3585:	67 66 8b 55 f8       	mov    edx,DWORD PTR [ebp-0x8]
    358a:	67 66 8b 45 0c       	mov    eax,DWORD PTR [ebp+0xc]
    358f:	66 01 d0             	add    eax,edx
    3592:	67 8a 00             	mov    al,BYTE PTR [eax]
    3595:	84 c0                	test   al,al
    3597:	74 08                	je     35a1 <_strcmp+0xdb>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:274
		return -1;
    3599:	66 b8 ff ff ff ff    	mov    eax,0xffffffff
    359f:	eb 36                	jmp    35d7 <_strcmp+0x111>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:275
	} else if (l[i] && !r[j]) {
    35a1:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    35a6:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    35ab:	66 01 d0             	add    eax,edx
    35ae:	67 8a 00             	mov    al,BYTE PTR [eax]
    35b1:	84 c0                	test   al,al
    35b3:	74 1c                	je     35d1 <_strcmp+0x10b>
    35b5:	67 66 8b 55 f8       	mov    edx,DWORD PTR [ebp-0x8]
    35ba:	67 66 8b 45 0c       	mov    eax,DWORD PTR [ebp+0xc]
    35bf:	66 01 d0             	add    eax,edx
    35c2:	67 8a 00             	mov    al,BYTE PTR [eax]
    35c5:	84 c0                	test   al,al
    35c7:	75 08                	jne    35d1 <_strcmp+0x10b>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:276
		return 1;
    35c9:	66 b8 01 00 00 00    	mov    eax,0x1
    35cf:	eb 06                	jmp    35d7 <_strcmp+0x111>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:278
	} else {
		return 0;
    35d1:	66 b8 00 00 00 00    	mov    eax,0x0
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:280
	}
}
    35d7:	66 c9                	leave  
    35d9:	66 c3                	ret    

000035db <_strncpy>:
strncpy():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:283

void strncpy(char * sour, char * des, int len)
{
    35db:	66 55                	push   ebp
    35dd:	66 89 e5             	mov    ebp,esp
    35e0:	66 83 ec 04          	sub    esp,0x4
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:284
	int i = 0;
    35e4:	67 66 c7 45 fc 00 00 	mov    DWORD PTR [ebp-0x4],0x0
    35eb:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:285
	while (sour[i] && i < len) {
    35ed:	eb 25                	jmp    3614 <_strncpy+0x39>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:286
		des[i] = sour[i];
    35ef:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    35f4:	67 66 8b 45 0c       	mov    eax,DWORD PTR [ebp+0xc]
    35f9:	66 01 c2             	add    edx,eax
    35fc:	67 66 8b 4d fc       	mov    ecx,DWORD PTR [ebp-0x4]
    3601:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    3606:	66 01 c8             	add    eax,ecx
    3609:	67 8a 00             	mov    al,BYTE PTR [eax]
    360c:	67 88 02             	mov    BYTE PTR [edx],al
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:287
		++i;
    360f:	67 66 ff 45 fc       	inc    DWORD PTR [ebp-0x4]
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:285
	while (sour[i] && i < len) {
    3614:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    3619:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    361e:	66 01 d0             	add    eax,edx
    3621:	67 8a 00             	mov    al,BYTE PTR [eax]
    3624:	84 c0                	test   al,al
    3626:	74 0c                	je     3634 <_strncpy+0x59>
    3628:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
    362d:	67 66 3b 45 10       	cmp    eax,DWORD PTR [ebp+0x10]
    3632:	7c bb                	jl     35ef <_strncpy+0x14>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:289
	}
	des[i] = '\0';
    3634:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    3639:	67 66 8b 45 0c       	mov    eax,DWORD PTR [ebp+0xc]
    363e:	66 01 d0             	add    eax,edx
    3641:	67 c6 00 00          	mov    BYTE PTR [eax],0x0
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:290
}
    3645:	90                   	nop
    3646:	66 c9                	leave  
    3648:	66 c3                	ret    

0000364a <_int2str>:
int2str():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:293

void int2str(int org, char * str)
{
    364a:	66 55                	push   ebp
    364c:	66 89 e5             	mov    ebp,esp
    364f:	66 53                	push   ebx
    3651:	66 83 ec 0c          	sub    esp,0xc
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:294
	int num = 0;
    3655:	67 66 c7 45 f8 00 00 	mov    DWORD PTR [ebp-0x8],0x0
    365c:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:295
	int cp = org;
    365e:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    3663:	67 66 89 45 f4       	mov    DWORD PTR [ebp-0xc],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:296
	while (cp != 0)
    3668:	eb 29                	jmp    3693 <_int2str+0x49>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:298
	{
		cp /= 10;
    366a:	67 66 8b 4d f4       	mov    ecx,DWORD PTR [ebp-0xc]
    366f:	66 b8 67 66 66 66    	mov    eax,0x66666667
    3675:	66 f7 e9             	imul   ecx
    3678:	66 c1 fa 02          	sar    edx,0x2
    367c:	66 89 c8             	mov    eax,ecx
    367f:	66 c1 f8 1f          	sar    eax,0x1f
    3683:	66 29 c2             	sub    edx,eax
    3686:	66 89 d0             	mov    eax,edx
    3689:	67 66 89 45 f4       	mov    DWORD PTR [ebp-0xc],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:299
		++num;
    368e:	67 66 ff 45 f8       	inc    DWORD PTR [ebp-0x8]
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:296
	while (cp != 0)
    3693:	67 66 83 7d f4 00    	cmp    DWORD PTR [ebp-0xc],0x0
    3699:	75 cf                	jne    366a <_int2str+0x20>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:301
	}
	if (org == 0)
    369b:	67 66 83 7d 08 00    	cmp    DWORD PTR [ebp+0x8],0x0
    36a1:	75 09                	jne    36ac <_int2str+0x62>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:302
		num = 1;
    36a3:	67 66 c7 45 f8 01 00 	mov    DWORD PTR [ebp-0x8],0x1
    36aa:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:303
	str[num--] = '\0';
    36ac:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
    36b1:	67 66 8d 50 ff       	lea    edx,[eax-0x1]
    36b6:	67 66 89 55 f8       	mov    DWORD PTR [ebp-0x8],edx
    36bb:	66 89 c2             	mov    edx,eax
    36be:	67 66 8b 45 0c       	mov    eax,DWORD PTR [ebp+0xc]
    36c3:	66 01 d0             	add    eax,edx
    36c6:	67 c6 00 00          	mov    BYTE PTR [eax],0x0
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:304
	for (int i = num; i >= 0; --i)
    36ca:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
    36cf:	67 66 89 45 f0       	mov    DWORD PTR [ebp-0x10],eax
    36d4:	eb 70                	jmp    3746 <_int2str+0xfc>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:306
	{
		str[i] = org % 10 + 48;
    36d6:	67 66 8b 55 f0       	mov    edx,DWORD PTR [ebp-0x10]
    36db:	67 66 8b 45 0c       	mov    eax,DWORD PTR [ebp+0xc]
    36e0:	67 66 8d 1c 02       	lea    ebx,[edx+eax*1]
    36e5:	67 66 8b 4d 08       	mov    ecx,DWORD PTR [ebp+0x8]
    36ea:	66 b8 67 66 66 66    	mov    eax,0x66666667
    36f0:	66 f7 e9             	imul   ecx
    36f3:	66 c1 fa 02          	sar    edx,0x2
    36f7:	66 89 c8             	mov    eax,ecx
    36fa:	66 c1 f8 1f          	sar    eax,0x1f
    36fe:	66 29 c2             	sub    edx,eax
    3701:	66 89 d0             	mov    eax,edx
    3704:	66 c1 e0 02          	shl    eax,0x2
    3708:	66 01 d0             	add    eax,edx
    370b:	66 01 c0             	add    eax,eax
    370e:	66 29 c1             	sub    ecx,eax
    3711:	66 89 ca             	mov    edx,ecx
    3714:	88 d0                	mov    al,dl
    3716:	66 83 c0 30          	add    eax,0x30
    371a:	67 88 03             	mov    BYTE PTR [ebx],al
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:307
		org /= 10;
    371d:	67 66 8b 4d 08       	mov    ecx,DWORD PTR [ebp+0x8]
    3722:	66 b8 67 66 66 66    	mov    eax,0x66666667
    3728:	66 f7 e9             	imul   ecx
    372b:	66 c1 fa 02          	sar    edx,0x2
    372f:	66 89 c8             	mov    eax,ecx
    3732:	66 c1 f8 1f          	sar    eax,0x1f
    3736:	66 29 c2             	sub    edx,eax
    3739:	66 89 d0             	mov    eax,edx
    373c:	67 66 89 45 08       	mov    DWORD PTR [ebp+0x8],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:304
	for (int i = num; i >= 0; --i)
    3741:	67 66 ff 4d f0       	dec    DWORD PTR [ebp-0x10]
    3746:	67 66 83 7d f0 00    	cmp    DWORD PTR [ebp-0x10],0x0
    374c:	79 88                	jns    36d6 <_int2str+0x8c>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:309
	}
}
    374e:	90                   	nop
    374f:	66 83 c4 0c          	add    esp,0xc
    3753:	66 5b                	pop    ebx
    3755:	66 5d                	pop    ebp
    3757:	66 c3                	ret    

00003759 <_hashfun>:
hashfun():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:318

////////////// File ////////////////



int hashfun(char * key) {
    3759:	66 55                	push   ebp
    375b:	66 89 e5             	mov    ebp,esp
    375e:	66 83 ec 0c          	sub    esp,0xc
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:319
	int weight = 29;
    3762:	67 66 c7 45 f4 1d 00 	mov    DWORD PTR [ebp-0xc],0x1d
    3769:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:320
	int i = 0;
    376b:	67 66 c7 45 fc 00 00 	mov    DWORD PTR [ebp-0x4],0x0
    3772:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:321
	int ret = 0;
    3774:	67 66 c7 45 f8 00 00 	mov    DWORD PTR [ebp-0x8],0x0
    377b:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:322
	while (key[i]) {
    377d:	eb 3a                	jmp    37b9 <_hashfun+0x60>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:323
		ret = (ret + key[i] * weight) % Len;
    377f:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    3784:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    3789:	66 01 d0             	add    eax,edx
    378c:	67 8a 00             	mov    al,BYTE PTR [eax]
    378f:	66 0f be c0          	movsx  eax,al
    3793:	67 66 0f af 45 f4    	imul   eax,DWORD PTR [ebp-0xc]
    3799:	66 89 c2             	mov    edx,eax
    379c:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
    37a1:	66 01 d0             	add    eax,edx
    37a4:	66 b9 14 00 00 00    	mov    ecx,0x14
    37aa:	66 99                	cdq    
    37ac:	66 f7 f9             	idiv   ecx
    37af:	67 66 89 55 f8       	mov    DWORD PTR [ebp-0x8],edx
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:324
		++i;
    37b4:	67 66 ff 45 fc       	inc    DWORD PTR [ebp-0x4]
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:322
	while (key[i]) {
    37b9:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    37be:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    37c3:	66 01 d0             	add    eax,edx
    37c6:	67 8a 00             	mov    al,BYTE PTR [eax]
    37c9:	84 c0                	test   al,al
    37cb:	75 b2                	jne    377f <_hashfun+0x26>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:326
	}
	return ret;
    37cd:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:327
}
    37d2:	66 c9                	leave  
    37d4:	66 c3                	ret    

000037d6 <_hash>:
hash():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:330

int hash(char * key, struct info record)
{
    37d6:	66 55                	push   ebp
    37d8:	66 89 e5             	mov    ebp,esp
    37db:	66 83 ec 18          	sub    esp,0x18
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:331
	int inicode = hashfun(key);
    37df:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    37e4:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    37e9:	66 e8 6a ff ff ff    	call   3759 <_hashfun>
    37ef:	67 66 89 45 f4       	mov    DWORD PTR [ebp-0xc],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:332
	int code = inicode, i = 1;
    37f4:	67 66 8b 45 f4       	mov    eax,DWORD PTR [ebp-0xc]
    37f9:	67 66 89 45 fc       	mov    DWORD PTR [ebp-0x4],eax
    37fe:	67 66 c7 45 f8 01 00 	mov    DWORD PTR [ebp-0x8],0x1
    3805:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:333
	while (information[code].type != null) {
    3807:	eb 2b                	jmp    3834 <_hash+0x5e>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:334
		code = (inicode + i * i) % Len;
    3809:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
    380e:	67 66 0f af 45 f8    	imul   eax,DWORD PTR [ebp-0x8]
    3814:	66 89 c2             	mov    edx,eax
    3817:	67 66 8b 45 f4       	mov    eax,DWORD PTR [ebp-0xc]
    381c:	66 01 d0             	add    eax,edx
    381f:	66 b9 14 00 00 00    	mov    ecx,0x14
    3825:	66 99                	cdq    
    3827:	66 f7 f9             	idiv   ecx
    382a:	67 66 89 55 fc       	mov    DWORD PTR [ebp-0x4],edx
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:335
		++i;
    382f:	67 66 ff 45 f8       	inc    DWORD PTR [ebp-0x8]
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:333
	while (information[code].type != null) {
    3834:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    3839:	66 89 d0             	mov    eax,edx
    383c:	66 01 c0             	add    eax,eax
    383f:	66 01 d0             	add    eax,edx
    3842:	66 c1 e0 02          	shl    eax,0x2
    3846:	66 01 d0             	add    eax,edx
    3849:	66 c1 e0 02          	shl    eax,0x2
    384d:	66 01 d0             	add    eax,edx
    3850:	66 c1 e0 02          	shl    eax,0x2
    3854:	66 05 80 c0 00 00    	add    eax,0xc080
    385a:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    385e:	66 85 c0             	test   eax,eax
    3861:	75 a6                	jne    3809 <_hash+0x33>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:339
	}


	information[code].type = record.type;
    3863:	67 66 8b 4d 2c       	mov    ecx,DWORD PTR [ebp+0x2c]
    3868:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    386d:	66 89 d0             	mov    eax,edx
    3870:	66 01 c0             	add    eax,eax
    3873:	66 01 d0             	add    eax,edx
    3876:	66 c1 e0 02          	shl    eax,0x2
    387a:	66 01 d0             	add    eax,edx
    387d:	66 c1 e0 02          	shl    eax,0x2
    3881:	66 01 d0             	add    eax,edx
    3884:	66 c1 e0 02          	shl    eax,0x2
    3888:	66 05 80 c0 00 00    	add    eax,0xc080
    388e:	67 66 89 08          	mov    DWORD PTR [eax],ecx
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:340
	strncpy(record.name, information[code].name, strlen(record.name));
    3892:	67 66 8d 45 0c       	lea    eax,[ebp+0xc]
    3897:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    389c:	66 e8 53 fb ff ff    	call   33f5 <_strlen>
    38a2:	66 89 c1             	mov    ecx,eax
    38a5:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    38aa:	66 89 d0             	mov    eax,edx
    38ad:	66 01 c0             	add    eax,eax
    38b0:	66 01 d0             	add    eax,edx
    38b3:	66 c1 e0 02          	shl    eax,0x2
    38b7:	66 01 d0             	add    eax,edx
    38ba:	66 c1 e0 02          	shl    eax,0x2
    38be:	66 01 d0             	add    eax,edx
    38c1:	66 c1 e0 02          	shl    eax,0x2
    38c5:	66 05 60 c0 00 00    	add    eax,0xc060
    38cb:	67 66 89 4c 24 08    	mov    DWORD PTR [esp+0x8],ecx
    38d1:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    38d7:	67 66 8d 45 0c       	lea    eax,[ebp+0xc]
    38dc:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    38e1:	66 e8 f4 fc ff ff    	call   35db <_strncpy>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:341
	information[code].size = record.size;
    38e7:	67 66 8b 4d 34       	mov    ecx,DWORD PTR [ebp+0x34]
    38ec:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    38f1:	66 89 d0             	mov    eax,edx
    38f4:	66 01 c0             	add    eax,eax
    38f7:	66 01 d0             	add    eax,edx
    38fa:	66 c1 e0 02          	shl    eax,0x2
    38fe:	66 01 d0             	add    eax,edx
    3901:	66 c1 e0 02          	shl    eax,0x2
    3905:	66 01 d0             	add    eax,edx
    3908:	66 c1 e0 02          	shl    eax,0x2
    390c:	66 05 88 c0 00 00    	add    eax,0xc088
    3912:	67 66 89 08          	mov    DWORD PTR [eax],ecx
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:342
	information[code].lmaddress = record.lmaddress;
    3916:	67 66 8b 4d 30       	mov    ecx,DWORD PTR [ebp+0x30]
    391b:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    3920:	66 89 d0             	mov    eax,edx
    3923:	66 01 c0             	add    eax,eax
    3926:	66 01 d0             	add    eax,edx
    3929:	66 c1 e0 02          	shl    eax,0x2
    392d:	66 01 d0             	add    eax,edx
    3930:	66 c1 e0 02          	shl    eax,0x2
    3934:	66 01 d0             	add    eax,edx
    3937:	66 c1 e0 02          	shl    eax,0x2
    393b:	66 05 84 c0 00 00    	add    eax,0xc084
    3941:	67 66 89 08          	mov    DWORD PTR [eax],ecx
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:343
	information[code].deleted = record.deleted;
    3945:	67 66 8b 4d 38       	mov    ecx,DWORD PTR [ebp+0x38]
    394a:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    394f:	66 89 d0             	mov    eax,edx
    3952:	66 01 c0             	add    eax,eax
    3955:	66 01 d0             	add    eax,edx
    3958:	66 c1 e0 02          	shl    eax,0x2
    395c:	66 01 d0             	add    eax,edx
    395f:	66 c1 e0 02          	shl    eax,0x2
    3963:	66 01 d0             	add    eax,edx
    3966:	66 c1 e0 02          	shl    eax,0x2
    396a:	66 05 8c c0 00 00    	add    eax,0xc08c
    3970:	67 66 89 08          	mov    DWORD PTR [eax],ecx
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:344
	return code;
    3974:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:345
}
    3979:	66 c9                	leave  
    397b:	66 c3                	ret    

0000397d <_find>:
find():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:348

int find(char * key)
{
    397d:	66 55                	push   ebp
    397f:	66 89 e5             	mov    ebp,esp
    3982:	66 83 ec 14          	sub    esp,0x14
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:349
	int inicode = hashfun(key);
    3986:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    398b:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    3990:	66 e8 c3 fd ff ff    	call   3759 <_hashfun>
    3996:	67 66 89 45 f4       	mov    DWORD PTR [ebp-0xc],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:350
	int code = inicode, i = 1;
    399b:	67 66 8b 45 f4       	mov    eax,DWORD PTR [ebp-0xc]
    39a0:	67 66 89 45 fc       	mov    DWORD PTR [ebp-0x4],eax
    39a5:	67 66 c7 45 f8 01 00 	mov    DWORD PTR [ebp-0x8],0x1
    39ac:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:351
	while (information[code].type == null || strcmp(key, information[code].name) != 0) {
    39ae:	eb 3b                	jmp    39eb <_find+0x6e>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:352
		code = (inicode + i * i) % Len;
    39b0:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
    39b5:	67 66 0f af 45 f8    	imul   eax,DWORD PTR [ebp-0x8]
    39bb:	66 89 c2             	mov    edx,eax
    39be:	67 66 8b 45 f4       	mov    eax,DWORD PTR [ebp-0xc]
    39c3:	66 01 d0             	add    eax,edx
    39c6:	66 b9 14 00 00 00    	mov    ecx,0x14
    39cc:	66 99                	cdq    
    39ce:	66 f7 f9             	idiv   ecx
    39d1:	67 66 89 55 fc       	mov    DWORD PTR [ebp-0x4],edx
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:353
		++i;
    39d6:	67 66 ff 45 f8       	inc    DWORD PTR [ebp-0x8]
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:354
		if (i > Len)
    39db:	67 66 83 7d f8 14    	cmp    DWORD PTR [ebp-0x8],0x14
    39e1:	7e 08                	jle    39eb <_find+0x6e>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:355
			return -1;
    39e3:	66 b8 ff ff ff ff    	mov    eax,0xffffffff
    39e9:	eb 77                	jmp    3a62 <_find+0xe5>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:351
	while (information[code].type == null || strcmp(key, information[code].name) != 0) {
    39eb:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    39f0:	66 89 d0             	mov    eax,edx
    39f3:	66 01 c0             	add    eax,eax
    39f6:	66 01 d0             	add    eax,edx
    39f9:	66 c1 e0 02          	shl    eax,0x2
    39fd:	66 01 d0             	add    eax,edx
    3a00:	66 c1 e0 02          	shl    eax,0x2
    3a04:	66 01 d0             	add    eax,edx
    3a07:	66 c1 e0 02          	shl    eax,0x2
    3a0b:	66 05 80 c0 00 00    	add    eax,0xc080
    3a11:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    3a15:	66 85 c0             	test   eax,eax
    3a18:	74 96                	je     39b0 <_find+0x33>
    3a1a:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    3a1f:	66 89 d0             	mov    eax,edx
    3a22:	66 01 c0             	add    eax,eax
    3a25:	66 01 d0             	add    eax,edx
    3a28:	66 c1 e0 02          	shl    eax,0x2
    3a2c:	66 01 d0             	add    eax,edx
    3a2f:	66 c1 e0 02          	shl    eax,0x2
    3a33:	66 01 d0             	add    eax,edx
    3a36:	66 c1 e0 02          	shl    eax,0x2
    3a3a:	66 05 60 c0 00 00    	add    eax,0xc060
    3a40:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    3a46:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    3a4b:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    3a50:	66 e8 70 fa ff ff    	call   34c6 <_strcmp>
    3a56:	66 85 c0             	test   eax,eax
    3a59:	0f 85 53 ff          	jne    39b0 <_find+0x33>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:357
	}
	return code;
    3a5d:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:358
}
    3a62:	66 c9                	leave  
    3a64:	66 c3                	ret    

00003a66 <_initialFile>:
initialFile():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:361

void initialFile()
{
    3a66:	66 55                	push   ebp
    3a68:	66 89 e5             	mov    ebp,esp
    3a6b:	66 83 ec 10          	sub    esp,0x10
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:362
	FAT = (short*)getRecords(segOfOs, offsetOfFat);
    3a6f:	67 66 c7 44 24 04 00 	mov    DWORD PTR [esp+0x4],0xe000
    3a76:	e0 00 00 
    3a79:	67 66 c7 04 24 00 20 	mov    DWORD PTR [esp],0x2000
    3a80:	00 00 
    3a82:	66 e8 fd e8 ff ff    	call   2385 <_getRecords>
    3a88:	66 a3 e0 a7          	mov    ds:0xa7e0,eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:363
	for (int i = 0; i < Len; ++i) {
    3a8c:	67 66 c7 45 fc 00 00 	mov    DWORD PTR [ebp-0x4],0x0
    3a93:	00 00 
    3a95:	eb 33                	jmp    3aca <_initialFile+0x64>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:364
		information[i].type = null;
    3a97:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    3a9c:	66 89 d0             	mov    eax,edx
    3a9f:	66 01 c0             	add    eax,eax
    3aa2:	66 01 d0             	add    eax,edx
    3aa5:	66 c1 e0 02          	shl    eax,0x2
    3aa9:	66 01 d0             	add    eax,edx
    3aac:	66 c1 e0 02          	shl    eax,0x2
    3ab0:	66 01 d0             	add    eax,edx
    3ab3:	66 c1 e0 02          	shl    eax,0x2
    3ab7:	66 05 80 c0 00 00    	add    eax,0xc080
    3abd:	67 66 c7 00 00 00 00 	mov    DWORD PTR [eax],0x0
    3ac4:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:363
	for (int i = 0; i < Len; ++i) {
    3ac5:	67 66 ff 45 fc       	inc    DWORD PTR [ebp-0x4]
    3aca:	67 66 83 7d fc 13    	cmp    DWORD PTR [ebp-0x4],0x13
    3ad0:	7e c5                	jle    3a97 <_initialFile+0x31>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:366
	}
	no.lmaddress = 0;
    3ad2:	66 c7 06 24 a8 00 00 	mov    DWORD PTR ds:0xa824,0x0
    3ad9:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:367
	no.size = 0;
    3adb:	66 c7 06 28 a8 00 00 	mov    DWORD PTR ds:0xa828,0x0
    3ae2:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:368
	no.type = null;
    3ae4:	66 c7 06 20 a8 00 00 	mov    DWORD PTR ds:0xa820,0x0
    3aeb:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:369
	strncpy("", no.name, 0);
    3aed:	67 66 c7 44 24 08 00 	mov    DWORD PTR [esp+0x8],0x0
    3af4:	00 00 00 
    3af7:	67 66 c7 44 24 04 00 	mov    DWORD PTR [esp+0x4],0xa800
    3afe:	a8 00 00 
    3b01:	67 66 c7 04 24 db 80 	mov    DWORD PTR [esp],0x80db
    3b08:	00 00 
    3b0a:	66 e8 cb fa ff ff    	call   35db <_strncpy>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:370
	loadFiles();
    3b10:	66 e8 05 00 00 00    	call   3b1b <_loadFiles>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:371
}
    3b16:	90                   	nop
    3b17:	66 c9                	leave  
    3b19:	66 c3                	ret    

00003b1b <_loadFiles>:
loadFiles():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:375


void loadFiles()
{
    3b1b:	66 55                	push   ebp
    3b1d:	66 89 e5             	mov    ebp,esp
    3b20:	66 57                	push   edi
    3b22:	66 56                	push   esi
    3b24:	66 81 ec e4 01 00 00 	sub    esp,0x1e4
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:376
	char * rawRecords = getRecords(segOfOs, offsetOfRecord);
    3b2b:	67 66 c7 44 24 04 00 	mov    DWORD PTR [esp+0x4],0xd000
    3b32:	d0 00 00 
    3b35:	67 66 c7 04 24 00 20 	mov    DWORD PTR [esp],0x2000
    3b3c:	00 00 
    3b3e:	66 e8 41 e8 ff ff    	call   2385 <_getRecords>
    3b44:	67 66 89 45 e4       	mov    DWORD PTR [ebp-0x1c],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:377
	int i = 0;
    3b49:	67 66 c7 45 f4 00 00 	mov    DWORD PTR [ebp-0xc],0x0
    3b50:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:378
	int l = 0;
    3b52:	67 66 c7 45 f0 00 00 	mov    DWORD PTR [ebp-0x10],0x0
    3b59:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:379
	int size = 0;
    3b5b:	67 66 c7 45 ec 00 00 	mov    DWORD PTR [ebp-0x14],0x0
    3b62:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:380
	int place = 0;
    3b64:	67 66 c7 45 e8 00 00 	mov    DWORD PTR [ebp-0x18],0x0
    3b6b:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:382
	char name[30];
	enum fileType t = null;
    3b6d:	67 66 c7 45 e0 00 00 	mov    DWORD PTR [ebp-0x20],0x0
    3b74:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:384
	struct info tmp;
	while (rawRecords[i] != '\n')
    3b76:	e9 2c 02             	jmp    3da5 <_loadFiles+0x28a>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:386
	{
		size = 0;
    3b79:	67 66 c7 45 ec 00 00 	mov    DWORD PTR [ebp-0x14],0x0
    3b80:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:387
		place = 0;
    3b82:	67 66 c7 45 e8 00 00 	mov    DWORD PTR [ebp-0x18],0x0
    3b89:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:389
		// name
		++i;
    3b8b:	67 66 ff 45 f4       	inc    DWORD PTR [ebp-0xc]
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:390
		l = 0;
    3b90:	67 66 c7 45 f0 00 00 	mov    DWORD PTR [ebp-0x10],0x0
    3b97:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:391
		while (rawRecords[i] != '|') {
    3b99:	eb 0a                	jmp    3ba5 <_loadFiles+0x8a>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:392
			++i;
    3b9b:	67 66 ff 45 f4       	inc    DWORD PTR [ebp-0xc]
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:393
			++l;
    3ba0:	67 66 ff 45 f0       	inc    DWORD PTR [ebp-0x10]
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:391
		while (rawRecords[i] != '|') {
    3ba5:	67 66 8b 55 f4       	mov    edx,DWORD PTR [ebp-0xc]
    3baa:	67 66 8b 45 e4       	mov    eax,DWORD PTR [ebp-0x1c]
    3baf:	66 01 d0             	add    eax,edx
    3bb2:	67 8a 00             	mov    al,BYTE PTR [eax]
    3bb5:	3c 7c                	cmp    al,0x7c
    3bb7:	75 e2                	jne    3b9b <_loadFiles+0x80>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:395
		}
		++i;
    3bb9:	67 66 ff 45 f4       	inc    DWORD PTR [ebp-0xc]
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:396
		strncpy(rawRecords + i - l - 1, name, l);
    3bbe:	67 66 8b 55 f4       	mov    edx,DWORD PTR [ebp-0xc]
    3bc3:	67 66 8b 45 f0       	mov    eax,DWORD PTR [ebp-0x10]
    3bc8:	66 29 c2             	sub    edx,eax
    3bcb:	66 89 d0             	mov    eax,edx
    3bce:	67 66 8d 50 ff       	lea    edx,[eax-0x1]
    3bd3:	67 66 8b 45 e4       	mov    eax,DWORD PTR [ebp-0x1c]
    3bd8:	66 01 c2             	add    edx,eax
    3bdb:	67 66 8b 45 f0       	mov    eax,DWORD PTR [ebp-0x10]
    3be0:	67 66 89 44 24 08    	mov    DWORD PTR [esp+0x8],eax
    3be6:	67 66 8d 45 c2       	lea    eax,[ebp-0x3e]
    3beb:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    3bf1:	67 66 89 14 24       	mov    DWORD PTR [esp],edx
    3bf6:	66 e8 df f9 ff ff    	call   35db <_strncpy>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:397
		name[l] = '\0';
    3bfc:	67 66 8d 55 c2       	lea    edx,[ebp-0x3e]
    3c01:	67 66 8b 45 f0       	mov    eax,DWORD PTR [ebp-0x10]
    3c06:	66 01 d0             	add    eax,edx
    3c09:	67 c6 00 00          	mov    BYTE PTR [eax],0x0
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:399
		// size
		while (rawRecords[i] != '|') {
    3c0d:	eb 3a                	jmp    3c49 <_loadFiles+0x12e>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:400
			size = size * 10 + rawRecords[i] - '0';
    3c0f:	67 66 8b 55 ec       	mov    edx,DWORD PTR [ebp-0x14]
    3c14:	66 89 d0             	mov    eax,edx
    3c17:	66 c1 e0 02          	shl    eax,0x2
    3c1b:	66 01 d0             	add    eax,edx
    3c1e:	66 01 c0             	add    eax,eax
    3c21:	66 89 c1             	mov    ecx,eax
    3c24:	67 66 8b 55 f4       	mov    edx,DWORD PTR [ebp-0xc]
    3c29:	67 66 8b 45 e4       	mov    eax,DWORD PTR [ebp-0x1c]
    3c2e:	66 01 d0             	add    eax,edx
    3c31:	67 8a 00             	mov    al,BYTE PTR [eax]
    3c34:	66 0f be c0          	movsx  eax,al
    3c38:	66 01 c8             	add    eax,ecx
    3c3b:	66 83 e8 30          	sub    eax,0x30
    3c3f:	67 66 89 45 ec       	mov    DWORD PTR [ebp-0x14],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:401
			++i;
    3c44:	67 66 ff 45 f4       	inc    DWORD PTR [ebp-0xc]
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:399
		while (rawRecords[i] != '|') {
    3c49:	67 66 8b 55 f4       	mov    edx,DWORD PTR [ebp-0xc]
    3c4e:	67 66 8b 45 e4       	mov    eax,DWORD PTR [ebp-0x1c]
    3c53:	66 01 d0             	add    eax,edx
    3c56:	67 8a 00             	mov    al,BYTE PTR [eax]
    3c59:	3c 7c                	cmp    al,0x7c
    3c5b:	75 b2                	jne    3c0f <_loadFiles+0xf4>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:403
		}
		++i;
    3c5d:	67 66 ff 45 f4       	inc    DWORD PTR [ebp-0xc]
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:405
		// place
		while (rawRecords[i] != '|') {
    3c62:	eb 3a                	jmp    3c9e <_loadFiles+0x183>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:406
			place = place * 10 + rawRecords[i] - '0';
    3c64:	67 66 8b 55 e8       	mov    edx,DWORD PTR [ebp-0x18]
    3c69:	66 89 d0             	mov    eax,edx
    3c6c:	66 c1 e0 02          	shl    eax,0x2
    3c70:	66 01 d0             	add    eax,edx
    3c73:	66 01 c0             	add    eax,eax
    3c76:	66 89 c1             	mov    ecx,eax
    3c79:	67 66 8b 55 f4       	mov    edx,DWORD PTR [ebp-0xc]
    3c7e:	67 66 8b 45 e4       	mov    eax,DWORD PTR [ebp-0x1c]
    3c83:	66 01 d0             	add    eax,edx
    3c86:	67 8a 00             	mov    al,BYTE PTR [eax]
    3c89:	66 0f be c0          	movsx  eax,al
    3c8d:	66 01 c8             	add    eax,ecx
    3c90:	66 83 e8 30          	sub    eax,0x30
    3c94:	67 66 89 45 e8       	mov    DWORD PTR [ebp-0x18],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:407
			++i;
    3c99:	67 66 ff 45 f4       	inc    DWORD PTR [ebp-0xc]
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:405
		while (rawRecords[i] != '|') {
    3c9e:	67 66 8b 55 f4       	mov    edx,DWORD PTR [ebp-0xc]
    3ca3:	67 66 8b 45 e4       	mov    eax,DWORD PTR [ebp-0x1c]
    3ca8:	66 01 d0             	add    eax,edx
    3cab:	67 8a 00             	mov    al,BYTE PTR [eax]
    3cae:	3c 7c                	cmp    al,0x7c
    3cb0:	75 b2                	jne    3c64 <_loadFiles+0x149>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:409
		}
		++i;
    3cb2:	67 66 ff 45 f4       	inc    DWORD PTR [ebp-0xc]
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:411
		//type
		t = rawRecords[i] - '0';
    3cb7:	67 66 8b 55 f4       	mov    edx,DWORD PTR [ebp-0xc]
    3cbc:	67 66 8b 45 e4       	mov    eax,DWORD PTR [ebp-0x1c]
    3cc1:	66 01 d0             	add    eax,edx
    3cc4:	67 8a 00             	mov    al,BYTE PTR [eax]
    3cc7:	66 0f be c0          	movsx  eax,al
    3ccb:	66 83 e8 30          	sub    eax,0x30
    3ccf:	67 66 89 45 e0       	mov    DWORD PTR [ebp-0x20],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:412
		i += 3;
    3cd4:	67 66 83 45 f4 03    	add    DWORD PTR [ebp-0xc],0x3
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:413
		tmp.size = size;
    3cda:	67 66 8b 45 ec       	mov    eax,DWORD PTR [ebp-0x14]
    3cdf:	67 66 89 85 14 ff ff 	mov    DWORD PTR [ebp-0xec],eax
    3ce6:	ff 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:414
		tmp.type = t;
    3ce7:	67 66 8b 45 e0       	mov    eax,DWORD PTR [ebp-0x20]
    3cec:	67 66 89 85 0c ff ff 	mov    DWORD PTR [ebp-0xf4],eax
    3cf3:	ff 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:415
		tmp.lmaddress = place;
    3cf4:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
    3cf9:	67 66 89 85 10 ff ff 	mov    DWORD PTR [ebp-0xf0],eax
    3d00:	ff 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:416
		tmp.deleted = 0;
    3d01:	67 66 c7 85 18 ff ff 	mov    DWORD PTR [ebp-0xe8],0x0
    3d08:	ff 00 00 00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:417
		tmp.start = place / Cluster;
    3d0d:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
    3d12:	66 85 c0             	test   eax,eax
    3d15:	79 06                	jns    3d1d <_loadFiles+0x202>
    3d17:	66 05 ff 01 00 00    	add    eax,0x1ff
    3d1d:	66 c1 f8 09          	sar    eax,0x9
    3d21:	67 66 89 85 1c ff ff 	mov    DWORD PTR [ebp-0xe4],eax
    3d28:	ff 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:418
		setFAT(place, size);
    3d29:	67 66 8b 45 ec       	mov    eax,DWORD PTR [ebp-0x14]
    3d2e:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    3d34:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
    3d39:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    3d3e:	66 e8 87 00 00 00    	call   3dcb <_setFAT>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:419
		strncpy(name, tmp.name, strlen(name));
    3d44:	67 66 8d 45 c2       	lea    eax,[ebp-0x3e]
    3d49:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    3d4e:	66 e8 a1 f6 ff ff    	call   33f5 <_strlen>
    3d54:	67 66 89 44 24 08    	mov    DWORD PTR [esp+0x8],eax
    3d5a:	67 66 8d 85 ec fe ff 	lea    eax,[ebp-0x114]
    3d61:	ff 
    3d62:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    3d68:	67 66 8d 45 c2       	lea    eax,[ebp-0x3e]
    3d6d:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    3d72:	66 e8 63 f8 ff ff    	call   35db <_strncpy>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:420
		hash(name, tmp);
    3d78:	67 66 8d 44 24 04    	lea    eax,[esp+0x4]
    3d7e:	67 66 8d 95 ec fe ff 	lea    edx,[ebp-0x114]
    3d85:	ff 
    3d86:	66 b9 35 00 00 00    	mov    ecx,0x35
    3d8c:	66 89 c7             	mov    edi,eax
    3d8f:	66 89 d6             	mov    esi,edx
    3d92:	66 f3 a5             	rep movs DWORD PTR es:[di],DWORD PTR ds:[si]
    3d95:	67 66 8d 45 c2       	lea    eax,[ebp-0x3e]
    3d9a:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    3d9f:	66 e8 31 fa ff ff    	call   37d6 <_hash>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:384
	while (rawRecords[i] != '\n')
    3da5:	67 66 8b 55 f4       	mov    edx,DWORD PTR [ebp-0xc]
    3daa:	67 66 8b 45 e4       	mov    eax,DWORD PTR [ebp-0x1c]
    3daf:	66 01 d0             	add    eax,edx
    3db2:	67 8a 00             	mov    al,BYTE PTR [eax]
    3db5:	3c 0a                	cmp    al,0xa
    3db7:	0f 85 be fd          	jne    3b79 <_loadFiles+0x5e>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:422
	}
}
    3dbb:	90                   	nop
    3dbc:	66 81 c4 e4 01 00 00 	add    esp,0x1e4
    3dc3:	66 5e                	pop    esi
    3dc5:	66 5f                	pop    edi
    3dc7:	66 5d                	pop    ebp
    3dc9:	66 c3                	ret    

00003dcb <_setFAT>:
setFAT():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:425
// 注意FAT从0开始。
void setFAT(int lmaddress, int size)
{
    3dcb:	66 55                	push   ebp
    3dcd:	66 89 e5             	mov    ebp,esp
    3dd0:	66 83 ec 0c          	sub    esp,0xc
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:426
	int begin = lmaddress / Cluster;
    3dd4:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    3dd9:	66 85 c0             	test   eax,eax
    3ddc:	79 06                	jns    3de4 <_setFAT+0x19>
    3dde:	66 05 ff 01 00 00    	add    eax,0x1ff
    3de4:	66 c1 f8 09          	sar    eax,0x9
    3de8:	67 66 89 45 f8       	mov    DWORD PTR [ebp-0x8],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:427
	int num = size / Cluster;
    3ded:	67 66 8b 45 0c       	mov    eax,DWORD PTR [ebp+0xc]
    3df2:	66 85 c0             	test   eax,eax
    3df5:	79 06                	jns    3dfd <_setFAT+0x32>
    3df7:	66 05 ff 01 00 00    	add    eax,0x1ff
    3dfd:	66 c1 f8 09          	sar    eax,0x9
    3e01:	67 66 89 45 f4       	mov    DWORD PTR [ebp-0xc],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:428
	for (int i = 0; i < num - 1; ++i)
    3e06:	67 66 c7 45 fc 00 00 	mov    DWORD PTR [ebp-0x4],0x0
    3e0d:	00 00 
    3e0f:	eb 33                	jmp    3e44 <_setFAT+0x79>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:430
	{
		FAT[i + begin] = i + begin + 1;
    3e11:	66 a1 e0 a7          	mov    eax,ds:0xa7e0
    3e15:	67 66 8b 4d fc       	mov    ecx,DWORD PTR [ebp-0x4]
    3e1a:	67 66 8b 55 f8       	mov    edx,DWORD PTR [ebp-0x8]
    3e1f:	66 01 ca             	add    edx,ecx
    3e22:	66 01 d2             	add    edx,edx
    3e25:	67 66 8d 0c 10       	lea    ecx,[eax+edx*1]
    3e2a:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
    3e2f:	66 89 c2             	mov    edx,eax
    3e32:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
    3e37:	66 01 d0             	add    eax,edx
    3e3a:	66 40                	inc    eax
    3e3c:	67 89 01             	mov    WORD PTR [ecx],ax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:428
	for (int i = 0; i < num - 1; ++i)
    3e3f:	67 66 ff 45 fc       	inc    DWORD PTR [ebp-0x4]
    3e44:	67 66 8b 45 f4       	mov    eax,DWORD PTR [ebp-0xc]
    3e49:	66 48                	dec    eax
    3e4b:	67 66 3b 45 fc       	cmp    eax,DWORD PTR [ebp-0x4]
    3e50:	7f bf                	jg     3e11 <_setFAT+0x46>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:432
	}
	FAT[num + begin - 1] = 0xffff;
    3e52:	66 a1 e0 a7          	mov    eax,ds:0xa7e0
    3e56:	67 66 8b 4d f4       	mov    ecx,DWORD PTR [ebp-0xc]
    3e5b:	67 66 8b 55 f8       	mov    edx,DWORD PTR [ebp-0x8]
    3e60:	66 01 ca             	add    edx,ecx
    3e63:	66 81 c2 ff ff ff 7f 	add    edx,0x7fffffff
    3e6a:	66 01 d2             	add    edx,edx
    3e6d:	66 01 d0             	add    eax,edx
    3e70:	67 c7 00 ff ff       	mov    WORD PTR [eax],0xffff
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:433
}
    3e75:	90                   	nop
    3e76:	66 c9                	leave  
    3e78:	66 c3                	ret    

00003e7a <_resetFAT>:
resetFAT():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:436

void resetFAT(int lmaddress, int size)
{
    3e7a:	66 55                	push   ebp
    3e7c:	66 89 e5             	mov    ebp,esp
    3e7f:	66 83 ec 0c          	sub    esp,0xc
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:437
	int begin = lmaddress / Cluster;
    3e83:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    3e88:	66 85 c0             	test   eax,eax
    3e8b:	79 06                	jns    3e93 <_resetFAT+0x19>
    3e8d:	66 05 ff 01 00 00    	add    eax,0x1ff
    3e93:	66 c1 f8 09          	sar    eax,0x9
    3e97:	67 66 89 45 f8       	mov    DWORD PTR [ebp-0x8],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:438
	int num = size / Cluster;
    3e9c:	67 66 8b 45 0c       	mov    eax,DWORD PTR [ebp+0xc]
    3ea1:	66 85 c0             	test   eax,eax
    3ea4:	79 06                	jns    3eac <_resetFAT+0x32>
    3ea6:	66 05 ff 01 00 00    	add    eax,0x1ff
    3eac:	66 c1 f8 09          	sar    eax,0x9
    3eb0:	67 66 89 45 f4       	mov    DWORD PTR [ebp-0xc],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:439
	for (int i = 0; i < num; ++i)
    3eb5:	67 66 c7 45 fc 00 00 	mov    DWORD PTR [ebp-0x4],0x0
    3ebc:	00 00 
    3ebe:	eb 21                	jmp    3ee1 <_resetFAT+0x67>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:441
	{
		FAT[i + begin] = 0;
    3ec0:	66 a1 e0 a7          	mov    eax,ds:0xa7e0
    3ec4:	67 66 8b 4d fc       	mov    ecx,DWORD PTR [ebp-0x4]
    3ec9:	67 66 8b 55 f8       	mov    edx,DWORD PTR [ebp-0x8]
    3ece:	66 01 ca             	add    edx,ecx
    3ed1:	66 01 d2             	add    edx,edx
    3ed4:	66 01 d0             	add    eax,edx
    3ed7:	67 c7 00 00 00       	mov    WORD PTR [eax],0x0
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:439
	for (int i = 0; i < num; ++i)
    3edc:	67 66 ff 45 fc       	inc    DWORD PTR [ebp-0x4]
    3ee1:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
    3ee6:	67 66 3b 45 f4       	cmp    eax,DWORD PTR [ebp-0xc]
    3eeb:	7c d3                	jl     3ec0 <_resetFAT+0x46>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:443
	}
}
    3eed:	90                   	nop
    3eee:	66 c9                	leave  
    3ef0:	66 c3                	ret    

00003ef2 <_Outread>:
Outread():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:447


int Outread(struct File* f, char*buf, int count, int offset)
{
    3ef2:	66 55                	push   ebp
    3ef4:	66 89 e5             	mov    ebp,esp
    3ef7:	66 83 ec 14          	sub    esp,0x14
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:448
	readReal(f->file.seg, f->file.memoryOffset, count, offset, buf);
    3efb:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    3f00:	67 66 8b 90 90 00 00 	mov    edx,DWORD PTR [eax+0x90]
    3f07:	00 
    3f08:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    3f0d:	67 66 8b 80 8c 00 00 	mov    eax,DWORD PTR [eax+0x8c]
    3f14:	00 
    3f15:	67 66 8b 4d 0c       	mov    ecx,DWORD PTR [ebp+0xc]
    3f1a:	67 66 89 4c 24 10    	mov    DWORD PTR [esp+0x10],ecx
    3f20:	67 66 8b 4d 14       	mov    ecx,DWORD PTR [ebp+0x14]
    3f25:	67 66 89 4c 24 0c    	mov    DWORD PTR [esp+0xc],ecx
    3f2b:	67 66 8b 4d 10       	mov    ecx,DWORD PTR [ebp+0x10]
    3f30:	67 66 89 4c 24 08    	mov    DWORD PTR [esp+0x8],ecx
    3f36:	67 66 89 54 24 04    	mov    DWORD PTR [esp+0x4],edx
    3f3c:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    3f41:	66 e8 88 0a 00 00    	call   49cf <_readReal>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:449
	return strlen(buf);
    3f47:	67 66 8b 45 0c       	mov    eax,DWORD PTR [ebp+0xc]
    3f4c:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    3f51:	66 e8 9e f4 ff ff    	call   33f5 <_strlen>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:450
}
    3f57:	66 c9                	leave  
    3f59:	66 c3                	ret    

00003f5b <_Outwrite>:
Outwrite():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:452
int Outwrite(struct File* f, char*buf, int count, int offset)
{
    3f5b:	66 55                	push   ebp
    3f5d:	66 89 e5             	mov    ebp,esp
    3f60:	66 83 ec 14          	sub    esp,0x14
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:453
	return writeReal(f->file.seg, f->file.memoryOffset, count, offset, buf);
    3f64:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    3f69:	67 66 8b 90 90 00 00 	mov    edx,DWORD PTR [eax+0x90]
    3f70:	00 
    3f71:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    3f76:	67 66 8b 80 8c 00 00 	mov    eax,DWORD PTR [eax+0x8c]
    3f7d:	00 
    3f7e:	67 66 8b 4d 0c       	mov    ecx,DWORD PTR [ebp+0xc]
    3f83:	67 66 89 4c 24 10    	mov    DWORD PTR [esp+0x10],ecx
    3f89:	67 66 8b 4d 14       	mov    ecx,DWORD PTR [ebp+0x14]
    3f8e:	67 66 89 4c 24 0c    	mov    DWORD PTR [esp+0xc],ecx
    3f94:	67 66 8b 4d 10       	mov    ecx,DWORD PTR [ebp+0x10]
    3f99:	67 66 89 4c 24 08    	mov    DWORD PTR [esp+0x8],ecx
    3f9f:	67 66 89 54 24 04    	mov    DWORD PTR [esp+0x4],edx
    3fa5:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    3faa:	66 e8 87 0a 00 00    	call   4a37 <_writeReal>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:455
	f->file.size = count + offset;
}
    3fb0:	66 c9                	leave  
    3fb2:	66 c3                	ret    

00003fb4 <_fopen>:
fopen():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:458

int fopen(char * name, enum openFileType type)
{
    3fb4:	66 55                	push   ebp
    3fb6:	66 89 e5             	mov    ebp,esp
    3fb9:	66 56                	push   esi
    3fbb:	66 53                	push   ebx
    3fbd:	66 83 ec 20          	sub    esp,0x20
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:459
	int tmp = find(name);
    3fc1:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    3fc6:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    3fcb:	66 e8 ac f9 ff ff    	call   397d <_find>
    3fd1:	67 66 89 45 f4       	mov    DWORD PTR [ebp-0xc],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:460
	if (tmp == -1)
    3fd6:	67 66 83 7d f4 ff    	cmp    DWORD PTR [ebp-0xc],0xffffffff
    3fdc:	75 09                	jne    3fe7 <_fopen+0x33>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:461
		return 400;
    3fde:	66 b8 90 01 00 00    	mov    eax,0x190
    3fe4:	e9 02 04             	jmp    43e9 <_fopen+0x435>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:462
	int blockNum = findEnoughBlock(information[tmp].size);
    3fe7:	67 66 8b 55 f4       	mov    edx,DWORD PTR [ebp-0xc]
    3fec:	66 89 d0             	mov    eax,edx
    3fef:	66 01 c0             	add    eax,eax
    3ff2:	66 01 d0             	add    eax,edx
    3ff5:	66 c1 e0 02          	shl    eax,0x2
    3ff9:	66 01 d0             	add    eax,edx
    3ffc:	66 c1 e0 02          	shl    eax,0x2
    4000:	66 01 d0             	add    eax,edx
    4003:	66 c1 e0 02          	shl    eax,0x2
    4007:	66 05 88 c0 00 00    	add    eax,0xc088
    400d:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    4011:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    4016:	66 e8 5a 31 00 00    	call   7176 <_findEnoughBlock>
    401c:	67 66 89 45 f0       	mov    DWORD PTR [ebp-0x10],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:463
	blockNum = require(information[tmp].size, blockNum);
    4021:	67 66 8b 55 f4       	mov    edx,DWORD PTR [ebp-0xc]
    4026:	66 89 d0             	mov    eax,edx
    4029:	66 01 c0             	add    eax,eax
    402c:	66 01 d0             	add    eax,edx
    402f:	66 c1 e0 02          	shl    eax,0x2
    4033:	66 01 d0             	add    eax,edx
    4036:	66 c1 e0 02          	shl    eax,0x2
    403a:	66 01 d0             	add    eax,edx
    403d:	66 c1 e0 02          	shl    eax,0x2
    4041:	66 05 88 c0 00 00    	add    eax,0xc088
    4047:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    404b:	67 66 8b 55 f0       	mov    edx,DWORD PTR [ebp-0x10]
    4050:	67 66 89 54 24 04    	mov    DWORD PTR [esp+0x4],edx
    4056:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    405b:	66 e8 be 31 00 00    	call   721f <_require>
    4061:	67 66 89 45 f0       	mov    DWORD PTR [ebp-0x10],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:464
	processTable[curProcessId].openfile.file.infoIndex = tmp;
    4066:	66 8b 16 70 e9       	mov    edx,DWORD PTR ds:0xe970
    406b:	66 89 d0             	mov    eax,edx
    406e:	66 c1 e0 03          	shl    eax,0x3
    4072:	66 01 d0             	add    eax,edx
    4075:	66 01 c0             	add    eax,eax
    4078:	66 01 d0             	add    eax,edx
    407b:	66 c1 e0 02          	shl    eax,0x2
    407f:	66 01 d0             	add    eax,edx
    4082:	66 c1 e0 02          	shl    eax,0x2
    4086:	67 66 8d 90 70 d2 00 	lea    edx,[eax+0xd270]
    408d:	00 
    408e:	67 66 8b 45 f4       	mov    eax,DWORD PTR [ebp-0xc]
    4093:	67 66 89 02          	mov    DWORD PTR [edx],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:465
	processTable[curProcessId].openfile.file.memoryPlace = memoryTable[blockNum].beginAddr;
    4097:	66 8b 16 70 e9       	mov    edx,DWORD PTR ds:0xe970
    409c:	67 66 8b 4d f0       	mov    ecx,DWORD PTR [ebp-0x10]
    40a1:	66 89 c8             	mov    eax,ecx
    40a4:	66 01 c0             	add    eax,eax
    40a7:	66 01 c8             	add    eax,ecx
    40aa:	66 c1 e0 03          	shl    eax,0x3
    40ae:	66 05 c0 a3 00 00    	add    eax,0xa3c0
    40b4:	67 66 8b 08          	mov    ecx,DWORD PTR [eax]
    40b8:	66 89 d0             	mov    eax,edx
    40bb:	66 c1 e0 03          	shl    eax,0x3
    40bf:	66 01 d0             	add    eax,edx
    40c2:	66 01 c0             	add    eax,eax
    40c5:	66 01 d0             	add    eax,edx
    40c8:	66 c1 e0 02          	shl    eax,0x2
    40cc:	66 01 d0             	add    eax,edx
    40cf:	66 c1 e0 02          	shl    eax,0x2
    40d3:	66 05 74 d2 00 00    	add    eax,0xd274
    40d9:	67 66 89 08          	mov    DWORD PTR [eax],ecx
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:466
	processTable[curProcessId].openfile.file.count++;
    40dd:	66 8b 16 70 e9       	mov    edx,DWORD PTR ds:0xe970
    40e2:	66 89 d0             	mov    eax,edx
    40e5:	66 c1 e0 03          	shl    eax,0x3
    40e9:	66 01 d0             	add    eax,edx
    40ec:	66 01 c0             	add    eax,eax
    40ef:	66 01 d0             	add    eax,edx
    40f2:	66 c1 e0 02          	shl    eax,0x2
    40f6:	66 01 d0             	add    eax,edx
    40f9:	66 c1 e0 02          	shl    eax,0x2
    40fd:	66 05 68 d2 00 00    	add    eax,0xd268
    4103:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    4107:	67 66 8d 48 01       	lea    ecx,[eax+0x1]
    410c:	66 89 d0             	mov    eax,edx
    410f:	66 c1 e0 03          	shl    eax,0x3
    4113:	66 01 d0             	add    eax,edx
    4116:	66 01 c0             	add    eax,eax
    4119:	66 01 d0             	add    eax,edx
    411c:	66 c1 e0 02          	shl    eax,0x2
    4120:	66 01 d0             	add    eax,edx
    4123:	66 c1 e0 02          	shl    eax,0x2
    4127:	66 05 68 d2 00 00    	add    eax,0xd268
    412d:	67 66 89 08          	mov    DWORD PTR [eax],ecx
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:467
	processTable[curProcessId].openfile.file.size = information[tmp].size;
    4131:	66 8b 16 70 e9       	mov    edx,DWORD PTR ds:0xe970
    4136:	67 66 8b 4d f4       	mov    ecx,DWORD PTR [ebp-0xc]
    413b:	66 89 c8             	mov    eax,ecx
    413e:	66 01 c0             	add    eax,eax
    4141:	66 01 c8             	add    eax,ecx
    4144:	66 c1 e0 02          	shl    eax,0x2
    4148:	66 01 c8             	add    eax,ecx
    414b:	66 c1 e0 02          	shl    eax,0x2
    414f:	66 01 c8             	add    eax,ecx
    4152:	66 c1 e0 02          	shl    eax,0x2
    4156:	66 05 88 c0 00 00    	add    eax,0xc088
    415c:	67 66 8b 08          	mov    ecx,DWORD PTR [eax]
    4160:	66 89 d0             	mov    eax,edx
    4163:	66 c1 e0 03          	shl    eax,0x3
    4167:	66 01 d0             	add    eax,edx
    416a:	66 01 c0             	add    eax,eax
    416d:	66 01 d0             	add    eax,edx
    4170:	66 c1 e0 02          	shl    eax,0x2
    4174:	66 01 d0             	add    eax,edx
    4177:	66 c1 e0 02          	shl    eax,0x2
    417b:	66 05 80 d2 00 00    	add    eax,0xd280
    4181:	67 66 89 08          	mov    DWORD PTR [eax],ecx
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:468
	strncpy(name, processTable[curProcessId].openfile.file.name, strlen(name));
    4185:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    418a:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    418f:	66 e8 60 f2 ff ff    	call   33f5 <_strlen>
    4195:	66 89 c1             	mov    ecx,eax
    4198:	66 8b 16 70 e9       	mov    edx,DWORD PTR ds:0xe970
    419d:	66 89 d0             	mov    eax,edx
    41a0:	66 c1 e0 03          	shl    eax,0x3
    41a4:	66 01 d0             	add    eax,edx
    41a7:	66 01 c0             	add    eax,eax
    41aa:	66 01 d0             	add    eax,edx
    41ad:	66 c1 e0 02          	shl    eax,0x2
    41b1:	66 01 d0             	add    eax,edx
    41b4:	66 c1 e0 02          	shl    eax,0x2
    41b8:	66 83 e8 80          	sub    eax,0xffffff80
    41bc:	66 05 60 d1 00 00    	add    eax,0xd160
    41c2:	66 83 c0 10          	add    eax,0x10
    41c6:	67 66 89 4c 24 08    	mov    DWORD PTR [esp+0x8],ecx
    41cc:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    41d2:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    41d7:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    41dc:	66 e8 f9 f3 ff ff    	call   35db <_strncpy>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:469
	int offsetMask = 0x0000ffff;
    41e2:	67 66 c7 45 ec ff ff 	mov    DWORD PTR [ebp-0x14],0xffff
    41e9:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:470
	int segMask = 0xf0000;
    41eb:	67 66 c7 45 e8 00 00 	mov    DWORD PTR [ebp-0x18],0xf0000
    41f2:	0f 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:471
	processTable[curProcessId].openfile.file.memoryOffset = memoryTable[blockNum].beginAddr & offsetMask;
    41f4:	66 8b 16 70 e9       	mov    edx,DWORD PTR ds:0xe970
    41f9:	67 66 8b 4d f0       	mov    ecx,DWORD PTR [ebp-0x10]
    41fe:	66 89 c8             	mov    eax,ecx
    4201:	66 01 c0             	add    eax,eax
    4204:	66 01 c8             	add    eax,ecx
    4207:	66 c1 e0 03          	shl    eax,0x3
    420b:	66 05 c0 a3 00 00    	add    eax,0xa3c0
    4211:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    4215:	67 66 23 45 ec       	and    eax,DWORD PTR [ebp-0x14]
    421a:	66 89 c1             	mov    ecx,eax
    421d:	66 89 d0             	mov    eax,edx
    4220:	66 c1 e0 03          	shl    eax,0x3
    4224:	66 01 d0             	add    eax,edx
    4227:	66 01 c0             	add    eax,eax
    422a:	66 01 d0             	add    eax,edx
    422d:	66 c1 e0 02          	shl    eax,0x2
    4231:	66 01 d0             	add    eax,edx
    4234:	66 c1 e0 02          	shl    eax,0x2
    4238:	66 05 7c d2 00 00    	add    eax,0xd27c
    423e:	67 66 89 08          	mov    DWORD PTR [eax],ecx
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:472
	processTable[curProcessId].openfile.file.seg = (memoryTable[blockNum].beginAddr & segMask) >> 4;
    4242:	66 8b 16 70 e9       	mov    edx,DWORD PTR ds:0xe970
    4247:	67 66 8b 4d f0       	mov    ecx,DWORD PTR [ebp-0x10]
    424c:	66 89 c8             	mov    eax,ecx
    424f:	66 01 c0             	add    eax,eax
    4252:	66 01 c8             	add    eax,ecx
    4255:	66 c1 e0 03          	shl    eax,0x3
    4259:	66 05 c0 a3 00 00    	add    eax,0xa3c0
    425f:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    4263:	67 66 23 45 e8       	and    eax,DWORD PTR [ebp-0x18]
    4268:	66 c1 f8 04          	sar    eax,0x4
    426c:	66 89 c1             	mov    ecx,eax
    426f:	66 89 d0             	mov    eax,edx
    4272:	66 c1 e0 03          	shl    eax,0x3
    4276:	66 01 d0             	add    eax,edx
    4279:	66 01 c0             	add    eax,eax
    427c:	66 01 d0             	add    eax,edx
    427f:	66 c1 e0 02          	shl    eax,0x2
    4283:	66 01 d0             	add    eax,edx
    4286:	66 c1 e0 02          	shl    eax,0x2
    428a:	66 05 78 d2 00 00    	add    eax,0xd278
    4290:	67 66 89 08          	mov    DWORD PTR [eax],ecx
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:473
	loadReal(information[tmp].lmaddress, information[tmp].size, processTable[curProcessId].openfile.file.memoryOffset, processTable[curProcessId].openfile.file.seg);
    4294:	66 8b 16 70 e9       	mov    edx,DWORD PTR ds:0xe970
    4299:	66 89 d0             	mov    eax,edx
    429c:	66 c1 e0 03          	shl    eax,0x3
    42a0:	66 01 d0             	add    eax,edx
    42a3:	66 01 c0             	add    eax,eax
    42a6:	66 01 d0             	add    eax,edx
    42a9:	66 c1 e0 02          	shl    eax,0x2
    42ad:	66 01 d0             	add    eax,edx
    42b0:	66 c1 e0 02          	shl    eax,0x2
    42b4:	66 05 78 d2 00 00    	add    eax,0xd278
    42ba:	67 66 8b 30          	mov    esi,DWORD PTR [eax]
    42be:	66 8b 16 70 e9       	mov    edx,DWORD PTR ds:0xe970
    42c3:	66 89 d0             	mov    eax,edx
    42c6:	66 c1 e0 03          	shl    eax,0x3
    42ca:	66 01 d0             	add    eax,edx
    42cd:	66 01 c0             	add    eax,eax
    42d0:	66 01 d0             	add    eax,edx
    42d3:	66 c1 e0 02          	shl    eax,0x2
    42d7:	66 01 d0             	add    eax,edx
    42da:	66 c1 e0 02          	shl    eax,0x2
    42de:	66 05 7c d2 00 00    	add    eax,0xd27c
    42e4:	67 66 8b 18          	mov    ebx,DWORD PTR [eax]
    42e8:	67 66 8b 55 f4       	mov    edx,DWORD PTR [ebp-0xc]
    42ed:	66 89 d0             	mov    eax,edx
    42f0:	66 01 c0             	add    eax,eax
    42f3:	66 01 d0             	add    eax,edx
    42f6:	66 c1 e0 02          	shl    eax,0x2
    42fa:	66 01 d0             	add    eax,edx
    42fd:	66 c1 e0 02          	shl    eax,0x2
    4301:	66 01 d0             	add    eax,edx
    4304:	66 c1 e0 02          	shl    eax,0x2
    4308:	66 05 88 c0 00 00    	add    eax,0xc088
    430e:	67 66 8b 08          	mov    ecx,DWORD PTR [eax]
    4312:	67 66 8b 55 f4       	mov    edx,DWORD PTR [ebp-0xc]
    4317:	66 89 d0             	mov    eax,edx
    431a:	66 01 c0             	add    eax,eax
    431d:	66 01 d0             	add    eax,edx
    4320:	66 c1 e0 02          	shl    eax,0x2
    4324:	66 01 d0             	add    eax,edx
    4327:	66 c1 e0 02          	shl    eax,0x2
    432b:	66 01 d0             	add    eax,edx
    432e:	66 c1 e0 02          	shl    eax,0x2
    4332:	66 05 84 c0 00 00    	add    eax,0xc084
    4338:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    433c:	67 66 89 74 24 0c    	mov    DWORD PTR [esp+0xc],esi
    4342:	67 66 89 5c 24 08    	mov    DWORD PTR [esp+0x8],ebx
    4348:	67 66 89 4c 24 04    	mov    DWORD PTR [esp+0x4],ecx
    434e:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    4353:	66 e8 e8 d6 ff ff    	call   1a41 <_loadReal>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:474
	processTable[curProcessId].openfile.offset = 0;
    4359:	66 8b 16 70 e9       	mov    edx,DWORD PTR ds:0xe970
    435e:	66 89 d0             	mov    eax,edx
    4361:	66 c1 e0 03          	shl    eax,0x3
    4365:	66 01 d0             	add    eax,edx
    4368:	66 01 c0             	add    eax,eax
    436b:	66 01 d0             	add    eax,edx
    436e:	66 c1 e0 02          	shl    eax,0x2
    4372:	66 01 d0             	add    eax,edx
    4375:	66 c1 e0 02          	shl    eax,0x2
    4379:	66 05 ec d1 00 00    	add    eax,0xd1ec
    437f:	67 66 c7 00 00 00 00 	mov    DWORD PTR [eax],0x0
    4386:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:475
	processTable[curProcessId].openfile.file_ops.read = &Outread;
    4387:	66 8b 16 70 e9       	mov    edx,DWORD PTR ds:0xe970
    438c:	66 89 d0             	mov    eax,edx
    438f:	66 c1 e0 03          	shl    eax,0x3
    4393:	66 01 d0             	add    eax,edx
    4396:	66 01 c0             	add    eax,eax
    4399:	66 01 d0             	add    eax,edx
    439c:	66 c1 e0 02          	shl    eax,0x2
    43a0:	66 01 d0             	add    eax,edx
    43a3:	66 c1 e0 02          	shl    eax,0x2
    43a7:	66 05 84 d2 00 00    	add    eax,0xd284
    43ad:	67 66 c7 00 f2 3e 00 	mov    DWORD PTR [eax],0x3ef2
    43b4:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:476
	processTable[curProcessId].openfile.file_ops.write = &Outwrite;
    43b5:	66 8b 16 70 e9       	mov    edx,DWORD PTR ds:0xe970
    43ba:	66 89 d0             	mov    eax,edx
    43bd:	66 c1 e0 03          	shl    eax,0x3
    43c1:	66 01 d0             	add    eax,edx
    43c4:	66 01 c0             	add    eax,eax
    43c7:	66 01 d0             	add    eax,edx
    43ca:	66 c1 e0 02          	shl    eax,0x2
    43ce:	66 01 d0             	add    eax,edx
    43d1:	66 c1 e0 02          	shl    eax,0x2
    43d5:	66 05 88 d2 00 00    	add    eax,0xd288
    43db:	67 66 c7 00 5b 3f 00 	mov    DWORD PTR [eax],0x3f5b
    43e2:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:477
	return 200;
    43e3:	66 b8 c8 00 00 00    	mov    eax,0xc8
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:478
}
    43e9:	66 83 c4 20          	add    esp,0x20
    43ed:	66 5b                	pop    ebx
    43ef:	66 5e                	pop    esi
    43f1:	66 5d                	pop    ebp
    43f3:	66 c3                	ret    

000043f5 <_fclose>:
fclose():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:480
int fclose(char * name)
{
    43f5:	66 55                	push   ebp
    43f7:	66 89 e5             	mov    ebp,esp
    43fa:	66 56                	push   esi
    43fc:	66 53                	push   ebx
    43fe:	66 83 ec 10          	sub    esp,0x10
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:482
	//写回。
	if (strcmp(processTable[curProcessId].openfile.file.name, name) == 0) {
    4402:	66 8b 16 70 e9       	mov    edx,DWORD PTR ds:0xe970
    4407:	66 89 d0             	mov    eax,edx
    440a:	66 c1 e0 03          	shl    eax,0x3
    440e:	66 01 d0             	add    eax,edx
    4411:	66 01 c0             	add    eax,eax
    4414:	66 01 d0             	add    eax,edx
    4417:	66 c1 e0 02          	shl    eax,0x2
    441b:	66 01 d0             	add    eax,edx
    441e:	66 c1 e0 02          	shl    eax,0x2
    4422:	66 83 e8 80          	sub    eax,0xffffff80
    4426:	66 05 60 d1 00 00    	add    eax,0xd160
    442c:	67 66 8d 50 10       	lea    edx,[eax+0x10]
    4431:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    4436:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    443c:	67 66 89 14 24       	mov    DWORD PTR [esp],edx
    4441:	66 e8 7f f0 ff ff    	call   34c6 <_strcmp>
    4447:	66 85 c0             	test   eax,eax
    444a:	0f 85 46 01          	jne    4594 <_fclose+0x19f>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:483
		write(information[processTable[curProcessId].openfile.file.infoIndex].lmaddress, processTable[curProcessId].openfile.file.size, processTable[curProcessId].openfile.file.memoryOffset, processTable[curProcessId].openfile.file.seg);
    444e:	66 8b 16 70 e9       	mov    edx,DWORD PTR ds:0xe970
    4453:	66 89 d0             	mov    eax,edx
    4456:	66 c1 e0 03          	shl    eax,0x3
    445a:	66 01 d0             	add    eax,edx
    445d:	66 01 c0             	add    eax,eax
    4460:	66 01 d0             	add    eax,edx
    4463:	66 c1 e0 02          	shl    eax,0x2
    4467:	66 01 d0             	add    eax,edx
    446a:	66 c1 e0 02          	shl    eax,0x2
    446e:	66 05 78 d2 00 00    	add    eax,0xd278
    4474:	67 66 8b 30          	mov    esi,DWORD PTR [eax]
    4478:	66 8b 16 70 e9       	mov    edx,DWORD PTR ds:0xe970
    447d:	66 89 d0             	mov    eax,edx
    4480:	66 c1 e0 03          	shl    eax,0x3
    4484:	66 01 d0             	add    eax,edx
    4487:	66 01 c0             	add    eax,eax
    448a:	66 01 d0             	add    eax,edx
    448d:	66 c1 e0 02          	shl    eax,0x2
    4491:	66 01 d0             	add    eax,edx
    4494:	66 c1 e0 02          	shl    eax,0x2
    4498:	66 05 7c d2 00 00    	add    eax,0xd27c
    449e:	67 66 8b 18          	mov    ebx,DWORD PTR [eax]
    44a2:	66 8b 16 70 e9       	mov    edx,DWORD PTR ds:0xe970
    44a7:	66 89 d0             	mov    eax,edx
    44aa:	66 c1 e0 03          	shl    eax,0x3
    44ae:	66 01 d0             	add    eax,edx
    44b1:	66 01 c0             	add    eax,eax
    44b4:	66 01 d0             	add    eax,edx
    44b7:	66 c1 e0 02          	shl    eax,0x2
    44bb:	66 01 d0             	add    eax,edx
    44be:	66 c1 e0 02          	shl    eax,0x2
    44c2:	66 05 80 d2 00 00    	add    eax,0xd280
    44c8:	67 66 8b 08          	mov    ecx,DWORD PTR [eax]
    44cc:	66 8b 16 70 e9       	mov    edx,DWORD PTR ds:0xe970
    44d1:	66 89 d0             	mov    eax,edx
    44d4:	66 c1 e0 03          	shl    eax,0x3
    44d8:	66 01 d0             	add    eax,edx
    44db:	66 01 c0             	add    eax,eax
    44de:	66 01 d0             	add    eax,edx
    44e1:	66 c1 e0 02          	shl    eax,0x2
    44e5:	66 01 d0             	add    eax,edx
    44e8:	66 c1 e0 02          	shl    eax,0x2
    44ec:	66 05 70 d2 00 00    	add    eax,0xd270
    44f2:	67 66 8b 10          	mov    edx,DWORD PTR [eax]
    44f6:	66 89 d0             	mov    eax,edx
    44f9:	66 01 c0             	add    eax,eax
    44fc:	66 01 d0             	add    eax,edx
    44ff:	66 c1 e0 02          	shl    eax,0x2
    4503:	66 01 d0             	add    eax,edx
    4506:	66 c1 e0 02          	shl    eax,0x2
    450a:	66 01 d0             	add    eax,edx
    450d:	66 c1 e0 02          	shl    eax,0x2
    4511:	66 05 84 c0 00 00    	add    eax,0xc084
    4517:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    451b:	67 66 89 74 24 0c    	mov    DWORD PTR [esp+0xc],esi
    4521:	67 66 89 5c 24 08    	mov    DWORD PTR [esp+0x8],ebx
    4527:	67 66 89 4c 24 04    	mov    DWORD PTR [esp+0x4],ecx
    452d:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    4532:	66 e8 d2 de ff ff    	call   240a <_write>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:484
		processTable[curProcessId].openfile.file.count--;
    4538:	66 8b 16 70 e9       	mov    edx,DWORD PTR ds:0xe970
    453d:	66 89 d0             	mov    eax,edx
    4540:	66 c1 e0 03          	shl    eax,0x3
    4544:	66 01 d0             	add    eax,edx
    4547:	66 01 c0             	add    eax,eax
    454a:	66 01 d0             	add    eax,edx
    454d:	66 c1 e0 02          	shl    eax,0x2
    4551:	66 01 d0             	add    eax,edx
    4554:	66 c1 e0 02          	shl    eax,0x2
    4558:	66 05 68 d2 00 00    	add    eax,0xd268
    455e:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    4562:	67 66 8d 48 ff       	lea    ecx,[eax-0x1]
    4567:	66 89 d0             	mov    eax,edx
    456a:	66 c1 e0 03          	shl    eax,0x3
    456e:	66 01 d0             	add    eax,edx
    4571:	66 01 c0             	add    eax,eax
    4574:	66 01 d0             	add    eax,edx
    4577:	66 c1 e0 02          	shl    eax,0x2
    457b:	66 01 d0             	add    eax,edx
    457e:	66 c1 e0 02          	shl    eax,0x2
    4582:	66 05 68 d2 00 00    	add    eax,0xd268
    4588:	67 66 89 08          	mov    DWORD PTR [eax],ecx
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:485
		return 200;
    458c:	66 b8 c8 00 00 00    	mov    eax,0xc8
    4592:	eb 06                	jmp    459a <_fclose+0x1a5>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:487
	}
	return 500;
    4594:	66 b8 f4 01 00 00    	mov    eax,0x1f4
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:488
}
    459a:	66 83 c4 10          	add    esp,0x10
    459e:	66 5b                	pop    ebx
    45a0:	66 5e                	pop    esi
    45a2:	66 5d                	pop    ebp
    45a4:	66 c3                	ret    

000045a6 <_fseek>:
fseek():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:490
int fseek(char *name, int offset)
{
    45a6:	66 55                	push   ebp
    45a8:	66 89 e5             	mov    ebp,esp
    45ab:	66 83 ec 08          	sub    esp,0x8
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:491
	if (strcmp(processTable[curProcessId].openfile.file.name, name) == 0) {
    45af:	66 8b 16 70 e9       	mov    edx,DWORD PTR ds:0xe970
    45b4:	66 89 d0             	mov    eax,edx
    45b7:	66 c1 e0 03          	shl    eax,0x3
    45bb:	66 01 d0             	add    eax,edx
    45be:	66 01 c0             	add    eax,eax
    45c1:	66 01 d0             	add    eax,edx
    45c4:	66 c1 e0 02          	shl    eax,0x2
    45c8:	66 01 d0             	add    eax,edx
    45cb:	66 c1 e0 02          	shl    eax,0x2
    45cf:	66 83 e8 80          	sub    eax,0xffffff80
    45d3:	66 05 60 d1 00 00    	add    eax,0xd160
    45d9:	67 66 8d 50 10       	lea    edx,[eax+0x10]
    45de:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    45e3:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    45e9:	67 66 89 14 24       	mov    DWORD PTR [esp],edx
    45ee:	66 e8 d2 ee ff ff    	call   34c6 <_strcmp>
    45f4:	66 85 c0             	test   eax,eax
    45f7:	75 38                	jne    4631 <_fseek+0x8b>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:492
		processTable[curProcessId].openfile.offset = offset;
    45f9:	66 8b 16 70 e9       	mov    edx,DWORD PTR ds:0xe970
    45fe:	66 89 d0             	mov    eax,edx
    4601:	66 c1 e0 03          	shl    eax,0x3
    4605:	66 01 d0             	add    eax,edx
    4608:	66 01 c0             	add    eax,eax
    460b:	66 01 d0             	add    eax,edx
    460e:	66 c1 e0 02          	shl    eax,0x2
    4612:	66 01 d0             	add    eax,edx
    4615:	66 c1 e0 02          	shl    eax,0x2
    4619:	67 66 8d 90 ec d1 00 	lea    edx,[eax+0xd1ec]
    4620:	00 
    4621:	67 66 8b 45 0c       	mov    eax,DWORD PTR [ebp+0xc]
    4626:	67 66 89 02          	mov    DWORD PTR [edx],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:493
		return offset;
    462a:	67 66 8b 45 0c       	mov    eax,DWORD PTR [ebp+0xc]
    462f:	eb 06                	jmp    4637 <_fseek+0x91>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:495
	}
	return 0;
    4631:	66 b8 00 00 00 00    	mov    eax,0x0
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:496
}
    4637:	66 c9                	leave  
    4639:	66 c3                	ret    

0000463b <_fread>:
fread():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:498
int fread(char *name, char * buffer, int count)
{
    463b:	66 55                	push   ebp
    463d:	66 89 e5             	mov    ebp,esp
    4640:	66 53                	push   ebx
    4642:	66 83 ec 10          	sub    esp,0x10
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:499
	if (strcmp(processTable[curProcessId].openfile.file.name, name) == 0) {
    4646:	66 8b 16 70 e9       	mov    edx,DWORD PTR ds:0xe970
    464b:	66 89 d0             	mov    eax,edx
    464e:	66 c1 e0 03          	shl    eax,0x3
    4652:	66 01 d0             	add    eax,edx
    4655:	66 01 c0             	add    eax,eax
    4658:	66 01 d0             	add    eax,edx
    465b:	66 c1 e0 02          	shl    eax,0x2
    465f:	66 01 d0             	add    eax,edx
    4662:	66 c1 e0 02          	shl    eax,0x2
    4666:	66 83 e8 80          	sub    eax,0xffffff80
    466a:	66 05 60 d1 00 00    	add    eax,0xd160
    4670:	67 66 8d 50 10       	lea    edx,[eax+0x10]
    4675:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    467a:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    4680:	67 66 89 14 24       	mov    DWORD PTR [esp],edx
    4685:	66 e8 3b ee ff ff    	call   34c6 <_strcmp>
    468b:	66 85 c0             	test   eax,eax
    468e:	0f 85 b9 00          	jne    474b <_fread+0x110>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:500
		processTable[curProcessId].openfile.file_ops.read(&processTable[curProcessId].openfile, buffer, count, processTable[curProcessId].openfile.offset);
    4692:	66 8b 16 70 e9       	mov    edx,DWORD PTR ds:0xe970
    4697:	66 89 d0             	mov    eax,edx
    469a:	66 c1 e0 03          	shl    eax,0x3
    469e:	66 01 d0             	add    eax,edx
    46a1:	66 01 c0             	add    eax,eax
    46a4:	66 01 d0             	add    eax,edx
    46a7:	66 c1 e0 02          	shl    eax,0x2
    46ab:	66 01 d0             	add    eax,edx
    46ae:	66 c1 e0 02          	shl    eax,0x2
    46b2:	66 05 84 d2 00 00    	add    eax,0xd284
    46b8:	67 66 8b 08          	mov    ecx,DWORD PTR [eax]
    46bc:	66 8b 16 70 e9       	mov    edx,DWORD PTR ds:0xe970
    46c1:	66 89 d0             	mov    eax,edx
    46c4:	66 c1 e0 03          	shl    eax,0x3
    46c8:	66 01 d0             	add    eax,edx
    46cb:	66 01 c0             	add    eax,eax
    46ce:	66 01 d0             	add    eax,edx
    46d1:	66 c1 e0 02          	shl    eax,0x2
    46d5:	66 01 d0             	add    eax,edx
    46d8:	66 c1 e0 02          	shl    eax,0x2
    46dc:	66 05 ec d1 00 00    	add    eax,0xd1ec
    46e2:	67 66 8b 18          	mov    ebx,DWORD PTR [eax]
    46e6:	66 8b 16 70 e9       	mov    edx,DWORD PTR ds:0xe970
    46eb:	66 89 d0             	mov    eax,edx
    46ee:	66 c1 e0 03          	shl    eax,0x3
    46f2:	66 01 d0             	add    eax,edx
    46f5:	66 01 c0             	add    eax,eax
    46f8:	66 01 d0             	add    eax,edx
    46fb:	66 c1 e0 02          	shl    eax,0x2
    46ff:	66 01 d0             	add    eax,edx
    4702:	66 c1 e0 02          	shl    eax,0x2
    4706:	66 83 e8 80          	sub    eax,0xffffff80
    470a:	66 05 60 d1 00 00    	add    eax,0xd160
    4710:	67 66 8d 50 0c       	lea    edx,[eax+0xc]
    4715:	67 66 89 5c 24 0c    	mov    DWORD PTR [esp+0xc],ebx
    471b:	67 66 8b 45 10       	mov    eax,DWORD PTR [ebp+0x10]
    4720:	67 66 89 44 24 08    	mov    DWORD PTR [esp+0x8],eax
    4726:	67 66 8b 45 0c       	mov    eax,DWORD PTR [ebp+0xc]
    472b:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    4731:	67 66 89 14 24       	mov    DWORD PTR [esp],edx
    4736:	66 ff d1             	call   ecx
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:501
		return strlen(buffer);
    4739:	67 66 8b 45 0c       	mov    eax,DWORD PTR [ebp+0xc]
    473e:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    4743:	66 e8 ac ec ff ff    	call   33f5 <_strlen>
    4749:	eb 06                	jmp    4751 <_fread+0x116>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:503
	}
	return 0;
    474b:	66 b8 00 00 00 00    	mov    eax,0x0
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:504
}
    4751:	66 83 c4 10          	add    esp,0x10
    4755:	66 5b                	pop    ebx
    4757:	66 5d                	pop    ebp
    4759:	66 c3                	ret    

0000475b <_fwrite>:
fwrite():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:506
int fwrite(char *name, char * buffer, int count)
{
    475b:	66 55                	push   ebp
    475d:	66 89 e5             	mov    ebp,esp
    4760:	66 53                	push   ebx
    4762:	66 83 ec 10          	sub    esp,0x10
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:507
	if (strcmp(processTable[curProcessId].openfile.file.name, name) == 0) {
    4766:	66 8b 16 70 e9       	mov    edx,DWORD PTR ds:0xe970
    476b:	66 89 d0             	mov    eax,edx
    476e:	66 c1 e0 03          	shl    eax,0x3
    4772:	66 01 d0             	add    eax,edx
    4775:	66 01 c0             	add    eax,eax
    4778:	66 01 d0             	add    eax,edx
    477b:	66 c1 e0 02          	shl    eax,0x2
    477f:	66 01 d0             	add    eax,edx
    4782:	66 c1 e0 02          	shl    eax,0x2
    4786:	66 83 e8 80          	sub    eax,0xffffff80
    478a:	66 05 60 d1 00 00    	add    eax,0xd160
    4790:	67 66 8d 50 10       	lea    edx,[eax+0x10]
    4795:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    479a:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    47a0:	67 66 89 14 24       	mov    DWORD PTR [esp],edx
    47a5:	66 e8 1b ed ff ff    	call   34c6 <_strcmp>
    47ab:	66 85 c0             	test   eax,eax
    47ae:	0f 85 b9 00          	jne    486b <_fwrite+0x110>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:508
		processTable[curProcessId].openfile.file_ops.write(&processTable[curProcessId].openfile, buffer, count, processTable[curProcessId].openfile.offset);
    47b2:	66 8b 16 70 e9       	mov    edx,DWORD PTR ds:0xe970
    47b7:	66 89 d0             	mov    eax,edx
    47ba:	66 c1 e0 03          	shl    eax,0x3
    47be:	66 01 d0             	add    eax,edx
    47c1:	66 01 c0             	add    eax,eax
    47c4:	66 01 d0             	add    eax,edx
    47c7:	66 c1 e0 02          	shl    eax,0x2
    47cb:	66 01 d0             	add    eax,edx
    47ce:	66 c1 e0 02          	shl    eax,0x2
    47d2:	66 05 88 d2 00 00    	add    eax,0xd288
    47d8:	67 66 8b 08          	mov    ecx,DWORD PTR [eax]
    47dc:	66 8b 16 70 e9       	mov    edx,DWORD PTR ds:0xe970
    47e1:	66 89 d0             	mov    eax,edx
    47e4:	66 c1 e0 03          	shl    eax,0x3
    47e8:	66 01 d0             	add    eax,edx
    47eb:	66 01 c0             	add    eax,eax
    47ee:	66 01 d0             	add    eax,edx
    47f1:	66 c1 e0 02          	shl    eax,0x2
    47f5:	66 01 d0             	add    eax,edx
    47f8:	66 c1 e0 02          	shl    eax,0x2
    47fc:	66 05 ec d1 00 00    	add    eax,0xd1ec
    4802:	67 66 8b 18          	mov    ebx,DWORD PTR [eax]
    4806:	66 8b 16 70 e9       	mov    edx,DWORD PTR ds:0xe970
    480b:	66 89 d0             	mov    eax,edx
    480e:	66 c1 e0 03          	shl    eax,0x3
    4812:	66 01 d0             	add    eax,edx
    4815:	66 01 c0             	add    eax,eax
    4818:	66 01 d0             	add    eax,edx
    481b:	66 c1 e0 02          	shl    eax,0x2
    481f:	66 01 d0             	add    eax,edx
    4822:	66 c1 e0 02          	shl    eax,0x2
    4826:	66 83 e8 80          	sub    eax,0xffffff80
    482a:	66 05 60 d1 00 00    	add    eax,0xd160
    4830:	67 66 8d 50 0c       	lea    edx,[eax+0xc]
    4835:	67 66 89 5c 24 0c    	mov    DWORD PTR [esp+0xc],ebx
    483b:	67 66 8b 45 10       	mov    eax,DWORD PTR [ebp+0x10]
    4840:	67 66 89 44 24 08    	mov    DWORD PTR [esp+0x8],eax
    4846:	67 66 8b 45 0c       	mov    eax,DWORD PTR [ebp+0xc]
    484b:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    4851:	67 66 89 14 24       	mov    DWORD PTR [esp],edx
    4856:	66 ff d1             	call   ecx
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:509
		return strlen(buffer);
    4859:	67 66 8b 45 0c       	mov    eax,DWORD PTR [ebp+0xc]
    485e:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    4863:	66 e8 8c eb ff ff    	call   33f5 <_strlen>
    4869:	eb 06                	jmp    4871 <_fwrite+0x116>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:511
	}
	return 0;
    486b:	66 b8 00 00 00 00    	mov    eax,0x0
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:512
}
    4871:	66 83 c4 10          	add    esp,0x10
    4875:	66 5b                	pop    ebx
    4877:	66 5d                	pop    ebp
    4879:	66 c3                	ret    

0000487b <_fcreate>:
fcreate():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:515

void fcreate(char * name)
{
    487b:	66 55                	push   ebp
    487d:	66 89 e5             	mov    ebp,esp
    4880:	66 57                	push   edi
    4882:	66 56                	push   esi
    4884:	66 81 ec b0 01 00 00 	sub    esp,0x1b0
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:517
	int i;
	for (i = 0; i < LenOfFat; ++i)
    488b:	67 66 c7 45 f4 00 00 	mov    DWORD PTR [ebp-0xc],0x0
    4892:	00 00 
    4894:	eb 1c                	jmp    48b2 <_fcreate+0x37>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:519
	{
		if (FAT[i] == 0)
    4896:	66 8b 16 e0 a7       	mov    edx,DWORD PTR ds:0xa7e0
    489b:	67 66 8b 45 f4       	mov    eax,DWORD PTR [ebp-0xc]
    48a0:	66 01 c0             	add    eax,eax
    48a3:	66 01 d0             	add    eax,edx
    48a6:	67 8b 00             	mov    ax,WORD PTR [eax]
    48a9:	85 c0                	test   ax,ax
    48ab:	74 12                	je     48bf <_fcreate+0x44>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:517
	for (i = 0; i < LenOfFat; ++i)
    48ad:	67 66 ff 45 f4       	inc    DWORD PTR [ebp-0xc]
    48b2:	67 66 81 7d f4 c7 00 	cmp    DWORD PTR [ebp-0xc],0xc7
    48b9:	00 00 
    48bb:	7e d9                	jle    4896 <_fcreate+0x1b>
    48bd:	eb 01                	jmp    48c0 <_fcreate+0x45>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:520
			break;
    48bf:	90                   	nop
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:522
	}
	FAT[i] = 0xffff;
    48c0:	66 8b 16 e0 a7       	mov    edx,DWORD PTR ds:0xa7e0
    48c5:	67 66 8b 45 f4       	mov    eax,DWORD PTR [ebp-0xc]
    48ca:	66 01 c0             	add    eax,eax
    48cd:	66 01 d0             	add    eax,edx
    48d0:	67 c7 00 ff ff       	mov    WORD PTR [eax],0xffff
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:524
	struct info tmp;
	strncpy(name, tmp.name, strlen(name));
    48d5:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    48da:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    48df:	66 e8 10 eb ff ff    	call   33f5 <_strlen>
    48e5:	67 66 89 44 24 08    	mov    DWORD PTR [esp+0x8],eax
    48eb:	67 66 8d 85 20 ff ff 	lea    eax,[ebp-0xe0]
    48f2:	ff 
    48f3:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    48f9:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    48fe:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    4903:	66 e8 d2 ec ff ff    	call   35db <_strncpy>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:525
	tmp.size = 512;
    4909:	67 66 c7 85 48 ff ff 	mov    DWORD PTR [ebp-0xb8],0x200
    4910:	ff 00 02 00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:526
	tmp.lmaddress = (i - 1) * Cluster;
    4915:	67 66 8b 45 f4       	mov    eax,DWORD PTR [ebp-0xc]
    491a:	66 48                	dec    eax
    491c:	66 c1 e0 09          	shl    eax,0x9
    4920:	67 66 89 85 44 ff ff 	mov    DWORD PTR [ebp-0xbc],eax
    4927:	ff 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:527
	tmp.deleted = 0;
    4928:	67 66 c7 85 4c ff ff 	mov    DWORD PTR [ebp-0xb4],0x0
    492f:	ff 00 00 00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:528
	tmp.start = i;
    4934:	67 66 8b 45 f4       	mov    eax,DWORD PTR [ebp-0xc]
    4939:	67 66 89 85 50 ff ff 	mov    DWORD PTR [ebp-0xb0],eax
    4940:	ff 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:529
	hash(name, tmp);
    4941:	67 66 8d 44 24 04    	lea    eax,[esp+0x4]
    4947:	67 66 8d 95 20 ff ff 	lea    edx,[ebp-0xe0]
    494e:	ff 
    494f:	66 b9 35 00 00 00    	mov    ecx,0x35
    4955:	66 89 c7             	mov    edi,eax
    4958:	66 89 d6             	mov    esi,edx
    495b:	66 f3 a5             	rep movs DWORD PTR es:[di],DWORD PTR ds:[si]
    495e:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    4963:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    4968:	66 e8 68 ee ff ff    	call   37d6 <_hash>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:530
}
    496e:	90                   	nop
    496f:	66 81 c4 b0 01 00 00 	add    esp,0x1b0
    4976:	66 5e                	pop    esi
    4978:	66 5f                	pop    edi
    497a:	66 5d                	pop    ebp
    497c:	66 c3                	ret    

0000497e <_fdelete>:
fdelete():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:533

void fdelete(char * name)
{
    497e:	66 55                	push   ebp
    4980:	66 89 e5             	mov    ebp,esp
    4983:	66 83 ec 08          	sub    esp,0x8
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:534
	int tmp = find(name);
    4987:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    498c:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    4991:	66 e8 e6 ef ff ff    	call   397d <_find>
    4997:	67 66 89 45 fc       	mov    DWORD PTR [ebp-0x4],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:535
	information[tmp].deleted = 1;
    499c:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    49a1:	66 89 d0             	mov    eax,edx
    49a4:	66 01 c0             	add    eax,eax
    49a7:	66 01 d0             	add    eax,edx
    49aa:	66 c1 e0 02          	shl    eax,0x2
    49ae:	66 01 d0             	add    eax,edx
    49b1:	66 c1 e0 02          	shl    eax,0x2
    49b5:	66 01 d0             	add    eax,edx
    49b8:	66 c1 e0 02          	shl    eax,0x2
    49bc:	66 05 8c c0 00 00    	add    eax,0xc08c
    49c2:	67 66 c7 00 01 00 00 	mov    DWORD PTR [eax],0x1
    49c9:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:543
	// {
	// 	int tmpInd = FAT[num];
	// 	FAT[num] = 0;
	// 	num = tmpInd;
	// }
}
    49ca:	90                   	nop
    49cb:	66 c9                	leave  
    49cd:	66 c3                	ret    

000049cf <_readReal>:
readReal():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:546

int readReal(int seg, int memoryOffset, int size, int offset, char * buffer)
{
    49cf:	66 55                	push   ebp
    49d1:	66 89 e5             	mov    ebp,esp
    49d4:	66 53                	push   ebx
    49d6:	66 83 ec 18          	sub    esp,0x18
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:548
	int ds;
	__asm__("mov %ds, %eax\n");
    49da:	66 8c d8             	mov    eax,ds
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:549
	__asm__("pushl %eax");
    49dd:	66 50                	push   eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:550
	__asm__("popl %0":"=m"(ds));
    49df:	67 66 8f 45 f8       	pop    DWORD PTR [ebp-0x8]
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:551
	memcpy(seg, memoryOffset + offset, ds, (int)buffer, size);
    49e4:	67 66 8b 55 18       	mov    edx,DWORD PTR [ebp+0x18]
    49e9:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
    49ee:	67 66 8b 5d 0c       	mov    ebx,DWORD PTR [ebp+0xc]
    49f3:	67 66 8b 4d 14       	mov    ecx,DWORD PTR [ebp+0x14]
    49f8:	66 01 cb             	add    ebx,ecx
    49fb:	67 66 8b 4d 10       	mov    ecx,DWORD PTR [ebp+0x10]
    4a00:	67 66 89 4c 24 10    	mov    DWORD PTR [esp+0x10],ecx
    4a06:	67 66 89 54 24 0c    	mov    DWORD PTR [esp+0xc],edx
    4a0c:	67 66 89 44 24 08    	mov    DWORD PTR [esp+0x8],eax
    4a12:	67 66 89 5c 24 04    	mov    DWORD PTR [esp+0x4],ebx
    4a18:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    4a1d:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    4a22:	66 e8 af d9 ff ff    	call   23d7 <_memcpy>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:552
	return size;
    4a28:	67 66 8b 45 10       	mov    eax,DWORD PTR [ebp+0x10]
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:553
}
    4a2d:	66 83 c4 18          	add    esp,0x18
    4a31:	66 5b                	pop    ebx
    4a33:	66 5d                	pop    ebp
    4a35:	66 c3                	ret    

00004a37 <_writeReal>:
writeReal():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:556

int writeReal(int seg, int memoryOffset, int size, int offset, char * buffer)
{
    4a37:	66 55                	push   ebp
    4a39:	66 89 e5             	mov    ebp,esp
    4a3c:	66 53                	push   ebx
    4a3e:	66 83 ec 18          	sub    esp,0x18
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:558
	int ds;
	__asm__("mov %ds, %eax\n");
    4a42:	66 8c d8             	mov    eax,ds
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:559
	__asm__("pushl %eax");
    4a45:	66 50                	push   eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:560
	__asm__("popl %0":"=m"(ds));
    4a47:	67 66 8f 45 f8       	pop    DWORD PTR [ebp-0x8]
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:561
	memcpy(ds, (int)buffer, seg, memoryOffset + offset, size);
    4a4c:	67 66 8b 55 0c       	mov    edx,DWORD PTR [ebp+0xc]
    4a51:	67 66 8b 45 14       	mov    eax,DWORD PTR [ebp+0x14]
    4a56:	67 66 8d 1c 02       	lea    ebx,[edx+eax*1]
    4a5b:	67 66 8b 55 18       	mov    edx,DWORD PTR [ebp+0x18]
    4a60:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
    4a65:	67 66 8b 4d 10       	mov    ecx,DWORD PTR [ebp+0x10]
    4a6a:	67 66 89 4c 24 10    	mov    DWORD PTR [esp+0x10],ecx
    4a70:	67 66 89 5c 24 0c    	mov    DWORD PTR [esp+0xc],ebx
    4a76:	67 66 8b 4d 08       	mov    ecx,DWORD PTR [ebp+0x8]
    4a7b:	67 66 89 4c 24 08    	mov    DWORD PTR [esp+0x8],ecx
    4a81:	67 66 89 54 24 04    	mov    DWORD PTR [esp+0x4],edx
    4a87:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    4a8c:	66 e8 45 d9 ff ff    	call   23d7 <_memcpy>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:562
	return size;
    4a92:	67 66 8b 45 10       	mov    eax,DWORD PTR [ebp+0x10]
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:563
}
    4a97:	66 83 c4 18          	add    esp,0x18
    4a9b:	66 5b                	pop    ebx
    4a9d:	66 5d                	pop    ebp
    4a9f:	66 c3                	ret    

00004aa1 <_findNextProcessItem>:
findNextProcessItem():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:570



///////////// process ////////////////
int findNextProcessItem()
{
    4aa1:	66 55                	push   ebp
    4aa3:	66 89 e5             	mov    ebp,esp
    4aa6:	66 83 ec 08          	sub    esp,0x8
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:571
	int id = -1;
    4aaa:	67 66 c7 45 fc ff ff 	mov    DWORD PTR [ebp-0x4],0xffffffff
    4ab1:	ff ff 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:572
	while (id == -1) {
    4ab3:	eb 50                	jmp    4b05 <_findNextProcessItem+0x64>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:573
		int tmpProcessID = (curProcessId + 1) % Len;
    4ab5:	66 a1 70 e9          	mov    eax,ds:0xe970
    4ab9:	66 40                	inc    eax
    4abb:	66 b9 14 00 00 00    	mov    ecx,0x14
    4ac1:	66 99                	cdq    
    4ac3:	66 f7 f9             	idiv   ecx
    4ac6:	67 66 89 55 f8       	mov    DWORD PTR [ebp-0x8],edx
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:574
		if (processTable[tmpProcessID].id == -1) {
    4acb:	67 66 8b 55 f8       	mov    edx,DWORD PTR [ebp-0x8]
    4ad0:	66 89 d0             	mov    eax,edx
    4ad3:	66 c1 e0 03          	shl    eax,0x3
    4ad7:	66 01 d0             	add    eax,edx
    4ada:	66 01 c0             	add    eax,eax
    4add:	66 01 d0             	add    eax,edx
    4ae0:	66 c1 e0 02          	shl    eax,0x2
    4ae4:	66 01 d0             	add    eax,edx
    4ae7:	66 c1 e0 02          	shl    eax,0x2
    4aeb:	66 05 84 d1 00 00    	add    eax,0xd184
    4af1:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    4af5:	66 83 f8 ff          	cmp    eax,0xffffffff
    4af9:	75 0a                	jne    4b05 <_findNextProcessItem+0x64>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:575
			id = tmpProcessID;
    4afb:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
    4b00:	67 66 89 45 fc       	mov    DWORD PTR [ebp-0x4],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:572
	while (id == -1) {
    4b05:	67 66 83 7d fc ff    	cmp    DWORD PTR [ebp-0x4],0xffffffff
    4b0b:	74 a8                	je     4ab5 <_findNextProcessItem+0x14>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:578
		}
	}
	return id;
    4b0d:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:579
}
    4b12:	66 c9                	leave  
    4b14:	66 c3                	ret    

00004b16 <_initialProcessTable>:
initialProcessTable():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:583


void initialProcessTable()
{
    4b16:	66 55                	push   ebp
    4b18:	66 89 e5             	mov    ebp,esp
    4b1b:	66 83 ec 14          	sub    esp,0x14
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:584
	for (int i = 0; i < Len; ++i)
    4b1f:	67 66 c7 45 fc 00 00 	mov    DWORD PTR [ebp-0x4],0x0
    4b26:	00 00 
    4b28:	e9 38 01             	jmp    4c63 <_initialProcessTable+0x14d>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:586
	{
		processTable[i].id = -1;
    4b2b:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    4b30:	66 89 d0             	mov    eax,edx
    4b33:	66 c1 e0 03          	shl    eax,0x3
    4b37:	66 01 d0             	add    eax,edx
    4b3a:	66 01 c0             	add    eax,eax
    4b3d:	66 01 d0             	add    eax,edx
    4b40:	66 c1 e0 02          	shl    eax,0x2
    4b44:	66 01 d0             	add    eax,edx
    4b47:	66 c1 e0 02          	shl    eax,0x2
    4b4b:	66 05 84 d1 00 00    	add    eax,0xd184
    4b51:	67 66 c7 00 ff ff ff 	mov    DWORD PTR [eax],0xffffffff
    4b58:	ff 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:587
		processTable[i].status = Origin;
    4b59:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    4b5e:	66 89 d0             	mov    eax,edx
    4b61:	66 c1 e0 03          	shl    eax,0x3
    4b65:	66 01 d0             	add    eax,edx
    4b68:	66 01 c0             	add    eax,eax
    4b6b:	66 01 d0             	add    eax,edx
    4b6e:	66 c1 e0 02          	shl    eax,0x2
    4b72:	66 01 d0             	add    eax,edx
    4b75:	66 c1 e0 02          	shl    eax,0x2
    4b79:	66 05 90 d2 00 00    	add    eax,0xd290
    4b7f:	67 66 c7 00 00 00 00 	mov    DWORD PTR [eax],0x0
    4b86:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:588
		processTable[i].fatherID = -1;
    4b87:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    4b8c:	66 89 d0             	mov    eax,edx
    4b8f:	66 c1 e0 03          	shl    eax,0x3
    4b93:	66 01 d0             	add    eax,edx
    4b96:	66 01 c0             	add    eax,eax
    4b99:	66 01 d0             	add    eax,edx
    4b9c:	66 c1 e0 02          	shl    eax,0x2
    4ba0:	66 01 d0             	add    eax,edx
    4ba3:	66 c1 e0 02          	shl    eax,0x2
    4ba7:	66 05 b8 d1 00 00    	add    eax,0xd1b8
    4bad:	67 66 c7 00 ff ff ff 	mov    DWORD PTR [eax],0xffffffff
    4bb4:	ff 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:589
		processTable[i].sonID = -1;
    4bb5:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    4bba:	66 89 d0             	mov    eax,edx
    4bbd:	66 c1 e0 03          	shl    eax,0x3
    4bc1:	66 01 d0             	add    eax,edx
    4bc4:	66 01 c0             	add    eax,eax
    4bc7:	66 01 d0             	add    eax,edx
    4bca:	66 c1 e0 02          	shl    eax,0x2
    4bce:	66 01 d0             	add    eax,edx
    4bd1:	66 c1 e0 02          	shl    eax,0x2
    4bd5:	66 05 c0 d1 00 00    	add    eax,0xd1c0
    4bdb:	67 66 c7 00 ff ff ff 	mov    DWORD PTR [eax],0xffffffff
    4be2:	ff 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:590
		processTable[i].waitProcess = -1;
    4be3:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    4be8:	66 89 d0             	mov    eax,edx
    4beb:	66 c1 e0 03          	shl    eax,0x3
    4bef:	66 01 d0             	add    eax,edx
    4bf2:	66 01 c0             	add    eax,eax
    4bf5:	66 01 d0             	add    eax,edx
    4bf8:	66 c1 e0 02          	shl    eax,0x2
    4bfc:	66 01 d0             	add    eax,edx
    4bff:	66 c1 e0 02          	shl    eax,0x2
    4c03:	66 05 bc d1 00 00    	add    eax,0xd1bc
    4c09:	67 66 c7 00 ff ff ff 	mov    DWORD PTR [eax],0xffffffff
    4c10:	ff 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:591
		for (int j = 0; j < HeapLimit; ++j)
    4c11:	67 66 c7 45 f8 00 00 	mov    DWORD PTR [ebp-0x8],0x0
    4c18:	00 00 
    4c1a:	eb 3a                	jmp    4c56 <_initialProcessTable+0x140>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:593
		{
			processTable[i].heapArray[j] = -1;
    4c1c:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    4c21:	66 89 d0             	mov    eax,edx
    4c24:	66 c1 e0 03          	shl    eax,0x3
    4c28:	66 01 d0             	add    eax,edx
    4c2b:	66 01 c0             	add    eax,eax
    4c2e:	66 01 d0             	add    eax,edx
    4c31:	66 c1 e0 02          	shl    eax,0x2
    4c35:	66 01 d0             	add    eax,edx
    4c38:	67 66 8b 55 f8       	mov    edx,DWORD PTR [ebp-0x8]
    4c3d:	66 01 d0             	add    eax,edx
    4c40:	66 83 c0 18          	add    eax,0x18
    4c44:	67 66 c7 04 85 64 d1 	mov    DWORD PTR [eax*4+0xd164],0xffffffff
    4c4b:	00 00 ff ff ff ff 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:591
		for (int j = 0; j < HeapLimit; ++j)
    4c51:	67 66 ff 45 f8       	inc    DWORD PTR [ebp-0x8]
    4c56:	67 66 83 7d f8 04    	cmp    DWORD PTR [ebp-0x8],0x4
    4c5c:	7e be                	jle    4c1c <_initialProcessTable+0x106>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:584
	for (int i = 0; i < Len; ++i)
    4c5e:	67 66 ff 45 fc       	inc    DWORD PTR [ebp-0x4]
    4c63:	67 66 83 7d fc 13    	cmp    DWORD PTR [ebp-0x4],0x13
    4c69:	0f 8e be fe          	jle    4b2b <_initialProcessTable+0x15>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:598
		}

	}

	processTable[0].status = running;
    4c6d:	66 c7 06 90 d2 02 00 	mov    DWORD PTR ds:0xd290,0x2
    4c74:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:599
	strncpy("kernel", processTable[0].name, 6);
    4c76:	67 66 c7 44 24 08 06 	mov    DWORD PTR [esp+0x8],0x6
    4c7d:	00 00 00 
    4c80:	67 66 c7 44 24 04 94 	mov    DWORD PTR [esp+0x4],0xd194
    4c87:	d1 00 00 
    4c8a:	67 66 c7 04 24 dc 80 	mov    DWORD PTR [esp],0x80dc
    4c91:	00 00 
    4c93:	66 e8 42 e9 ff ff    	call   35db <_strncpy>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:600
	processTable[0].id = 0;
    4c99:	66 c7 06 84 d1 00 00 	mov    DWORD PTR ds:0xd184,0x0
    4ca0:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:601
	processTable[0].pcb.cs = 0x2000;
    4ca2:	c7 06 7a d1 00 20    	mov    WORD PTR ds:0xd17a,0x2000
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:602
	processTable[0].pcb.ip = 0x0;
    4ca8:	c7 06 78 d1 00 00    	mov    WORD PTR ds:0xd178,0x0
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:603
	processTable[0].pcb.ss_now = 0x2000;
    4cae:	c7 06 80 d1 00 20    	mov    WORD PTR ds:0xd180,0x2000
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:604
	processTable[0].pcb.sp_now = 0xffff;
    4cb4:	c7 06 7e d1 ff ff    	mov    WORD PTR ds:0xd17e,0xffff
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:605
	processTable[0].pageID = curPageId;
    4cba:	66 a1 80 a2          	mov    eax,ds:0xa280
    4cbe:	66 a3 8c d2          	mov    ds:0xd28c,eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:607
	// curProcessId = 1;
}
    4cc2:	90                   	nop
    4cc3:	66 c9                	leave  
    4cc5:	66 c3                	ret    

00004cc7 <_createProcess>:
createProcess():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:612


//size要包括栈的大小
void createProcess(int id, char * name, int size, int cs, int ip, int ss, int sp, int blockNum)
{
    4cc7:	66 55                	push   ebp
    4cc9:	66 89 e5             	mov    ebp,esp
    4ccc:	66 83 ec 0c          	sub    esp,0xc
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:613
	processTable[id].id = id;
    4cd0:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    4cd5:	66 89 d0             	mov    eax,edx
    4cd8:	66 c1 e0 03          	shl    eax,0x3
    4cdc:	66 01 d0             	add    eax,edx
    4cdf:	66 01 c0             	add    eax,eax
    4ce2:	66 01 d0             	add    eax,edx
    4ce5:	66 c1 e0 02          	shl    eax,0x2
    4ce9:	66 01 d0             	add    eax,edx
    4cec:	66 c1 e0 02          	shl    eax,0x2
    4cf0:	67 66 8d 90 84 d1 00 	lea    edx,[eax+0xd184]
    4cf7:	00 
    4cf8:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    4cfd:	67 66 89 02          	mov    DWORD PTR [edx],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:614
	processTable[id].status = ready;
    4d01:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    4d06:	66 89 d0             	mov    eax,edx
    4d09:	66 c1 e0 03          	shl    eax,0x3
    4d0d:	66 01 d0             	add    eax,edx
    4d10:	66 01 c0             	add    eax,eax
    4d13:	66 01 d0             	add    eax,edx
    4d16:	66 c1 e0 02          	shl    eax,0x2
    4d1a:	66 01 d0             	add    eax,edx
    4d1d:	66 c1 e0 02          	shl    eax,0x2
    4d21:	66 05 90 d2 00 00    	add    eax,0xd290
    4d27:	67 66 c7 00 01 00 00 	mov    DWORD PTR [eax],0x1
    4d2e:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:617
	// int blockNum = findEnoughBlock(size);
	// blockNum = require(size, blockNum);
	processTable[id].blockNum = blockNum;
    4d2f:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    4d34:	66 89 d0             	mov    eax,edx
    4d37:	66 c1 e0 03          	shl    eax,0x3
    4d3b:	66 01 d0             	add    eax,edx
    4d3e:	66 01 c0             	add    eax,eax
    4d41:	66 01 d0             	add    eax,edx
    4d44:	66 c1 e0 02          	shl    eax,0x2
    4d48:	66 01 d0             	add    eax,edx
    4d4b:	66 c1 e0 02          	shl    eax,0x2
    4d4f:	67 66 8d 90 88 d1 00 	lea    edx,[eax+0xd188]
    4d56:	00 
    4d57:	67 66 8b 45 24       	mov    eax,DWORD PTR [ebp+0x24]
    4d5c:	67 66 89 02          	mov    DWORD PTR [edx],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:618
	strncpy(name, processTable[id].name, strlen(name));
    4d60:	67 66 8b 45 0c       	mov    eax,DWORD PTR [ebp+0xc]
    4d65:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    4d6a:	66 e8 85 e6 ff ff    	call   33f5 <_strlen>
    4d70:	66 89 c1             	mov    ecx,eax
    4d73:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    4d78:	66 89 d0             	mov    eax,edx
    4d7b:	66 c1 e0 03          	shl    eax,0x3
    4d7f:	66 01 d0             	add    eax,edx
    4d82:	66 01 c0             	add    eax,eax
    4d85:	66 01 d0             	add    eax,edx
    4d88:	66 c1 e0 02          	shl    eax,0x2
    4d8c:	66 01 d0             	add    eax,edx
    4d8f:	66 c1 e0 02          	shl    eax,0x2
    4d93:	66 83 c0 30          	add    eax,0x30
    4d97:	66 05 60 d1 00 00    	add    eax,0xd160
    4d9d:	66 83 c0 04          	add    eax,0x4
    4da1:	67 66 89 4c 24 08    	mov    DWORD PTR [esp+0x8],ecx
    4da7:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    4dad:	67 66 8b 45 0c       	mov    eax,DWORD PTR [ebp+0xc]
    4db2:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    4db7:	66 e8 1e e8 ff ff    	call   35db <_strncpy>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:630
	//以下部分代码取巧，方法是直接改变cs和ss段（加上偏移量右移4位的值）以使得程序（org 0h）不需要org偏移量。
	// processTable[id].pcb.cs = segOfPrg + (offsetOfPrg >> 4);
	// processTable[id].pcb.ip = 0;
	// processTable[id].pcb.ss_now = segOfPrg + (offsetOfPrg >> 4);
	// processTable[id].pcb.sp_now = size-1;
	processTable[id].pcb.cs = cs;
    4dbd:	67 66 8b 45 14       	mov    eax,DWORD PTR [ebp+0x14]
    4dc2:	66 89 c1             	mov    ecx,eax
    4dc5:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    4dca:	66 89 d0             	mov    eax,edx
    4dcd:	66 c1 e0 03          	shl    eax,0x3
    4dd1:	66 01 d0             	add    eax,edx
    4dd4:	66 01 c0             	add    eax,eax
    4dd7:	66 01 d0             	add    eax,edx
    4dda:	66 c1 e0 02          	shl    eax,0x2
    4dde:	66 01 d0             	add    eax,edx
    4de1:	66 c1 e0 02          	shl    eax,0x2
    4de5:	66 05 7a d1 00 00    	add    eax,0xd17a
    4deb:	67 89 08             	mov    WORD PTR [eax],cx
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:631
	processTable[id].pcb.ip = ip;
    4dee:	67 66 8b 45 18       	mov    eax,DWORD PTR [ebp+0x18]
    4df3:	66 89 c1             	mov    ecx,eax
    4df6:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    4dfb:	66 89 d0             	mov    eax,edx
    4dfe:	66 c1 e0 03          	shl    eax,0x3
    4e02:	66 01 d0             	add    eax,edx
    4e05:	66 01 c0             	add    eax,eax
    4e08:	66 01 d0             	add    eax,edx
    4e0b:	66 c1 e0 02          	shl    eax,0x2
    4e0f:	66 01 d0             	add    eax,edx
    4e12:	66 c1 e0 02          	shl    eax,0x2
    4e16:	66 05 78 d1 00 00    	add    eax,0xd178
    4e1c:	67 89 08             	mov    WORD PTR [eax],cx
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:632
	processTable[id].pcb.ss_now = ss;
    4e1f:	67 66 8b 45 1c       	mov    eax,DWORD PTR [ebp+0x1c]
    4e24:	66 89 c1             	mov    ecx,eax
    4e27:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    4e2c:	66 89 d0             	mov    eax,edx
    4e2f:	66 c1 e0 03          	shl    eax,0x3
    4e33:	66 01 d0             	add    eax,edx
    4e36:	66 01 c0             	add    eax,eax
    4e39:	66 01 d0             	add    eax,edx
    4e3c:	66 c1 e0 02          	shl    eax,0x2
    4e40:	66 01 d0             	add    eax,edx
    4e43:	66 c1 e0 02          	shl    eax,0x2
    4e47:	66 05 80 d1 00 00    	add    eax,0xd180
    4e4d:	67 89 08             	mov    WORD PTR [eax],cx
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:633
	processTable[id].pcb.sp_now = sp;
    4e50:	67 66 8b 45 20       	mov    eax,DWORD PTR [ebp+0x20]
    4e55:	66 89 c1             	mov    ecx,eax
    4e58:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    4e5d:	66 89 d0             	mov    eax,edx
    4e60:	66 c1 e0 03          	shl    eax,0x3
    4e64:	66 01 d0             	add    eax,edx
    4e67:	66 01 c0             	add    eax,eax
    4e6a:	66 01 d0             	add    eax,edx
    4e6d:	66 c1 e0 02          	shl    eax,0x2
    4e71:	66 01 d0             	add    eax,edx
    4e74:	66 c1 e0 02          	shl    eax,0x2
    4e78:	66 05 7e d1 00 00    	add    eax,0xd17e
    4e7e:	67 89 08             	mov    WORD PTR [eax],cx
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:634
	processTable[id].size = size;
    4e81:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    4e86:	66 89 d0             	mov    eax,edx
    4e89:	66 c1 e0 03          	shl    eax,0x3
    4e8d:	66 01 d0             	add    eax,edx
    4e90:	66 01 c0             	add    eax,eax
    4e93:	66 01 d0             	add    eax,edx
    4e96:	66 c1 e0 02          	shl    eax,0x2
    4e9a:	66 01 d0             	add    eax,edx
    4e9d:	66 c1 e0 02          	shl    eax,0x2
    4ea1:	67 66 8d 90 90 d1 00 	lea    edx,[eax+0xd190]
    4ea8:	00 
    4ea9:	67 66 8b 45 10       	mov    eax,DWORD PTR [ebp+0x10]
    4eae:	67 66 89 02          	mov    DWORD PTR [edx],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:635
	processTable[id].pageID = curPageId;
    4eb2:	66 8b 0e 80 a2       	mov    ecx,DWORD PTR ds:0xa280
    4eb7:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    4ebc:	66 89 d0             	mov    eax,edx
    4ebf:	66 c1 e0 03          	shl    eax,0x3
    4ec3:	66 01 d0             	add    eax,edx
    4ec6:	66 01 c0             	add    eax,eax
    4ec9:	66 01 d0             	add    eax,edx
    4ecc:	66 c1 e0 02          	shl    eax,0x2
    4ed0:	66 01 d0             	add    eax,edx
    4ed3:	66 c1 e0 02          	shl    eax,0x2
    4ed7:	66 05 8c d2 00 00    	add    eax,0xd28c
    4edd:	67 66 89 08          	mov    DWORD PTR [eax],ecx
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:637
	// loadReal(lmaddress, fileSize, offsetOfPrg, segOfPrg);
}
    4ee1:	90                   	nop
    4ee2:	66 c9                	leave  
    4ee4:	66 c3                	ret    

00004ee6 <_block>:
block():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:642

// 被内核阻塞的 waitProcess = -1
int quesize, tmp;
void block(int id)
{
    4ee6:	66 55                	push   ebp
    4ee8:	66 89 e5             	mov    ebp,esp
    4eeb:	66 83 ec 0c          	sub    esp,0xc
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:643
	__asm__("cli\n");
    4eef:	fa                   	cli    
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:644
	processTable[id].status = blocked;
    4ef0:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    4ef5:	66 89 d0             	mov    eax,edx
    4ef8:	66 c1 e0 03          	shl    eax,0x3
    4efc:	66 01 d0             	add    eax,edx
    4eff:	66 01 c0             	add    eax,eax
    4f02:	66 01 d0             	add    eax,edx
    4f05:	66 c1 e0 02          	shl    eax,0x2
    4f09:	66 01 d0             	add    eax,edx
    4f0c:	66 c1 e0 02          	shl    eax,0x2
    4f10:	66 05 90 d2 00 00    	add    eax,0xd290
    4f16:	67 66 c7 00 03 00 00 	mov    DWORD PTR [eax],0x3
    4f1d:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:645
	enqueue(&BlockedQue, id);
    4f1e:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    4f23:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    4f29:	67 66 c7 04 24 80 a7 	mov    DWORD PTR [esp],0xa780
    4f30:	00 00 
    4f32:	66 e8 60 2a 00 00    	call   7998 <_enqueue>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:646
	quesize = size(&ReadyQue);
    4f38:	67 66 c7 04 24 80 e9 	mov    DWORD PTR [esp],0xe980
    4f3f:	00 00 
    4f41:	66 e8 0b 2a 00 00    	call   7952 <_size>
    4f47:	66 a3 e0 e9          	mov    ds:0xe9e0,eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:647
	for (int i = 0; i < quesize; ++i)
    4f4b:	67 66 c7 45 fc 00 00 	mov    DWORD PTR [ebp-0x4],0x0
    4f52:	00 00 
    4f54:	eb 42                	jmp    4f98 <_block+0xb2>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:649
	{
		dequeue(&ReadyQue, &tmp);
    4f56:	67 66 c7 44 24 04 e8 	mov    DWORD PTR [esp+0x4],0xe9e8
    4f5d:	e9 00 00 
    4f60:	67 66 c7 04 24 80 e9 	mov    DWORD PTR [esp],0xe980
    4f67:	00 00 
    4f69:	66 e8 96 2a 00 00    	call   7a05 <_dequeue>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:650
		if (id != tmp)
    4f6f:	66 a1 e8 e9          	mov    eax,ds:0xe9e8
    4f73:	67 66 39 45 08       	cmp    DWORD PTR [ebp+0x8],eax
    4f78:	74 19                	je     4f93 <_block+0xad>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:651
			enqueue(&ReadyQue, tmp);
    4f7a:	66 a1 e8 e9          	mov    eax,ds:0xe9e8
    4f7e:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    4f84:	67 66 c7 04 24 80 e9 	mov    DWORD PTR [esp],0xe980
    4f8b:	00 00 
    4f8d:	66 e8 05 2a 00 00    	call   7998 <_enqueue>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:647
	for (int i = 0; i < quesize; ++i)
    4f93:	67 66 ff 45 fc       	inc    DWORD PTR [ebp-0x4]
    4f98:	66 a1 e0 e9          	mov    eax,ds:0xe9e0
    4f9c:	67 66 39 45 fc       	cmp    DWORD PTR [ebp-0x4],eax
    4fa1:	7c b3                	jl     4f56 <_block+0x70>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:653
	}
	__asm__("sti\n");
    4fa3:	fb                   	sti    
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:654
}
    4fa4:	90                   	nop
    4fa5:	66 c9                	leave  
    4fa7:	66 c3                	ret    

00004fa9 <_wakeup>:
wakeup():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:657

void wakeup(int id)
{
    4fa9:	66 55                	push   ebp
    4fab:	66 89 e5             	mov    ebp,esp
    4fae:	66 83 ec 0c          	sub    esp,0xc
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:658
	__asm__("cli\n");
    4fb2:	fa                   	cli    
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:659
	processTable[id].status = ready;
    4fb3:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    4fb8:	66 89 d0             	mov    eax,edx
    4fbb:	66 c1 e0 03          	shl    eax,0x3
    4fbf:	66 01 d0             	add    eax,edx
    4fc2:	66 01 c0             	add    eax,eax
    4fc5:	66 01 d0             	add    eax,edx
    4fc8:	66 c1 e0 02          	shl    eax,0x2
    4fcc:	66 01 d0             	add    eax,edx
    4fcf:	66 c1 e0 02          	shl    eax,0x2
    4fd3:	66 05 90 d2 00 00    	add    eax,0xd290
    4fd9:	67 66 c7 00 01 00 00 	mov    DWORD PTR [eax],0x1
    4fe0:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:660
	enqueue(&ReadyQue, id);
    4fe1:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    4fe6:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    4fec:	67 66 c7 04 24 80 e9 	mov    DWORD PTR [esp],0xe980
    4ff3:	00 00 
    4ff5:	66 e8 9d 29 00 00    	call   7998 <_enqueue>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:661
	quesize = size(&BlockedQue);
    4ffb:	67 66 c7 04 24 80 a7 	mov    DWORD PTR [esp],0xa780
    5002:	00 00 
    5004:	66 e8 48 29 00 00    	call   7952 <_size>
    500a:	66 a3 e0 e9          	mov    ds:0xe9e0,eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:662
	for (int i = 0; i < quesize; ++i)
    500e:	67 66 c7 45 fc 00 00 	mov    DWORD PTR [ebp-0x4],0x0
    5015:	00 00 
    5017:	eb 42                	jmp    505b <_wakeup+0xb2>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:664
	{
		dequeue(&BlockedQue, &tmp);
    5019:	67 66 c7 44 24 04 e8 	mov    DWORD PTR [esp+0x4],0xe9e8
    5020:	e9 00 00 
    5023:	67 66 c7 04 24 80 a7 	mov    DWORD PTR [esp],0xa780
    502a:	00 00 
    502c:	66 e8 d3 29 00 00    	call   7a05 <_dequeue>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:665
		if (id != tmp)
    5032:	66 a1 e8 e9          	mov    eax,ds:0xe9e8
    5036:	67 66 39 45 08       	cmp    DWORD PTR [ebp+0x8],eax
    503b:	74 19                	je     5056 <_wakeup+0xad>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:666
			enqueue(&BlockedQue, tmp);
    503d:	66 a1 e8 e9          	mov    eax,ds:0xe9e8
    5041:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    5047:	67 66 c7 04 24 80 a7 	mov    DWORD PTR [esp],0xa780
    504e:	00 00 
    5050:	66 e8 42 29 00 00    	call   7998 <_enqueue>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:662
	for (int i = 0; i < quesize; ++i)
    5056:	67 66 ff 45 fc       	inc    DWORD PTR [ebp-0x4]
    505b:	66 a1 e0 e9          	mov    eax,ds:0xe9e0
    505f:	67 66 39 45 fc       	cmp    DWORD PTR [ebp-0x4],eax
    5064:	7c b3                	jl     5019 <_wakeup+0x70>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:668
	}
	__asm__("sti\n");
    5066:	fb                   	sti    
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:669
}
    5067:	90                   	nop
    5068:	66 c9                	leave  
    506a:	66 c3                	ret    

0000506c <_schedule>:
schedule():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:675

// 注意当前的状态，画出队列图？
// 当前状态可能是running或blocked
int next;
void schedule()
{
    506c:	66 55                	push   ebp
    506e:	66 89 e5             	mov    ebp,esp
    5071:	66 83 ec 0c          	sub    esp,0xc
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:676
	int i = 0;
    5075:	67 66 c7 45 fc 00 00 	mov    DWORD PTR [ebp-0x4],0x0
    507c:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:677
	if (runSub == 1 && size(&ReadyQue) > 1)
    507e:	66 a1 bc a3          	mov    eax,ds:0xa3bc
    5082:	66 83 f8 01          	cmp    eax,0x1
    5086:	0f 85 0b 01          	jne    5195 <_schedule+0x129>
    508a:	67 66 c7 04 24 80 e9 	mov    DWORD PTR [esp],0xe980
    5091:	00 00 
    5093:	66 e8 b9 28 00 00    	call   7952 <_size>
    5099:	66 83 f8 01          	cmp    eax,0x1
    509d:	0f 8e f4 00          	jle    5195 <_schedule+0x129>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:681
	{
		// 注意区分状态
		do {
			dequeue(&ReadyQue, &next);
    50a1:	67 66 c7 44 24 04 28 	mov    DWORD PTR [esp+0x4],0xea28
    50a8:	ea 00 00 
    50ab:	67 66 c7 04 24 80 e9 	mov    DWORD PTR [esp],0xe980
    50b2:	00 00 
    50b4:	66 e8 4b 29 00 00    	call   7a05 <_dequeue>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:682
			if (next == 0) {
    50ba:	66 a1 28 ea          	mov    eax,ds:0xea28
    50be:	66 85 c0             	test   eax,eax
    50c1:	75 19                	jne    50dc <_schedule+0x70>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:683
				enqueue(&ReadyQue, next);
    50c3:	66 a1 28 ea          	mov    eax,ds:0xea28
    50c7:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    50cd:	67 66 c7 04 24 80 e9 	mov    DWORD PTR [esp],0xe980
    50d4:	00 00 
    50d6:	66 e8 bc 28 00 00    	call   7998 <_enqueue>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:685
			}
		} while (next == 0);
    50dc:	66 a1 28 ea          	mov    eax,ds:0xea28
    50e0:	66 85 c0             	test   eax,eax
    50e3:	74 bc                	je     50a1 <_schedule+0x35>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:686
		processTable[next].status = running;
    50e5:	66 8b 16 28 ea       	mov    edx,DWORD PTR ds:0xea28
    50ea:	66 89 d0             	mov    eax,edx
    50ed:	66 c1 e0 03          	shl    eax,0x3
    50f1:	66 01 d0             	add    eax,edx
    50f4:	66 01 c0             	add    eax,eax
    50f7:	66 01 d0             	add    eax,edx
    50fa:	66 c1 e0 02          	shl    eax,0x2
    50fe:	66 01 d0             	add    eax,edx
    5101:	66 c1 e0 02          	shl    eax,0x2
    5105:	66 05 90 d2 00 00    	add    eax,0xd290
    510b:	67 66 c7 00 02 00 00 	mov    DWORD PTR [eax],0x2
    5112:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:687
		if (processTable[curProcessId].status == running) {
    5113:	66 8b 16 70 e9       	mov    edx,DWORD PTR ds:0xe970
    5118:	66 89 d0             	mov    eax,edx
    511b:	66 c1 e0 03          	shl    eax,0x3
    511f:	66 01 d0             	add    eax,edx
    5122:	66 01 c0             	add    eax,eax
    5125:	66 01 d0             	add    eax,edx
    5128:	66 c1 e0 02          	shl    eax,0x2
    512c:	66 01 d0             	add    eax,edx
    512f:	66 c1 e0 02          	shl    eax,0x2
    5133:	66 05 90 d2 00 00    	add    eax,0xd290
    5139:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    513d:	66 83 f8 02          	cmp    eax,0x2
    5141:	75 47                	jne    518a <_schedule+0x11e>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:688
			processTable[curProcessId].status = ready;
    5143:	66 8b 16 70 e9       	mov    edx,DWORD PTR ds:0xe970
    5148:	66 89 d0             	mov    eax,edx
    514b:	66 c1 e0 03          	shl    eax,0x3
    514f:	66 01 d0             	add    eax,edx
    5152:	66 01 c0             	add    eax,eax
    5155:	66 01 d0             	add    eax,edx
    5158:	66 c1 e0 02          	shl    eax,0x2
    515c:	66 01 d0             	add    eax,edx
    515f:	66 c1 e0 02          	shl    eax,0x2
    5163:	66 05 90 d2 00 00    	add    eax,0xd290
    5169:	67 66 c7 00 01 00 00 	mov    DWORD PTR [eax],0x1
    5170:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:689
			enqueue(&ReadyQue, curProcessId);
    5171:	66 a1 70 e9          	mov    eax,ds:0xe970
    5175:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    517b:	67 66 c7 04 24 80 e9 	mov    DWORD PTR [esp],0xe980
    5182:	00 00 
    5184:	66 e8 0e 28 00 00    	call   7998 <_enqueue>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:691
		}
		curProcessId = next;
    518a:	66 a1 28 ea          	mov    eax,ds:0xea28
    518e:	66 a3 70 e9          	mov    ds:0xe970,eax
    5192:	e9 52 01             	jmp    52e7 <_schedule+0x27b>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:693
	}
	else if (runSub == 1 && size(&ReadyQue) == 1)
    5195:	66 a1 bc a3          	mov    eax,ds:0xa3bc
    5199:	66 83 f8 01          	cmp    eax,0x1
    519d:	0f 85 0f 01          	jne    52b0 <_schedule+0x244>
    51a1:	67 66 c7 04 24 80 e9 	mov    DWORD PTR [esp],0xe980
    51a8:	00 00 
    51aa:	66 e8 a2 27 00 00    	call   7952 <_size>
    51b0:	66 83 f8 01          	cmp    eax,0x1
    51b4:	0f 85 f8 00          	jne    52b0 <_schedule+0x244>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:696
	{
		// 从ring0到ring1，从ring1到ring0不同
		dequeue(&ReadyQue, &next);
    51b8:	67 66 c7 44 24 04 28 	mov    DWORD PTR [esp+0x4],0xea28
    51bf:	ea 00 00 
    51c2:	67 66 c7 04 24 80 e9 	mov    DWORD PTR [esp],0xe980
    51c9:	00 00 
    51cb:	66 e8 34 28 00 00    	call   7a05 <_dequeue>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:697
		if (next != 0) {
    51d1:	66 a1 28 ea          	mov    eax,ds:0xea28
    51d5:	66 85 c0             	test   eax,eax
    51d8:	74 52                	je     522c <_schedule+0x1c0>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:698
			processTable[next].status = running;
    51da:	66 8b 16 28 ea       	mov    edx,DWORD PTR ds:0xea28
    51df:	66 89 d0             	mov    eax,edx
    51e2:	66 c1 e0 03          	shl    eax,0x3
    51e6:	66 01 d0             	add    eax,edx
    51e9:	66 01 c0             	add    eax,eax
    51ec:	66 01 d0             	add    eax,edx
    51ef:	66 c1 e0 02          	shl    eax,0x2
    51f3:	66 01 d0             	add    eax,edx
    51f6:	66 c1 e0 02          	shl    eax,0x2
    51fa:	66 05 90 d2 00 00    	add    eax,0xd290
    5200:	67 66 c7 00 02 00 00 	mov    DWORD PTR [eax],0x2
    5207:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:699
			enqueue(&ReadyQue, curProcessId);
    5208:	66 a1 70 e9          	mov    eax,ds:0xe970
    520c:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    5212:	67 66 c7 04 24 80 e9 	mov    DWORD PTR [esp],0xe980
    5219:	00 00 
    521b:	66 e8 77 27 00 00    	call   7998 <_enqueue>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:700
			curProcessId = next;
    5221:	66 a1 28 ea          	mov    eax,ds:0xea28
    5225:	66 a3 70 e9          	mov    ds:0xe970,eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:697
		if (next != 0) {
    5229:	e9 bb 00             	jmp    52e7 <_schedule+0x27b>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:701
		} else if (processTable[curProcessId].status == running) {
    522c:	66 8b 16 70 e9       	mov    edx,DWORD PTR ds:0xe970
    5231:	66 89 d0             	mov    eax,edx
    5234:	66 c1 e0 03          	shl    eax,0x3
    5238:	66 01 d0             	add    eax,edx
    523b:	66 01 c0             	add    eax,eax
    523e:	66 01 d0             	add    eax,edx
    5241:	66 c1 e0 02          	shl    eax,0x2
    5245:	66 01 d0             	add    eax,edx
    5248:	66 c1 e0 02          	shl    eax,0x2
    524c:	66 05 90 d2 00 00    	add    eax,0xd290
    5252:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    5256:	66 83 f8 02          	cmp    eax,0x2
    525a:	75 1b                	jne    5277 <_schedule+0x20b>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:702
			enqueue(&ReadyQue, next);
    525c:	66 a1 28 ea          	mov    eax,ds:0xea28
    5260:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    5266:	67 66 c7 04 24 80 e9 	mov    DWORD PTR [esp],0xe980
    526d:	00 00 
    526f:	66 e8 23 27 00 00    	call   7998 <_enqueue>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:697
		if (next != 0) {
    5275:	eb 70                	jmp    52e7 <_schedule+0x27b>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:704
		} else {
			curProcessId = 0;
    5277:	66 c7 06 70 e9 00 00 	mov    DWORD PTR ds:0xe970,0x0
    527e:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:705
			processTable[curProcessId].status = running;
    5280:	66 8b 16 70 e9       	mov    edx,DWORD PTR ds:0xe970
    5285:	66 89 d0             	mov    eax,edx
    5288:	66 c1 e0 03          	shl    eax,0x3
    528c:	66 01 d0             	add    eax,edx
    528f:	66 01 c0             	add    eax,eax
    5292:	66 01 d0             	add    eax,edx
    5295:	66 c1 e0 02          	shl    eax,0x2
    5299:	66 01 d0             	add    eax,edx
    529c:	66 c1 e0 02          	shl    eax,0x2
    52a0:	66 05 90 d2 00 00    	add    eax,0xd290
    52a6:	67 66 c7 00 02 00 00 	mov    DWORD PTR [eax],0x2
    52ad:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:697
		if (next != 0) {
    52ae:	eb 37                	jmp    52e7 <_schedule+0x27b>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:710
		}
	}
	else
	{
		curProcessId = 0;
    52b0:	66 c7 06 70 e9 00 00 	mov    DWORD PTR ds:0xe970,0x0
    52b7:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:711
		processTable[curProcessId].status = running;
    52b9:	66 8b 16 70 e9       	mov    edx,DWORD PTR ds:0xe970
    52be:	66 89 d0             	mov    eax,edx
    52c1:	66 c1 e0 03          	shl    eax,0x3
    52c5:	66 01 d0             	add    eax,edx
    52c8:	66 01 c0             	add    eax,eax
    52cb:	66 01 d0             	add    eax,edx
    52ce:	66 c1 e0 02          	shl    eax,0x2
    52d2:	66 01 d0             	add    eax,edx
    52d5:	66 c1 e0 02          	shl    eax,0x2
    52d9:	66 05 90 d2 00 00    	add    eax,0xd290
    52df:	67 66 c7 00 02 00 00 	mov    DWORD PTR [eax],0x2
    52e6:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:713
	}
}
    52e7:	90                   	nop
    52e8:	66 c9                	leave  
    52ea:	66 c3                	ret    

000052ec <_do_fork>:
do_fork():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:720

//记得关中断
//进来之前已经save自己，出去之后restart到另外的进程
char name[40];
void do_fork()
{
    52ec:	66 55                	push   ebp
    52ee:	66 89 e5             	mov    ebp,esp
    52f1:	66 83 ec 48          	sub    esp,0x48
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:721
	int stackSize = 0x300;
    52f5:	67 66 c7 45 fc 00 03 	mov    DWORD PTR [ebp-0x4],0x300
    52fc:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:722
	strncpy(processTable[curProcessId].name, name, strlen(processTable[curProcessId].name));
    52fe:	66 8b 16 70 e9       	mov    edx,DWORD PTR ds:0xe970
    5303:	66 89 d0             	mov    eax,edx
    5306:	66 c1 e0 03          	shl    eax,0x3
    530a:	66 01 d0             	add    eax,edx
    530d:	66 01 c0             	add    eax,eax
    5310:	66 01 d0             	add    eax,edx
    5313:	66 c1 e0 02          	shl    eax,0x2
    5317:	66 01 d0             	add    eax,edx
    531a:	66 c1 e0 02          	shl    eax,0x2
    531e:	66 83 c0 30          	add    eax,0x30
    5322:	66 05 60 d1 00 00    	add    eax,0xd160
    5328:	66 83 c0 04          	add    eax,0x4
    532c:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    5331:	66 e8 be e0 ff ff    	call   33f5 <_strlen>
    5337:	66 89 c1             	mov    ecx,eax
    533a:	66 8b 16 70 e9       	mov    edx,DWORD PTR ds:0xe970
    533f:	66 89 d0             	mov    eax,edx
    5342:	66 c1 e0 03          	shl    eax,0x3
    5346:	66 01 d0             	add    eax,edx
    5349:	66 01 c0             	add    eax,eax
    534c:	66 01 d0             	add    eax,edx
    534f:	66 c1 e0 02          	shl    eax,0x2
    5353:	66 01 d0             	add    eax,edx
    5356:	66 c1 e0 02          	shl    eax,0x2
    535a:	66 83 c0 30          	add    eax,0x30
    535e:	66 05 60 d1 00 00    	add    eax,0xd160
    5364:	66 83 c0 04          	add    eax,0x4
    5368:	67 66 89 4c 24 08    	mov    DWORD PTR [esp+0x8],ecx
    536e:	67 66 c7 44 24 04 00 	mov    DWORD PTR [esp+0x4],0xea00
    5375:	ea 00 00 
    5378:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    537d:	66 e8 58 e2 ff ff    	call   35db <_strncpy>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:723
	concate(name, "Sub");
    5383:	67 66 c7 44 24 04 e3 	mov    DWORD PTR [esp+0x4],0x80e3
    538a:	80 00 00 
    538d:	67 66 c7 04 24 00 ea 	mov    DWORD PTR [esp],0xea00
    5394:	00 00 
    5396:	66 e8 8f e0 ff ff    	call   342b <_concate>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:724
	int blockNum = findEnoughBlock(stackSize);
    539c:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
    53a1:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    53a6:	66 e8 ca 1d 00 00    	call   7176 <_findEnoughBlock>
    53ac:	67 66 89 45 f8       	mov    DWORD PTR [ebp-0x8],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:725
	blockNum = require(stackSize, blockNum);
    53b1:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
    53b6:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    53bc:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
    53c1:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    53c6:	66 e8 53 1e 00 00    	call   721f <_require>
    53cc:	67 66 89 45 f8       	mov    DWORD PTR [ebp-0x8],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:727
	int segOfSour, segOfDes;
	int segMask = 0xf0000;
    53d1:	67 66 c7 45 f4 00 00 	mov    DWORD PTR [ebp-0xc],0xf0000
    53d8:	0f 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:728
	int offsetMask = 0x0000ffff;
    53da:	67 66 c7 45 f0 ff ff 	mov    DWORD PTR [ebp-0x10],0xffff
    53e1:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:729
	segOfDes = (memoryTable[blockNum].beginAddr & segMask) >> 4;
    53e3:	67 66 8b 55 f8       	mov    edx,DWORD PTR [ebp-0x8]
    53e8:	66 89 d0             	mov    eax,edx
    53eb:	66 01 c0             	add    eax,eax
    53ee:	66 01 d0             	add    eax,edx
    53f1:	66 c1 e0 03          	shl    eax,0x3
    53f5:	66 05 c0 a3 00 00    	add    eax,0xa3c0
    53fb:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    53ff:	67 66 23 45 f4       	and    eax,DWORD PTR [ebp-0xc]
    5404:	66 c1 f8 04          	sar    eax,0x4
    5408:	67 66 89 45 ec       	mov    DWORD PTR [ebp-0x14],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:730
	segOfSour = ((memoryTable[processTable[curProcessId].blockNum].endAddr - stackSize + 1) & segMask) >> 4;
    540d:	66 8b 16 70 e9       	mov    edx,DWORD PTR ds:0xe970
    5412:	66 89 d0             	mov    eax,edx
    5415:	66 c1 e0 03          	shl    eax,0x3
    5419:	66 01 d0             	add    eax,edx
    541c:	66 01 c0             	add    eax,eax
    541f:	66 01 d0             	add    eax,edx
    5422:	66 c1 e0 02          	shl    eax,0x2
    5426:	66 01 d0             	add    eax,edx
    5429:	66 c1 e0 02          	shl    eax,0x2
    542d:	66 05 88 d1 00 00    	add    eax,0xd188
    5433:	67 66 8b 10          	mov    edx,DWORD PTR [eax]
    5437:	66 89 d0             	mov    eax,edx
    543a:	66 01 c0             	add    eax,eax
    543d:	66 01 d0             	add    eax,edx
    5440:	66 c1 e0 03          	shl    eax,0x3
    5444:	66 05 c4 a3 00 00    	add    eax,0xa3c4
    544a:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    544e:	67 66 2b 45 fc       	sub    eax,DWORD PTR [ebp-0x4]
    5453:	66 40                	inc    eax
    5455:	67 66 23 45 f4       	and    eax,DWORD PTR [ebp-0xc]
    545a:	66 c1 f8 04          	sar    eax,0x4
    545e:	67 66 89 45 e8       	mov    DWORD PTR [ebp-0x18],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:731
	int cs = processTable[curProcessId].pcb.cs, ip = processTable[curProcessId].pcb.ip;
    5463:	66 8b 16 70 e9       	mov    edx,DWORD PTR ds:0xe970
    5468:	66 89 d0             	mov    eax,edx
    546b:	66 c1 e0 03          	shl    eax,0x3
    546f:	66 01 d0             	add    eax,edx
    5472:	66 01 c0             	add    eax,eax
    5475:	66 01 d0             	add    eax,edx
    5478:	66 c1 e0 02          	shl    eax,0x2
    547c:	66 01 d0             	add    eax,edx
    547f:	66 c1 e0 02          	shl    eax,0x2
    5483:	66 05 7a d1 00 00    	add    eax,0xd17a
    5489:	67 8b 00             	mov    ax,WORD PTR [eax]
    548c:	66 98                	cwde   
    548e:	67 66 89 45 e4       	mov    DWORD PTR [ebp-0x1c],eax
    5493:	66 8b 16 70 e9       	mov    edx,DWORD PTR ds:0xe970
    5498:	66 89 d0             	mov    eax,edx
    549b:	66 c1 e0 03          	shl    eax,0x3
    549f:	66 01 d0             	add    eax,edx
    54a2:	66 01 c0             	add    eax,eax
    54a5:	66 01 d0             	add    eax,edx
    54a8:	66 c1 e0 02          	shl    eax,0x2
    54ac:	66 01 d0             	add    eax,edx
    54af:	66 c1 e0 02          	shl    eax,0x2
    54b3:	66 05 78 d1 00 00    	add    eax,0xd178
    54b9:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    54bd:	66 98                	cwde   
    54bf:	67 66 89 45 e0       	mov    DWORD PTR [ebp-0x20],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:732
	int ss = segOfDes,
    54c4:	67 66 8b 45 ec       	mov    eax,DWORD PTR [ebp-0x14]
    54c9:	67 66 89 45 dc       	mov    DWORD PTR [ebp-0x24],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:733
	    sp = ((memoryTable[blockNum].beginAddr)&offsetMask) + processTable[curProcessId].pcb.sp_now - ((memoryTable[processTable[curProcessId].blockNum].endAddr - stackSize + 1)&offsetMask);
    54ce:	67 66 8b 55 f8       	mov    edx,DWORD PTR [ebp-0x8]
    54d3:	66 89 d0             	mov    eax,edx
    54d6:	66 01 c0             	add    eax,eax
    54d9:	66 01 d0             	add    eax,edx
    54dc:	66 c1 e0 03          	shl    eax,0x3
    54e0:	66 05 c0 a3 00 00    	add    eax,0xa3c0
    54e6:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    54ea:	67 66 23 45 f0       	and    eax,DWORD PTR [ebp-0x10]
    54ef:	66 89 c1             	mov    ecx,eax
    54f2:	66 8b 16 70 e9       	mov    edx,DWORD PTR ds:0xe970
    54f7:	66 89 d0             	mov    eax,edx
    54fa:	66 c1 e0 03          	shl    eax,0x3
    54fe:	66 01 d0             	add    eax,edx
    5501:	66 01 c0             	add    eax,eax
    5504:	66 01 d0             	add    eax,edx
    5507:	66 c1 e0 02          	shl    eax,0x2
    550b:	66 01 d0             	add    eax,edx
    550e:	66 c1 e0 02          	shl    eax,0x2
    5512:	66 05 7e d1 00 00    	add    eax,0xd17e
    5518:	67 8b 00             	mov    ax,WORD PTR [eax]
    551b:	66 98                	cwde   
    551d:	66 01 c1             	add    ecx,eax
    5520:	66 8b 16 70 e9       	mov    edx,DWORD PTR ds:0xe970
    5525:	66 89 d0             	mov    eax,edx
    5528:	66 c1 e0 03          	shl    eax,0x3
    552c:	66 01 d0             	add    eax,edx
    552f:	66 01 c0             	add    eax,eax
    5532:	66 01 d0             	add    eax,edx
    5535:	66 c1 e0 02          	shl    eax,0x2
    5539:	66 01 d0             	add    eax,edx
    553c:	66 c1 e0 02          	shl    eax,0x2
    5540:	66 05 88 d1 00 00    	add    eax,0xd188
    5546:	67 66 8b 10          	mov    edx,DWORD PTR [eax]
    554a:	66 89 d0             	mov    eax,edx
    554d:	66 01 c0             	add    eax,eax
    5550:	66 01 d0             	add    eax,edx
    5553:	66 c1 e0 03          	shl    eax,0x3
    5557:	66 05 c4 a3 00 00    	add    eax,0xa3c4
    555d:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    5561:	67 66 2b 45 fc       	sub    eax,DWORD PTR [ebp-0x4]
    5566:	66 40                	inc    eax
    5568:	67 66 23 45 f0       	and    eax,DWORD PTR [ebp-0x10]
    556d:	66 29 c1             	sub    ecx,eax
    5570:	66 89 c8             	mov    eax,ecx
    5573:	67 66 89 45 d8       	mov    DWORD PTR [ebp-0x28],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:734
	memcpy(segOfOs, (int)&processTable[curProcessId].pcb, segOfOs, (int)&processTable[ProcessSize].pcb, sizeof(struct PCB));
    5578:	66 8b 16 dc a7       	mov    edx,DWORD PTR ds:0xa7dc
    557d:	66 89 d0             	mov    eax,edx
    5580:	66 c1 e0 03          	shl    eax,0x3
    5584:	66 01 d0             	add    eax,edx
    5587:	66 01 c0             	add    eax,eax
    558a:	66 01 d0             	add    eax,edx
    558d:	66 c1 e0 02          	shl    eax,0x2
    5591:	66 01 d0             	add    eax,edx
    5594:	66 c1 e0 02          	shl    eax,0x2
    5598:	66 05 60 d1 00 00    	add    eax,0xd160
    559e:	66 89 c1             	mov    ecx,eax
    55a1:	66 8b 16 70 e9       	mov    edx,DWORD PTR ds:0xe970
    55a6:	66 89 d0             	mov    eax,edx
    55a9:	66 c1 e0 03          	shl    eax,0x3
    55ad:	66 01 d0             	add    eax,edx
    55b0:	66 01 c0             	add    eax,eax
    55b3:	66 01 d0             	add    eax,edx
    55b6:	66 c1 e0 02          	shl    eax,0x2
    55ba:	66 01 d0             	add    eax,edx
    55bd:	66 c1 e0 02          	shl    eax,0x2
    55c1:	66 05 60 d1 00 00    	add    eax,0xd160
    55c7:	67 66 c7 44 24 10 22 	mov    DWORD PTR [esp+0x10],0x22
    55ce:	00 00 00 
    55d1:	67 66 89 4c 24 0c    	mov    DWORD PTR [esp+0xc],ecx
    55d7:	67 66 c7 44 24 08 00 	mov    DWORD PTR [esp+0x8],0x2000
    55de:	20 00 00 
    55e1:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    55e7:	67 66 c7 04 24 00 20 	mov    DWORD PTR [esp],0x2000
    55ee:	00 00 
    55f0:	66 e8 e1 cd ff ff    	call   23d7 <_memcpy>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:735
	memcpy(segOfSour, (memoryTable[processTable[curProcessId].blockNum].endAddr - stackSize + 1)&offsetMask, segOfDes, (memoryTable[blockNum].beginAddr)&offsetMask, stackSize);
    55f6:	67 66 8b 55 f8       	mov    edx,DWORD PTR [ebp-0x8]
    55fb:	66 89 d0             	mov    eax,edx
    55fe:	66 01 c0             	add    eax,eax
    5601:	66 01 d0             	add    eax,edx
    5604:	66 c1 e0 03          	shl    eax,0x3
    5608:	66 05 c0 a3 00 00    	add    eax,0xa3c0
    560e:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    5612:	67 66 23 45 f0       	and    eax,DWORD PTR [ebp-0x10]
    5617:	66 89 c1             	mov    ecx,eax
    561a:	66 8b 16 70 e9       	mov    edx,DWORD PTR ds:0xe970
    561f:	66 89 d0             	mov    eax,edx
    5622:	66 c1 e0 03          	shl    eax,0x3
    5626:	66 01 d0             	add    eax,edx
    5629:	66 01 c0             	add    eax,eax
    562c:	66 01 d0             	add    eax,edx
    562f:	66 c1 e0 02          	shl    eax,0x2
    5633:	66 01 d0             	add    eax,edx
    5636:	66 c1 e0 02          	shl    eax,0x2
    563a:	66 05 88 d1 00 00    	add    eax,0xd188
    5640:	67 66 8b 10          	mov    edx,DWORD PTR [eax]
    5644:	66 89 d0             	mov    eax,edx
    5647:	66 01 c0             	add    eax,eax
    564a:	66 01 d0             	add    eax,edx
    564d:	66 c1 e0 03          	shl    eax,0x3
    5651:	66 05 c4 a3 00 00    	add    eax,0xa3c4
    5657:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    565b:	67 66 2b 45 fc       	sub    eax,DWORD PTR [ebp-0x4]
    5660:	66 40                	inc    eax
    5662:	67 66 23 45 f0       	and    eax,DWORD PTR [ebp-0x10]
    5667:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    566c:	67 66 89 54 24 10    	mov    DWORD PTR [esp+0x10],edx
    5672:	67 66 89 4c 24 0c    	mov    DWORD PTR [esp+0xc],ecx
    5678:	67 66 8b 55 ec       	mov    edx,DWORD PTR [ebp-0x14]
    567d:	67 66 89 54 24 08    	mov    DWORD PTR [esp+0x8],edx
    5683:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    5689:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
    568e:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    5693:	66 e8 3e cd ff ff    	call   23d7 <_memcpy>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:736
	createProcess(ProcessSize++, name, stackSize, cs, ip, ss, sp, blockNum);
    5699:	66 a1 dc a7          	mov    eax,ds:0xa7dc
    569d:	67 66 8d 50 01       	lea    edx,[eax+0x1]
    56a2:	66 89 16 dc a7       	mov    DWORD PTR ds:0xa7dc,edx
    56a7:	67 66 8b 55 f8       	mov    edx,DWORD PTR [ebp-0x8]
    56ac:	67 66 89 54 24 1c    	mov    DWORD PTR [esp+0x1c],edx
    56b2:	67 66 8b 55 d8       	mov    edx,DWORD PTR [ebp-0x28]
    56b7:	67 66 89 54 24 18    	mov    DWORD PTR [esp+0x18],edx
    56bd:	67 66 8b 55 dc       	mov    edx,DWORD PTR [ebp-0x24]
    56c2:	67 66 89 54 24 14    	mov    DWORD PTR [esp+0x14],edx
    56c8:	67 66 8b 55 e0       	mov    edx,DWORD PTR [ebp-0x20]
    56cd:	67 66 89 54 24 10    	mov    DWORD PTR [esp+0x10],edx
    56d3:	67 66 8b 55 e4       	mov    edx,DWORD PTR [ebp-0x1c]
    56d8:	67 66 89 54 24 0c    	mov    DWORD PTR [esp+0xc],edx
    56de:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    56e3:	67 66 89 54 24 08    	mov    DWORD PTR [esp+0x8],edx
    56e9:	67 66 c7 44 24 04 00 	mov    DWORD PTR [esp+0x4],0xea00
    56f0:	ea 00 00 
    56f3:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    56f8:	66 e8 c9 f5 ff ff    	call   4cc7 <_createProcess>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:737
	enqueue(&ReadyQue, ProcessSize - 1);
    56fe:	66 a1 dc a7          	mov    eax,ds:0xa7dc
    5702:	66 48                	dec    eax
    5704:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    570a:	67 66 c7 04 24 80 e9 	mov    DWORD PTR [esp],0xe980
    5711:	00 00 
    5713:	66 e8 7f 22 00 00    	call   7998 <_enqueue>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:738
	processTable[ProcessSize - 1].fatherID = curProcessId;
    5719:	66 a1 dc a7          	mov    eax,ds:0xa7dc
    571d:	67 66 8d 50 ff       	lea    edx,[eax-0x1]
    5722:	66 8b 0e 70 e9       	mov    ecx,DWORD PTR ds:0xe970
    5727:	66 89 d0             	mov    eax,edx
    572a:	66 c1 e0 03          	shl    eax,0x3
    572e:	66 01 d0             	add    eax,edx
    5731:	66 01 c0             	add    eax,eax
    5734:	66 01 d0             	add    eax,edx
    5737:	66 c1 e0 02          	shl    eax,0x2
    573b:	66 01 d0             	add    eax,edx
    573e:	66 c1 e0 02          	shl    eax,0x2
    5742:	66 05 b8 d1 00 00    	add    eax,0xd1b8
    5748:	67 66 89 08          	mov    DWORD PTR [eax],ecx
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:739
	processTable[curProcessId].sonID = ProcessSize - 1;
    574c:	66 8b 16 70 e9       	mov    edx,DWORD PTR ds:0xe970
    5751:	66 a1 dc a7          	mov    eax,ds:0xa7dc
    5755:	67 66 8d 48 ff       	lea    ecx,[eax-0x1]
    575a:	66 89 d0             	mov    eax,edx
    575d:	66 c1 e0 03          	shl    eax,0x3
    5761:	66 01 d0             	add    eax,edx
    5764:	66 01 c0             	add    eax,eax
    5767:	66 01 d0             	add    eax,edx
    576a:	66 c1 e0 02          	shl    eax,0x2
    576e:	66 01 d0             	add    eax,edx
    5771:	66 c1 e0 02          	shl    eax,0x2
    5775:	66 05 c0 d1 00 00    	add    eax,0xd1c0
    577b:	67 66 89 08          	mov    DWORD PTR [eax],ecx
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:740
	processTable[curProcessId].pcb.ax = ProcessSize - 1;
    577f:	66 8b 16 70 e9       	mov    edx,DWORD PTR ds:0xe970
    5784:	66 a1 dc a7          	mov    eax,ds:0xa7dc
    5788:	66 48                	dec    eax
    578a:	66 89 c1             	mov    ecx,eax
    578d:	66 89 d0             	mov    eax,edx
    5790:	66 c1 e0 03          	shl    eax,0x3
    5794:	66 01 d0             	add    eax,edx
    5797:	66 01 c0             	add    eax,eax
    579a:	66 01 d0             	add    eax,edx
    579d:	66 c1 e0 02          	shl    eax,0x2
    57a1:	66 01 d0             	add    eax,edx
    57a4:	66 c1 e0 02          	shl    eax,0x2
    57a8:	66 05 76 d1 00 00    	add    eax,0xd176
    57ae:	67 89 08             	mov    WORD PTR [eax],cx
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:741
	processTable[ProcessSize - 1].pcb.ax = 0;
    57b1:	66 a1 dc a7          	mov    eax,ds:0xa7dc
    57b5:	67 66 8d 50 ff       	lea    edx,[eax-0x1]
    57ba:	66 89 d0             	mov    eax,edx
    57bd:	66 c1 e0 03          	shl    eax,0x3
    57c1:	66 01 d0             	add    eax,edx
    57c4:	66 01 c0             	add    eax,eax
    57c7:	66 01 d0             	add    eax,edx
    57ca:	66 c1 e0 02          	shl    eax,0x2
    57ce:	66 01 d0             	add    eax,edx
    57d1:	66 c1 e0 02          	shl    eax,0x2
    57d5:	66 05 76 d1 00 00    	add    eax,0xd176
    57db:	67 c7 00 00 00       	mov    WORD PTR [eax],0x0
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:742
}
    57e0:	90                   	nop
    57e1:	66 c9                	leave  
    57e3:	66 c3                	ret    

000057e5 <_do_exit>:
do_exit():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:745

void do_exit(int exit_value)
{
    57e5:	66 55                	push   ebp
    57e7:	66 89 e5             	mov    ebp,esp
    57ea:	66 83 ec 0c          	sub    esp,0xc
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:746
	quesize	= size(&BlockedQue);
    57ee:	67 66 c7 04 24 80 a7 	mov    DWORD PTR [esp],0xa780
    57f5:	00 00 
    57f7:	66 e8 55 21 00 00    	call   7952 <_size>
    57fd:	66 a3 e0 e9          	mov    ds:0xe9e0,eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:747
	for (int i = 0; i < quesize; ++i)
    5801:	67 66 c7 45 fc 00 00 	mov    DWORD PTR [ebp-0x4],0x0
    5808:	00 00 
    580a:	eb 71                	jmp    587d <_do_exit+0x98>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:749
	{
		dequeue(&BlockedQue, &tmp);
    580c:	67 66 c7 44 24 04 e8 	mov    DWORD PTR [esp+0x4],0xe9e8
    5813:	e9 00 00 
    5816:	67 66 c7 04 24 80 a7 	mov    DWORD PTR [esp],0xa780
    581d:	00 00 
    581f:	66 e8 e0 21 00 00    	call   7a05 <_dequeue>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:750
		if (processTable[tmp].waitProcess == curProcessId)
    5825:	66 8b 16 e8 e9       	mov    edx,DWORD PTR ds:0xe9e8
    582a:	66 89 d0             	mov    eax,edx
    582d:	66 c1 e0 03          	shl    eax,0x3
    5831:	66 01 d0             	add    eax,edx
    5834:	66 01 c0             	add    eax,eax
    5837:	66 01 d0             	add    eax,edx
    583a:	66 c1 e0 02          	shl    eax,0x2
    583e:	66 01 d0             	add    eax,edx
    5841:	66 c1 e0 02          	shl    eax,0x2
    5845:	66 05 bc d1 00 00    	add    eax,0xd1bc
    584b:	67 66 8b 10          	mov    edx,DWORD PTR [eax]
    584f:	66 a1 70 e9          	mov    eax,ds:0xe970
    5853:	66 39 c2             	cmp    edx,eax
    5856:	75 11                	jne    5869 <_do_exit+0x84>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:752
		{
			wakeup(tmp);
    5858:	66 a1 e8 e9          	mov    eax,ds:0xe9e8
    585c:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    5861:	66 e8 42 f7 ff ff    	call   4fa9 <_wakeup>
    5867:	eb 0f                	jmp    5878 <_do_exit+0x93>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:755
		}
		else {
			block(tmp);
    5869:	66 a1 e8 e9          	mov    eax,ds:0xe9e8
    586d:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    5872:	66 e8 6e f6 ff ff    	call   4ee6 <_block>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:747
	for (int i = 0; i < quesize; ++i)
    5878:	67 66 ff 45 fc       	inc    DWORD PTR [ebp-0x4]
    587d:	66 a1 e0 e9          	mov    eax,ds:0xe9e0
    5881:	67 66 39 45 fc       	cmp    DWORD PTR [ebp-0x4],eax
    5886:	7c 84                	jl     580c <_do_exit+0x27>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:758
		}
	}
	processTable[curProcessId].retValue = exit_value;
    5888:	66 8b 16 70 e9       	mov    edx,DWORD PTR ds:0xe970
    588d:	66 89 d0             	mov    eax,edx
    5890:	66 c1 e0 03          	shl    eax,0x3
    5894:	66 01 d0             	add    eax,edx
    5897:	66 01 c0             	add    eax,eax
    589a:	66 01 d0             	add    eax,edx
    589d:	66 c1 e0 02          	shl    eax,0x2
    58a1:	66 01 d0             	add    eax,edx
    58a4:	66 c1 e0 02          	shl    eax,0x2
    58a8:	67 66 8d 90 b4 d1 00 	lea    edx,[eax+0xd1b4]
    58af:	00 
    58b0:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    58b5:	67 66 89 02          	mov    DWORD PTR [edx],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:759
	kill(curProcessId);
    58b9:	66 a1 70 e9          	mov    eax,ds:0xe970
    58bd:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    58c2:	66 e8 1d d9 ff ff    	call   31e5 <_kill>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:760
	processSwitch();
    58c8:	66 e8 5f 08 00 00    	call   612d <_processSwitch>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:761
}
    58ce:	90                   	nop
    58cf:	66 c9                	leave  
    58d1:	66 c3                	ret    

000058d3 <_do_wait>:
do_wait():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:764

int do_wait()
{
    58d3:	66 55                	push   ebp
    58d5:	66 89 e5             	mov    ebp,esp
    58d8:	66 83 ec 08          	sub    esp,0x8
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:765
	processTable[curProcessId].waitProcess = processTable[curProcessId].sonID;
    58dc:	66 8b 16 70 e9       	mov    edx,DWORD PTR ds:0xe970
    58e1:	66 8b 0e 70 e9       	mov    ecx,DWORD PTR ds:0xe970
    58e6:	66 89 c8             	mov    eax,ecx
    58e9:	66 c1 e0 03          	shl    eax,0x3
    58ed:	66 01 c8             	add    eax,ecx
    58f0:	66 01 c0             	add    eax,eax
    58f3:	66 01 c8             	add    eax,ecx
    58f6:	66 c1 e0 02          	shl    eax,0x2
    58fa:	66 01 c8             	add    eax,ecx
    58fd:	66 c1 e0 02          	shl    eax,0x2
    5901:	66 05 c0 d1 00 00    	add    eax,0xd1c0
    5907:	67 66 8b 08          	mov    ecx,DWORD PTR [eax]
    590b:	66 89 d0             	mov    eax,edx
    590e:	66 c1 e0 03          	shl    eax,0x3
    5912:	66 01 d0             	add    eax,edx
    5915:	66 01 c0             	add    eax,eax
    5918:	66 01 d0             	add    eax,edx
    591b:	66 c1 e0 02          	shl    eax,0x2
    591f:	66 01 d0             	add    eax,edx
    5922:	66 c1 e0 02          	shl    eax,0x2
    5926:	66 05 bc d1 00 00    	add    eax,0xd1bc
    592c:	67 66 89 08          	mov    DWORD PTR [eax],ecx
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:766
	block(curProcessId);
    5930:	66 a1 70 e9          	mov    eax,ds:0xe970
    5934:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    5939:	66 e8 a7 f5 ff ff    	call   4ee6 <_block>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:767
	processSwitch();
    593f:	66 e8 e8 07 00 00    	call   612d <_processSwitch>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:768
	int ret = processTable[processTable[curProcessId].sonID].retValue;
    5945:	66 8b 16 70 e9       	mov    edx,DWORD PTR ds:0xe970
    594a:	66 89 d0             	mov    eax,edx
    594d:	66 c1 e0 03          	shl    eax,0x3
    5951:	66 01 d0             	add    eax,edx
    5954:	66 01 c0             	add    eax,eax
    5957:	66 01 d0             	add    eax,edx
    595a:	66 c1 e0 02          	shl    eax,0x2
    595e:	66 01 d0             	add    eax,edx
    5961:	66 c1 e0 02          	shl    eax,0x2
    5965:	66 05 c0 d1 00 00    	add    eax,0xd1c0
    596b:	67 66 8b 10          	mov    edx,DWORD PTR [eax]
    596f:	66 89 d0             	mov    eax,edx
    5972:	66 c1 e0 03          	shl    eax,0x3
    5976:	66 01 d0             	add    eax,edx
    5979:	66 01 c0             	add    eax,eax
    597c:	66 01 d0             	add    eax,edx
    597f:	66 c1 e0 02          	shl    eax,0x2
    5983:	66 01 d0             	add    eax,edx
    5986:	66 c1 e0 02          	shl    eax,0x2
    598a:	66 05 b4 d1 00 00    	add    eax,0xd1b4
    5990:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    5994:	67 66 89 45 fc       	mov    DWORD PTR [ebp-0x4],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:769
	processTable[curProcessId].sonID = -1;
    5999:	66 8b 16 70 e9       	mov    edx,DWORD PTR ds:0xe970
    599e:	66 89 d0             	mov    eax,edx
    59a1:	66 c1 e0 03          	shl    eax,0x3
    59a5:	66 01 d0             	add    eax,edx
    59a8:	66 01 c0             	add    eax,eax
    59ab:	66 01 d0             	add    eax,edx
    59ae:	66 c1 e0 02          	shl    eax,0x2
    59b2:	66 01 d0             	add    eax,edx
    59b5:	66 c1 e0 02          	shl    eax,0x2
    59b9:	66 05 c0 d1 00 00    	add    eax,0xd1c0
    59bf:	67 66 c7 00 ff ff ff 	mov    DWORD PTR [eax],0xffffffff
    59c6:	ff 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:770
	return ret;
    59c7:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:771
}
    59cc:	66 c9                	leave  
    59ce:	66 c3                	ret    

000059d0 <_Tosuspend>:
Tosuspend():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:774

void Tosuspend(int processID)
{
    59d0:	66 55                	push   ebp
    59d2:	66 89 e5             	mov    ebp,esp
    59d5:	66 83 ec 28          	sub    esp,0x28
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:775
	int Size = memoryTable[processTable[processID].blockNum].endAddr - memoryTable[processTable[processID].blockNum].beginAddr + 1;
    59d9:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    59de:	66 89 d0             	mov    eax,edx
    59e1:	66 c1 e0 03          	shl    eax,0x3
    59e5:	66 01 d0             	add    eax,edx
    59e8:	66 01 c0             	add    eax,eax
    59eb:	66 01 d0             	add    eax,edx
    59ee:	66 c1 e0 02          	shl    eax,0x2
    59f2:	66 01 d0             	add    eax,edx
    59f5:	66 c1 e0 02          	shl    eax,0x2
    59f9:	66 05 88 d1 00 00    	add    eax,0xd188
    59ff:	67 66 8b 10          	mov    edx,DWORD PTR [eax]
    5a03:	66 89 d0             	mov    eax,edx
    5a06:	66 01 c0             	add    eax,eax
    5a09:	66 01 d0             	add    eax,edx
    5a0c:	66 c1 e0 03          	shl    eax,0x3
    5a10:	66 05 c4 a3 00 00    	add    eax,0xa3c4
    5a16:	67 66 8b 08          	mov    ecx,DWORD PTR [eax]
    5a1a:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    5a1f:	66 89 d0             	mov    eax,edx
    5a22:	66 c1 e0 03          	shl    eax,0x3
    5a26:	66 01 d0             	add    eax,edx
    5a29:	66 01 c0             	add    eax,eax
    5a2c:	66 01 d0             	add    eax,edx
    5a2f:	66 c1 e0 02          	shl    eax,0x2
    5a33:	66 01 d0             	add    eax,edx
    5a36:	66 c1 e0 02          	shl    eax,0x2
    5a3a:	66 05 88 d1 00 00    	add    eax,0xd188
    5a40:	67 66 8b 10          	mov    edx,DWORD PTR [eax]
    5a44:	66 89 d0             	mov    eax,edx
    5a47:	66 01 c0             	add    eax,eax
    5a4a:	66 01 d0             	add    eax,edx
    5a4d:	66 c1 e0 03          	shl    eax,0x3
    5a51:	66 05 c0 a3 00 00    	add    eax,0xa3c0
    5a57:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    5a5b:	66 29 c1             	sub    ecx,eax
    5a5e:	66 89 c8             	mov    eax,ecx
    5a61:	66 40                	inc    eax
    5a63:	67 66 89 45 e8       	mov    DWORD PTR [ebp-0x18],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:776
	int count = 0;
    5a68:	67 66 c7 45 fc 00 00 	mov    DWORD PTR [ebp-0x4],0x0
    5a6f:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:777
	int begin = 0;
    5a71:	67 66 c7 45 f8 00 00 	mov    DWORD PTR [ebp-0x8],0x0
    5a78:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:778
	for (int i = 0; i < LenOfFat; ++i)
    5a7a:	67 66 c7 45 f4 00 00 	mov    DWORD PTR [ebp-0xc],0x0
    5a81:	00 00 
    5a83:	eb 48                	jmp    5acd <_Tosuspend+0xfd>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:780
	{
		if (FAT[begin] == 0)
    5a85:	66 8b 16 e0 a7       	mov    edx,DWORD PTR ds:0xa7e0
    5a8a:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
    5a8f:	66 01 c0             	add    eax,eax
    5a92:	66 01 d0             	add    eax,edx
    5a95:	67 8b 00             	mov    ax,WORD PTR [eax]
    5a98:	85 c0                	test   ax,ax
    5a9a:	75 07                	jne    5aa3 <_Tosuspend+0xd3>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:782
		{
			++count;
    5a9c:	67 66 ff 45 fc       	inc    DWORD PTR [ebp-0x4]
    5aa1:	eb 15                	jmp    5ab8 <_Tosuspend+0xe8>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:785
		}
		else {
			begin = i + 1;
    5aa3:	67 66 8b 45 f4       	mov    eax,DWORD PTR [ebp-0xc]
    5aa8:	66 40                	inc    eax
    5aaa:	67 66 89 45 f8       	mov    DWORD PTR [ebp-0x8],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:786
			count = 0;
    5aaf:	67 66 c7 45 fc 00 00 	mov    DWORD PTR [ebp-0x4],0x0
    5ab6:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:788
		}
		if (count * Cluster >= Size)
    5ab8:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
    5abd:	66 c1 e0 09          	shl    eax,0x9
    5ac1:	67 66 3b 45 e8       	cmp    eax,DWORD PTR [ebp-0x18]
    5ac6:	7d 12                	jge    5ada <_Tosuspend+0x10a>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:778
	for (int i = 0; i < LenOfFat; ++i)
    5ac8:	67 66 ff 45 f4       	inc    DWORD PTR [ebp-0xc]
    5acd:	67 66 81 7d f4 c7 00 	cmp    DWORD PTR [ebp-0xc],0xc7
    5ad4:	00 00 
    5ad6:	7e ad                	jle    5a85 <_Tosuspend+0xb5>
    5ad8:	eb 01                	jmp    5adb <_Tosuspend+0x10b>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:790
		{
			break;
    5ada:	90                   	nop
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:793
		}
	}
	write(begin * Cluster, Size, (memoryTable[processTable[processID].blockNum].beginAddr & 0x0000ffff), (memoryTable[processTable[processID].blockNum].beginAddr & 0xf0000) >> 4);
    5adb:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    5ae0:	66 89 d0             	mov    eax,edx
    5ae3:	66 c1 e0 03          	shl    eax,0x3
    5ae7:	66 01 d0             	add    eax,edx
    5aea:	66 01 c0             	add    eax,eax
    5aed:	66 01 d0             	add    eax,edx
    5af0:	66 c1 e0 02          	shl    eax,0x2
    5af4:	66 01 d0             	add    eax,edx
    5af7:	66 c1 e0 02          	shl    eax,0x2
    5afb:	66 05 88 d1 00 00    	add    eax,0xd188
    5b01:	67 66 8b 10          	mov    edx,DWORD PTR [eax]
    5b05:	66 89 d0             	mov    eax,edx
    5b08:	66 01 c0             	add    eax,eax
    5b0b:	66 01 d0             	add    eax,edx
    5b0e:	66 c1 e0 03          	shl    eax,0x3
    5b12:	66 05 c0 a3 00 00    	add    eax,0xa3c0
    5b18:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    5b1c:	66 c1 f8 04          	sar    eax,0x4
    5b20:	66 25 00 f0 00 00    	and    eax,0xf000
    5b26:	66 89 c1             	mov    ecx,eax
    5b29:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    5b2e:	66 89 d0             	mov    eax,edx
    5b31:	66 c1 e0 03          	shl    eax,0x3
    5b35:	66 01 d0             	add    eax,edx
    5b38:	66 01 c0             	add    eax,eax
    5b3b:	66 01 d0             	add    eax,edx
    5b3e:	66 c1 e0 02          	shl    eax,0x2
    5b42:	66 01 d0             	add    eax,edx
    5b45:	66 c1 e0 02          	shl    eax,0x2
    5b49:	66 05 88 d1 00 00    	add    eax,0xd188
    5b4f:	67 66 8b 10          	mov    edx,DWORD PTR [eax]
    5b53:	66 89 d0             	mov    eax,edx
    5b56:	66 01 c0             	add    eax,eax
    5b59:	66 01 d0             	add    eax,edx
    5b5c:	66 c1 e0 03          	shl    eax,0x3
    5b60:	66 05 c0 a3 00 00    	add    eax,0xa3c0
    5b66:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    5b6a:	66 0f b7 c0          	movzx  eax,ax
    5b6e:	67 66 8b 55 f8       	mov    edx,DWORD PTR [ebp-0x8]
    5b73:	66 c1 e2 09          	shl    edx,0x9
    5b77:	67 66 89 4c 24 0c    	mov    DWORD PTR [esp+0xc],ecx
    5b7d:	67 66 89 44 24 08    	mov    DWORD PTR [esp+0x8],eax
    5b83:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
    5b88:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    5b8e:	67 66 89 14 24       	mov    DWORD PTR [esp],edx
    5b93:	66 e8 71 c8 ff ff    	call   240a <_write>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:794
	processTable[processID].lmaddress = begin * Cluster;
    5b99:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
    5b9e:	66 c1 e0 09          	shl    eax,0x9
    5ba2:	66 89 c1             	mov    ecx,eax
    5ba5:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    5baa:	66 89 d0             	mov    eax,edx
    5bad:	66 c1 e0 03          	shl    eax,0x3
    5bb1:	66 01 d0             	add    eax,edx
    5bb4:	66 01 c0             	add    eax,eax
    5bb7:	66 01 d0             	add    eax,edx
    5bba:	66 c1 e0 02          	shl    eax,0x2
    5bbe:	66 01 d0             	add    eax,edx
    5bc1:	66 c1 e0 02          	shl    eax,0x2
    5bc5:	66 05 8c d1 00 00    	add    eax,0xd18c
    5bcb:	67 66 89 08          	mov    DWORD PTR [eax],ecx
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:795
	enqueue(&SuspendQue, processID);
    5bcf:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    5bd4:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    5bda:	67 66 c7 04 24 00 d1 	mov    DWORD PTR [esp],0xd100
    5be1:	00 00 
    5be3:	66 e8 af 1d 00 00    	call   7998 <_enqueue>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:797
	///////////////////////////
	if (processTable[processID].status == ready)
    5be9:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    5bee:	66 89 d0             	mov    eax,edx
    5bf1:	66 c1 e0 03          	shl    eax,0x3
    5bf5:	66 01 d0             	add    eax,edx
    5bf8:	66 01 c0             	add    eax,eax
    5bfb:	66 01 d0             	add    eax,edx
    5bfe:	66 c1 e0 02          	shl    eax,0x2
    5c02:	66 01 d0             	add    eax,edx
    5c05:	66 c1 e0 02          	shl    eax,0x2
    5c09:	66 05 90 d2 00 00    	add    eax,0xd290
    5c0f:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    5c13:	66 83 f8 01          	cmp    eax,0x1
    5c17:	75 6e                	jne    5c87 <_Tosuspend+0x2b7>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:800
		////////////////////////////
	{
		quesize = size(&ReadyQue);
    5c19:	67 66 c7 04 24 80 e9 	mov    DWORD PTR [esp],0xe980
    5c20:	00 00 
    5c22:	66 e8 2a 1d 00 00    	call   7952 <_size>
    5c28:	66 a3 e0 e9          	mov    ds:0xe9e0,eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:801
		for (int i = 0; i < quesize; ++i)
    5c2c:	67 66 c7 45 f0 00 00 	mov    DWORD PTR [ebp-0x10],0x0
    5c33:	00 00 
    5c35:	eb 42                	jmp    5c79 <_Tosuspend+0x2a9>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:803
		{
			dequeue(&ReadyQue, &tmp);
    5c37:	67 66 c7 44 24 04 e8 	mov    DWORD PTR [esp+0x4],0xe9e8
    5c3e:	e9 00 00 
    5c41:	67 66 c7 04 24 80 e9 	mov    DWORD PTR [esp],0xe980
    5c48:	00 00 
    5c4a:	66 e8 b5 1d 00 00    	call   7a05 <_dequeue>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:804
			if (tmp != processID)
    5c50:	66 a1 e8 e9          	mov    eax,ds:0xe9e8
    5c54:	67 66 3b 45 08       	cmp    eax,DWORD PTR [ebp+0x8]
    5c59:	74 19                	je     5c74 <_Tosuspend+0x2a4>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:806
			{
				enqueue(&ReadyQue, tmp);
    5c5b:	66 a1 e8 e9          	mov    eax,ds:0xe9e8
    5c5f:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    5c65:	67 66 c7 04 24 80 e9 	mov    DWORD PTR [esp],0xe980
    5c6c:	00 00 
    5c6e:	66 e8 24 1d 00 00    	call   7998 <_enqueue>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:801
		for (int i = 0; i < quesize; ++i)
    5c74:	67 66 ff 45 f0       	inc    DWORD PTR [ebp-0x10]
    5c79:	66 a1 e0 e9          	mov    eax,ds:0xe9e0
    5c7d:	67 66 39 45 f0       	cmp    DWORD PTR [ebp-0x10],eax
    5c82:	7c b3                	jl     5c37 <_Tosuspend+0x267>
    5c84:	e9 9b 00             	jmp    5d22 <_Tosuspend+0x352>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:811
			}
		}
	}
	///////////////////////////
	else if (processTable[processID].status == blocked)
    5c87:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    5c8c:	66 89 d0             	mov    eax,edx
    5c8f:	66 c1 e0 03          	shl    eax,0x3
    5c93:	66 01 d0             	add    eax,edx
    5c96:	66 01 c0             	add    eax,eax
    5c99:	66 01 d0             	add    eax,edx
    5c9c:	66 c1 e0 02          	shl    eax,0x2
    5ca0:	66 01 d0             	add    eax,edx
    5ca3:	66 c1 e0 02          	shl    eax,0x2
    5ca7:	66 05 90 d2 00 00    	add    eax,0xd290
    5cad:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    5cb1:	66 83 f8 03          	cmp    eax,0x3
    5cb5:	75 6b                	jne    5d22 <_Tosuspend+0x352>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:814
		////////////////////////////
	{
		quesize = size(&BlockedQue);
    5cb7:	67 66 c7 04 24 80 a7 	mov    DWORD PTR [esp],0xa780
    5cbe:	00 00 
    5cc0:	66 e8 8c 1c 00 00    	call   7952 <_size>
    5cc6:	66 a3 e0 e9          	mov    ds:0xe9e0,eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:815
		for (int i = 0; i < quesize; ++i)
    5cca:	67 66 c7 45 ec 00 00 	mov    DWORD PTR [ebp-0x14],0x0
    5cd1:	00 00 
    5cd3:	eb 42                	jmp    5d17 <_Tosuspend+0x347>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:817
		{
			dequeue(&BlockedQue, &tmp);
    5cd5:	67 66 c7 44 24 04 e8 	mov    DWORD PTR [esp+0x4],0xe9e8
    5cdc:	e9 00 00 
    5cdf:	67 66 c7 04 24 80 a7 	mov    DWORD PTR [esp],0xa780
    5ce6:	00 00 
    5ce8:	66 e8 17 1d 00 00    	call   7a05 <_dequeue>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:818
			if (tmp != processID)
    5cee:	66 a1 e8 e9          	mov    eax,ds:0xe9e8
    5cf2:	67 66 3b 45 08       	cmp    eax,DWORD PTR [ebp+0x8]
    5cf7:	74 19                	je     5d12 <_Tosuspend+0x342>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:820
			{
				enqueue(&BlockedQue, tmp);
    5cf9:	66 a1 e8 e9          	mov    eax,ds:0xe9e8
    5cfd:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    5d03:	67 66 c7 04 24 80 a7 	mov    DWORD PTR [esp],0xa780
    5d0a:	00 00 
    5d0c:	66 e8 86 1c 00 00    	call   7998 <_enqueue>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:815
		for (int i = 0; i < quesize; ++i)
    5d12:	67 66 ff 45 ec       	inc    DWORD PTR [ebp-0x14]
    5d17:	66 a1 e0 e9          	mov    eax,ds:0xe9e0
    5d1b:	67 66 39 45 ec       	cmp    DWORD PTR [ebp-0x14],eax
    5d20:	7c b3                	jl     5cd5 <_Tosuspend+0x305>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:825
			}
		}
	}
	// ip和sp为相对位移，重启不改动
	processTable[processID].status = suspend;
    5d22:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    5d27:	66 89 d0             	mov    eax,edx
    5d2a:	66 c1 e0 03          	shl    eax,0x3
    5d2e:	66 01 d0             	add    eax,edx
    5d31:	66 01 c0             	add    eax,eax
    5d34:	66 01 d0             	add    eax,edx
    5d37:	66 c1 e0 02          	shl    eax,0x2
    5d3b:	66 01 d0             	add    eax,edx
    5d3e:	66 c1 e0 02          	shl    eax,0x2
    5d42:	66 05 90 d2 00 00    	add    eax,0xd290
    5d48:	67 66 c7 00 04 00 00 	mov    DWORD PTR [eax],0x4
    5d4f:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:826
	release(memoryTable[processTable[processID].blockNum].beginAddr, memoryTable[processTable[processID].blockNum].endAddr);
    5d50:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    5d55:	66 89 d0             	mov    eax,edx
    5d58:	66 c1 e0 03          	shl    eax,0x3
    5d5c:	66 01 d0             	add    eax,edx
    5d5f:	66 01 c0             	add    eax,eax
    5d62:	66 01 d0             	add    eax,edx
    5d65:	66 c1 e0 02          	shl    eax,0x2
    5d69:	66 01 d0             	add    eax,edx
    5d6c:	66 c1 e0 02          	shl    eax,0x2
    5d70:	66 05 88 d1 00 00    	add    eax,0xd188
    5d76:	67 66 8b 10          	mov    edx,DWORD PTR [eax]
    5d7a:	66 89 d0             	mov    eax,edx
    5d7d:	66 01 c0             	add    eax,eax
    5d80:	66 01 d0             	add    eax,edx
    5d83:	66 c1 e0 03          	shl    eax,0x3
    5d87:	66 05 c4 a3 00 00    	add    eax,0xa3c4
    5d8d:	67 66 8b 08          	mov    ecx,DWORD PTR [eax]
    5d91:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    5d96:	66 89 d0             	mov    eax,edx
    5d99:	66 c1 e0 03          	shl    eax,0x3
    5d9d:	66 01 d0             	add    eax,edx
    5da0:	66 01 c0             	add    eax,eax
    5da3:	66 01 d0             	add    eax,edx
    5da6:	66 c1 e0 02          	shl    eax,0x2
    5daa:	66 01 d0             	add    eax,edx
    5dad:	66 c1 e0 02          	shl    eax,0x2
    5db1:	66 05 88 d1 00 00    	add    eax,0xd188
    5db7:	67 66 8b 10          	mov    edx,DWORD PTR [eax]
    5dbb:	66 89 d0             	mov    eax,edx
    5dbe:	66 01 c0             	add    eax,eax
    5dc1:	66 01 d0             	add    eax,edx
    5dc4:	66 c1 e0 03          	shl    eax,0x3
    5dc8:	66 05 c0 a3 00 00    	add    eax,0xa3c0
    5dce:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    5dd2:	67 66 89 4c 24 04    	mov    DWORD PTR [esp+0x4],ecx
    5dd8:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    5ddd:	66 e8 40 13 00 00    	call   7123 <_release>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:827
}
    5de3:	90                   	nop
    5de4:	66 c9                	leave  
    5de6:	66 c3                	ret    

00005de8 <_activate>:
activate():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:829
void activate(int processID)
{
    5de8:	66 55                	push   ebp
    5dea:	66 89 e5             	mov    ebp,esp
    5ded:	66 56                	push   esi
    5def:	66 53                	push   ebx
    5df1:	66 83 ec 14          	sub    esp,0x14
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:830
	loadFile(processTable[processID].lmaddress, processTable[processID].size, (memoryTable[processTable[processID].blockNum].beginAddr & 0x0000ffff), (memoryTable[processTable[processID].blockNum].beginAddr & 0xf0000) >> 4);
    5df5:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    5dfa:	66 89 d0             	mov    eax,edx
    5dfd:	66 c1 e0 03          	shl    eax,0x3
    5e01:	66 01 d0             	add    eax,edx
    5e04:	66 01 c0             	add    eax,eax
    5e07:	66 01 d0             	add    eax,edx
    5e0a:	66 c1 e0 02          	shl    eax,0x2
    5e0e:	66 01 d0             	add    eax,edx
    5e11:	66 c1 e0 02          	shl    eax,0x2
    5e15:	66 05 88 d1 00 00    	add    eax,0xd188
    5e1b:	67 66 8b 10          	mov    edx,DWORD PTR [eax]
    5e1f:	66 89 d0             	mov    eax,edx
    5e22:	66 01 c0             	add    eax,eax
    5e25:	66 01 d0             	add    eax,edx
    5e28:	66 c1 e0 03          	shl    eax,0x3
    5e2c:	66 05 c0 a3 00 00    	add    eax,0xa3c0
    5e32:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    5e36:	66 c1 f8 04          	sar    eax,0x4
    5e3a:	66 25 00 f0 00 00    	and    eax,0xf000
    5e40:	66 89 c6             	mov    esi,eax
    5e43:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    5e48:	66 89 d0             	mov    eax,edx
    5e4b:	66 c1 e0 03          	shl    eax,0x3
    5e4f:	66 01 d0             	add    eax,edx
    5e52:	66 01 c0             	add    eax,eax
    5e55:	66 01 d0             	add    eax,edx
    5e58:	66 c1 e0 02          	shl    eax,0x2
    5e5c:	66 01 d0             	add    eax,edx
    5e5f:	66 c1 e0 02          	shl    eax,0x2
    5e63:	66 05 88 d1 00 00    	add    eax,0xd188
    5e69:	67 66 8b 10          	mov    edx,DWORD PTR [eax]
    5e6d:	66 89 d0             	mov    eax,edx
    5e70:	66 01 c0             	add    eax,eax
    5e73:	66 01 d0             	add    eax,edx
    5e76:	66 c1 e0 03          	shl    eax,0x3
    5e7a:	66 05 c0 a3 00 00    	add    eax,0xa3c0
    5e80:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    5e84:	66 0f b7 d8          	movzx  ebx,ax
    5e88:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    5e8d:	66 89 d0             	mov    eax,edx
    5e90:	66 c1 e0 03          	shl    eax,0x3
    5e94:	66 01 d0             	add    eax,edx
    5e97:	66 01 c0             	add    eax,eax
    5e9a:	66 01 d0             	add    eax,edx
    5e9d:	66 c1 e0 02          	shl    eax,0x2
    5ea1:	66 01 d0             	add    eax,edx
    5ea4:	66 c1 e0 02          	shl    eax,0x2
    5ea8:	66 05 90 d1 00 00    	add    eax,0xd190
    5eae:	67 66 8b 08          	mov    ecx,DWORD PTR [eax]
    5eb2:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    5eb7:	66 89 d0             	mov    eax,edx
    5eba:	66 c1 e0 03          	shl    eax,0x3
    5ebe:	66 01 d0             	add    eax,edx
    5ec1:	66 01 c0             	add    eax,eax
    5ec4:	66 01 d0             	add    eax,edx
    5ec7:	66 c1 e0 02          	shl    eax,0x2
    5ecb:	66 01 d0             	add    eax,edx
    5ece:	66 c1 e0 02          	shl    eax,0x2
    5ed2:	66 05 8c d1 00 00    	add    eax,0xd18c
    5ed8:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    5edc:	67 66 89 74 24 0c    	mov    DWORD PTR [esp+0xc],esi
    5ee2:	67 66 89 5c 24 08    	mov    DWORD PTR [esp+0x8],ebx
    5ee8:	67 66 89 4c 24 04    	mov    DWORD PTR [esp+0x4],ecx
    5eee:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    5ef3:	66 e8 8e 15 00 00    	call   7487 <_loadFile>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:831
	quesize = size(&SuspendQue);
    5ef9:	67 66 c7 04 24 00 d1 	mov    DWORD PTR [esp],0xd100
    5f00:	00 00 
    5f02:	66 e8 4a 1a 00 00    	call   7952 <_size>
    5f08:	66 a3 e0 e9          	mov    ds:0xe9e0,eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:832
	for (int i = 0; i < quesize; ++i)
    5f0c:	67 66 c7 45 f4 00 00 	mov    DWORD PTR [ebp-0xc],0x0
    5f13:	00 00 
    5f15:	eb 42                	jmp    5f59 <_activate+0x171>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:834
	{
		dequeue(&SuspendQue, &tmp);
    5f17:	67 66 c7 44 24 04 e8 	mov    DWORD PTR [esp+0x4],0xe9e8
    5f1e:	e9 00 00 
    5f21:	67 66 c7 04 24 00 d1 	mov    DWORD PTR [esp],0xd100
    5f28:	00 00 
    5f2a:	66 e8 d5 1a 00 00    	call   7a05 <_dequeue>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:835
		if (tmp != processID)
    5f30:	66 a1 e8 e9          	mov    eax,ds:0xe9e8
    5f34:	67 66 3b 45 08       	cmp    eax,DWORD PTR [ebp+0x8]
    5f39:	74 19                	je     5f54 <_activate+0x16c>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:837
		{
			enqueue(&SuspendQue, tmp);
    5f3b:	66 a1 e8 e9          	mov    eax,ds:0xe9e8
    5f3f:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    5f45:	67 66 c7 04 24 00 d1 	mov    DWORD PTR [esp],0xd100
    5f4c:	00 00 
    5f4e:	66 e8 44 1a 00 00    	call   7998 <_enqueue>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:832
	for (int i = 0; i < quesize; ++i)
    5f54:	67 66 ff 45 f4       	inc    DWORD PTR [ebp-0xc]
    5f59:	66 a1 e0 e9          	mov    eax,ds:0xe9e0
    5f5d:	67 66 39 45 f4       	cmp    DWORD PTR [ebp-0xc],eax
    5f62:	7c b3                	jl     5f17 <_activate+0x12f>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:840
		}
	}
	processTable[processID].status = ready;
    5f64:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    5f69:	66 89 d0             	mov    eax,edx
    5f6c:	66 c1 e0 03          	shl    eax,0x3
    5f70:	66 01 d0             	add    eax,edx
    5f73:	66 01 c0             	add    eax,eax
    5f76:	66 01 d0             	add    eax,edx
    5f79:	66 c1 e0 02          	shl    eax,0x2
    5f7d:	66 01 d0             	add    eax,edx
    5f80:	66 c1 e0 02          	shl    eax,0x2
    5f84:	66 05 90 d2 00 00    	add    eax,0xd290
    5f8a:	67 66 c7 00 01 00 00 	mov    DWORD PTR [eax],0x1
    5f91:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:841
	enqueue(&ReadyQue, processID);
    5f92:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    5f97:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    5f9d:	67 66 c7 04 24 80 e9 	mov    DWORD PTR [esp],0xe980
    5fa4:	00 00 
    5fa6:	66 e8 ec 19 00 00    	call   7998 <_enqueue>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:842
}
    5fac:	90                   	nop
    5fad:	66 83 c4 14          	add    esp,0x14
    5fb1:	66 5b                	pop    ebx
    5fb3:	66 5e                	pop    esi
    5fb5:	66 5d                	pop    ebp
    5fb7:	66 c3                	ret    

00005fb9 <_do_delay>:
do_delay():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:845

void do_delay(int clocks)
{
    5fb9:	66 55                	push   ebp
    5fbb:	66 89 e5             	mov    ebp,esp
    5fbe:	66 83 ec 08          	sub    esp,0x8
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:846
	__asm__("cli\n");
    5fc2:	fa                   	cli    
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:847
	delEle(&ReadyQue, curProcessId);
    5fc3:	66 a1 70 e9          	mov    eax,ds:0xe970
    5fc7:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    5fcd:	67 66 c7 04 24 80 e9 	mov    DWORD PTR [esp],0xe980
    5fd4:	00 00 
    5fd6:	66 e8 e6 1a 00 00    	call   7ac2 <_delEle>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:848
	processTable[curProcessId].status = blocked;
    5fdc:	66 8b 16 70 e9       	mov    edx,DWORD PTR ds:0xe970
    5fe1:	66 89 d0             	mov    eax,edx
    5fe4:	66 c1 e0 03          	shl    eax,0x3
    5fe8:	66 01 d0             	add    eax,edx
    5feb:	66 01 c0             	add    eax,eax
    5fee:	66 01 d0             	add    eax,edx
    5ff1:	66 c1 e0 02          	shl    eax,0x2
    5ff5:	66 01 d0             	add    eax,edx
    5ff8:	66 c1 e0 02          	shl    eax,0x2
    5ffc:	66 05 90 d2 00 00    	add    eax,0xd290
    6002:	67 66 c7 00 03 00 00 	mov    DWORD PTR [eax],0x3
    6009:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:849
	enqueue(&BlockedQue, curProcessId);
    600a:	66 a1 70 e9          	mov    eax,ds:0xe970
    600e:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    6014:	67 66 c7 04 24 80 a7 	mov    DWORD PTR [esp],0xa780
    601b:	00 00 
    601d:	66 e8 75 19 00 00    	call   7998 <_enqueue>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:850
	enqueue(&(delayQue.IDque), curProcessId);
    6023:	66 a1 70 e9          	mov    eax,ds:0xe970
    6027:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    602d:	67 66 c7 04 24 a0 a2 	mov    DWORD PTR [esp],0xa2a0
    6034:	00 00 
    6036:	66 e8 5c 19 00 00    	call   7998 <_enqueue>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:851
	enqueue(&(delayQue.clocksQue), clocks);
    603c:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    6041:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    6047:	67 66 c7 04 24 fc a2 	mov    DWORD PTR [esp],0xa2fc
    604e:	00 00 
    6050:	66 e8 42 19 00 00    	call   7998 <_enqueue>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:852
	processSwitch();
    6056:	66 e8 d1 00 00 00    	call   612d <_processSwitch>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:853
	__asm__("sti\n");
    605c:	fb                   	sti    
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:854
}
    605d:	90                   	nop
    605e:	66 c9                	leave  
    6060:	66 c3                	ret    

00006062 <_passOneClock>:
passOneClock():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:859

int tmpID;
int tmpClocks;
void passOneClock()
{
    6062:	66 55                	push   ebp
    6064:	66 89 e5             	mov    ebp,esp
    6067:	66 83 ec 10          	sub    esp,0x10
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:860
	__asm__("cli\n");
    606b:	fa                   	cli    
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:861
	int queSize = size(&(delayQue.IDque));
    606c:	67 66 c7 04 24 a0 a2 	mov    DWORD PTR [esp],0xa2a0
    6073:	00 00 
    6075:	66 e8 d7 18 00 00    	call   7952 <_size>
    607b:	67 66 89 45 f8       	mov    DWORD PTR [ebp-0x8],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:862
	for (int i = 0; i < queSize; ++i)
    6080:	67 66 c7 45 fc 00 00 	mov    DWORD PTR [ebp-0x4],0x0
    6087:	00 00 
    6089:	e9 8d 00             	jmp    6119 <_passOneClock+0xb7>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:864
	{
		dequeue(&(delayQue.IDque), &tmpID);
    608c:	67 66 c7 44 24 04 ec 	mov    DWORD PTR [esp+0x4],0xe9ec
    6093:	e9 00 00 
    6096:	67 66 c7 04 24 a0 a2 	mov    DWORD PTR [esp],0xa2a0
    609d:	00 00 
    609f:	66 e8 60 19 00 00    	call   7a05 <_dequeue>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:865
		dequeue(&(delayQue.clocksQue), &tmpClocks);
    60a5:	67 66 c7 44 24 04 e4 	mov    DWORD PTR [esp+0x4],0xe9e4
    60ac:	e9 00 00 
    60af:	67 66 c7 04 24 fc a2 	mov    DWORD PTR [esp],0xa2fc
    60b6:	00 00 
    60b8:	66 e8 47 19 00 00    	call   7a05 <_dequeue>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:866
		tmpClocks -= 1;
    60be:	66 a1 e4 e9          	mov    eax,ds:0xe9e4
    60c2:	66 48                	dec    eax
    60c4:	66 a3 e4 e9          	mov    ds:0xe9e4,eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:867
		if (tmpClocks <= 0) {
    60c8:	66 a1 e4 e9          	mov    eax,ds:0xe9e4
    60cc:	66 85 c0             	test   eax,eax
    60cf:	7f 11                	jg     60e2 <_passOneClock+0x80>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:868
			wakeup(tmpID);
    60d1:	66 a1 ec e9          	mov    eax,ds:0xe9ec
    60d5:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    60da:	66 e8 c9 ee ff ff    	call   4fa9 <_wakeup>
    60e0:	eb 32                	jmp    6114 <_passOneClock+0xb2>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:870
		} else {
			enqueue(&(delayQue.IDque), tmpID);
    60e2:	66 a1 ec e9          	mov    eax,ds:0xe9ec
    60e6:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    60ec:	67 66 c7 04 24 a0 a2 	mov    DWORD PTR [esp],0xa2a0
    60f3:	00 00 
    60f5:	66 e8 9d 18 00 00    	call   7998 <_enqueue>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:871
			enqueue(&(delayQue.clocksQue), tmpClocks);
    60fb:	66 a1 e4 e9          	mov    eax,ds:0xe9e4
    60ff:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    6105:	67 66 c7 04 24 fc a2 	mov    DWORD PTR [esp],0xa2fc
    610c:	00 00 
    610e:	66 e8 84 18 00 00    	call   7998 <_enqueue>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:862
	for (int i = 0; i < queSize; ++i)
    6114:	67 66 ff 45 fc       	inc    DWORD PTR [ebp-0x4]
    6119:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
    611e:	67 66 3b 45 f8       	cmp    eax,DWORD PTR [ebp-0x8]
    6123:	0f 8c 65 ff          	jl     608c <_passOneClock+0x2a>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:874
		}
	}
	__asm__("sti\n");
    6127:	fb                   	sti    
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:875
}
    6128:	90                   	nop
    6129:	66 c9                	leave  
    612b:	66 c3                	ret    

0000612d <_processSwitch>:
processSwitch():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:878

void processSwitch()
{
    612d:	66 55                	push   ebp
    612f:	66 89 e5             	mov    ebp,esp
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:879
	__asm__("sti\n");
    6132:	fb                   	sti    
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:880
	__asm__("int $0x8\n");
    6133:	cd 08                	int    0x8
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:881
	__asm__("cli\n");
    6135:	fa                   	cli    
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:882
}
    6136:	90                   	nop
    6137:	66 5d                	pop    ebp
    6139:	66 c3                	ret    

0000613b <_malloc>:
malloc():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:888
///////////// process ends //////////


//////////// memory /////////////
void * malloc(int size)
{
    613b:	66 55                	push   ebp
    613d:	66 89 e5             	mov    ebp,esp
    6140:	66 83 ec 30          	sub    esp,0x30
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:890
	int ds;
	__asm__("mov %gs, %eax\n");
    6144:	66 8c e8             	mov    eax,gs
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:891
	__asm__("pushl %eax");
    6147:	66 50                	push   eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:892
	__asm__("popl %0":"=m"(ds));
    6149:	67 66 8f 45 e8       	pop    DWORD PTR [ebp-0x18]
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:897
	//ds现在是gs(ds)寄存器的值。
	char tmpstr[10];
	// int2str(ds, tmpstr);
	// printSentence(tmpstr, 12, 0, 5, white);
	size = size + (16 - size % 16);
    614e:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    6153:	66 25 0f 00 00 80    	and    eax,0x8000000f
    6159:	66 85 c0             	test   eax,eax
    615c:	79 08                	jns    6166 <_malloc+0x2b>
    615e:	66 48                	dec    eax
    6160:	66 83 c8 f0          	or     eax,0xfffffff0
    6164:	66 40                	inc    eax
    6166:	66 ba 10 00 00 00    	mov    edx,0x10
    616c:	66 29 c2             	sub    edx,eax
    616f:	66 89 d0             	mov    eax,edx
    6172:	67 66 01 45 08       	add    DWORD PTR [ebp+0x8],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:898
	int begin = 0;
    6177:	67 66 c7 45 fc 00 00 	mov    DWORD PTR [ebp-0x4],0x0
    617e:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:899
	for (int j = 0; j < MemLen; ++j) {
    6180:	67 66 c7 45 f8 00 00 	mov    DWORD PTR [ebp-0x8],0x0
    6187:	00 00 
    6189:	e9 54 01             	jmp    62e0 <_malloc+0x1a5>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:900
		int blockNum = findLaterBlock(ds << 4, size, begin);
    618c:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
    6191:	66 c1 e0 04          	shl    eax,0x4
    6195:	66 89 c2             	mov    edx,eax
    6198:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
    619d:	67 66 89 44 24 08    	mov    DWORD PTR [esp+0x8],eax
    61a3:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    61a8:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    61ae:	67 66 89 14 24       	mov    DWORD PTR [esp],edx
    61b3:	66 e8 9c 0c 00 00    	call   6e55 <_findLaterBlock>
    61b9:	67 66 89 45 f0       	mov    DWORD PTR [ebp-0x10],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:901
		int endDs = ((memoryTable[blockNum].beginAddr + size) & 0xf0000) >> 4;
    61be:	67 66 8b 55 f0       	mov    edx,DWORD PTR [ebp-0x10]
    61c3:	66 89 d0             	mov    eax,edx
    61c6:	66 01 c0             	add    eax,eax
    61c9:	66 01 d0             	add    eax,edx
    61cc:	66 c1 e0 03          	shl    eax,0x3
    61d0:	66 05 c0 a3 00 00    	add    eax,0xa3c0
    61d6:	67 66 8b 10          	mov    edx,DWORD PTR [eax]
    61da:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    61df:	66 01 d0             	add    eax,edx
    61e2:	66 c1 f8 04          	sar    eax,0x4
    61e6:	66 25 00 f0 00 00    	and    eax,0xf000
    61ec:	67 66 89 45 ec       	mov    DWORD PTR [ebp-0x14],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:902
		if (endDs <= ds) {
    61f1:	67 66 8b 45 e8       	mov    eax,DWORD PTR [ebp-0x18]
    61f6:	67 66 39 45 ec       	cmp    DWORD PTR [ebp-0x14],eax
    61fb:	0f 8f d2 00          	jg     62d1 <_malloc+0x196>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:903
			blockNum = require(size, blockNum);
    61ff:	67 66 8b 45 f0       	mov    eax,DWORD PTR [ebp-0x10]
    6204:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    620a:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    620f:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    6214:	66 e8 05 10 00 00    	call   721f <_require>
    621a:	67 66 89 45 f0       	mov    DWORD PTR [ebp-0x10],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:904
			int i = 0;
    621f:	67 66 c7 45 f4 00 00 	mov    DWORD PTR [ebp-0xc],0x0
    6226:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:905
			for (; i < HeapLimit; ++i)
    6228:	eb 75                	jmp    629f <_malloc+0x164>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:907
			{
				if (processTable[curProcessId].heapArray[i] == -1) {
    622a:	66 8b 16 70 e9       	mov    edx,DWORD PTR ds:0xe970
    622f:	66 89 d0             	mov    eax,edx
    6232:	66 c1 e0 03          	shl    eax,0x3
    6236:	66 01 d0             	add    eax,edx
    6239:	66 01 c0             	add    eax,eax
    623c:	66 01 d0             	add    eax,edx
    623f:	66 c1 e0 02          	shl    eax,0x2
    6243:	66 01 d0             	add    eax,edx
    6246:	67 66 8b 55 f4       	mov    edx,DWORD PTR [ebp-0xc]
    624b:	66 01 d0             	add    eax,edx
    624e:	66 83 c0 18          	add    eax,0x18
    6252:	67 66 8b 04 85 64 d1 	mov    eax,DWORD PTR [eax*4+0xd164]
    6259:	00 00 
    625b:	66 83 f8 ff          	cmp    eax,0xffffffff
    625f:	75 39                	jne    629a <_malloc+0x15f>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:908
					processTable[curProcessId].heapArray[i] = blockNum;
    6261:	66 8b 16 70 e9       	mov    edx,DWORD PTR ds:0xe970
    6266:	66 89 d0             	mov    eax,edx
    6269:	66 c1 e0 03          	shl    eax,0x3
    626d:	66 01 d0             	add    eax,edx
    6270:	66 01 c0             	add    eax,eax
    6273:	66 01 d0             	add    eax,edx
    6276:	66 c1 e0 02          	shl    eax,0x2
    627a:	66 01 d0             	add    eax,edx
    627d:	67 66 8b 55 f4       	mov    edx,DWORD PTR [ebp-0xc]
    6282:	66 01 d0             	add    eax,edx
    6285:	67 66 8d 50 18       	lea    edx,[eax+0x18]
    628a:	67 66 8b 45 f0       	mov    eax,DWORD PTR [ebp-0x10]
    628f:	67 66 89 04 95 64 d1 	mov    DWORD PTR [edx*4+0xd164],eax
    6296:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:909
					break;
    6298:	eb 0d                	jmp    62a7 <_malloc+0x16c>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:905
			for (; i < HeapLimit; ++i)
    629a:	67 66 ff 45 f4       	inc    DWORD PTR [ebp-0xc]
    629f:	67 66 83 7d f4 04    	cmp    DWORD PTR [ebp-0xc],0x4
    62a5:	7e 83                	jle    622a <_malloc+0xef>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:912
				}
			}
			return (void*)((memoryTable[blockNum].beginAddr) - (ds << 4));
    62a7:	67 66 8b 55 f0       	mov    edx,DWORD PTR [ebp-0x10]
    62ac:	66 89 d0             	mov    eax,edx
    62af:	66 01 c0             	add    eax,eax
    62b2:	66 01 d0             	add    eax,edx
    62b5:	66 c1 e0 03          	shl    eax,0x3
    62b9:	66 05 c0 a3 00 00    	add    eax,0xa3c0
    62bf:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    62c3:	67 66 8b 55 e8       	mov    edx,DWORD PTR [ebp-0x18]
    62c8:	66 c1 e2 04          	shl    edx,0x4
    62cc:	66 29 d0             	sub    eax,edx
    62cf:	eb 1f                	jmp    62f0 <_malloc+0x1b5>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:914
		} else {
			begin = blockNum;
    62d1:	67 66 8b 45 f0       	mov    eax,DWORD PTR [ebp-0x10]
    62d6:	67 66 89 45 fc       	mov    DWORD PTR [ebp-0x4],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:899
	for (int j = 0; j < MemLen; ++j) {
    62db:	67 66 ff 45 f8       	inc    DWORD PTR [ebp-0x8]
    62e0:	67 66 83 7d f8 27    	cmp    DWORD PTR [ebp-0x8],0x27
    62e6:	0f 8e a2 fe          	jle    618c <_malloc+0x51>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:917
		}
	}
	return NULL;
    62ea:	66 b8 00 00 00 00    	mov    eax,0x0
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:918
}
    62f0:	66 c9                	leave  
    62f2:	66 c3                	ret    

000062f4 <_free>:
free():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:921

void free(void * ptr, int ds)
{
    62f4:	66 55                	push   ebp
    62f6:	66 89 e5             	mov    ebp,esp
    62f9:	66 83 ec 0c          	sub    esp,0xc
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:922
	int item = findItem((int)ptr + (ds << 4));
    62fd:	67 66 8b 45 0c       	mov    eax,DWORD PTR [ebp+0xc]
    6302:	66 c1 e0 04          	shl    eax,0x4
    6306:	66 89 c2             	mov    edx,eax
    6309:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    630e:	66 01 d0             	add    eax,edx
    6311:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    6316:	66 e8 c8 0a 00 00    	call   6de4 <_findItem>
    631c:	67 66 89 45 fc       	mov    DWORD PTR [ebp-0x4],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:923
	if (item != -1) {
    6321:	67 66 83 7d fc ff    	cmp    DWORD PTR [ebp-0x4],0xffffffff
    6327:	74 49                	je     6372 <_free+0x7e>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:924
		release(memoryTable[item].beginAddr, memoryTable[item].endAddr);
    6329:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    632e:	66 89 d0             	mov    eax,edx
    6331:	66 01 c0             	add    eax,eax
    6334:	66 01 d0             	add    eax,edx
    6337:	66 c1 e0 03          	shl    eax,0x3
    633b:	66 05 c4 a3 00 00    	add    eax,0xa3c4
    6341:	67 66 8b 10          	mov    edx,DWORD PTR [eax]
    6345:	67 66 8b 4d fc       	mov    ecx,DWORD PTR [ebp-0x4]
    634a:	66 89 c8             	mov    eax,ecx
    634d:	66 01 c0             	add    eax,eax
    6350:	66 01 c8             	add    eax,ecx
    6353:	66 c1 e0 03          	shl    eax,0x3
    6357:	66 05 c0 a3 00 00    	add    eax,0xa3c0
    635d:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    6361:	67 66 89 54 24 04    	mov    DWORD PTR [esp+0x4],edx
    6367:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    636c:	66 e8 b1 0d 00 00    	call   7123 <_release>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:926
	}
}
    6372:	90                   	nop
    6373:	66 c9                	leave  
    6375:	66 c3                	ret    

00006377 <_nextUnusedItem>:
nextUnusedItem():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:929

int nextUnusedItem()
{
    6377:	66 55                	push   ebp
    6379:	66 89 e5             	mov    ebp,esp
    637c:	66 83 ec 04          	sub    esp,0x4
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:930
	for (int i = 0; i < MemLen; ++i)
    6380:	67 66 c7 45 fc 00 00 	mov    DWORD PTR [ebp-0x4],0x0
    6387:	00 00 
    6389:	eb 2d                	jmp    63b8 <_nextUnusedItem+0x41>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:932
	{
		if (memoryTable[i].used == 0)
    638b:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    6390:	66 89 d0             	mov    eax,edx
    6393:	66 01 c0             	add    eax,eax
    6396:	66 01 d0             	add    eax,edx
    6399:	66 c1 e0 03          	shl    eax,0x3
    639d:	66 05 d0 a3 00 00    	add    eax,0xa3d0
    63a3:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    63a7:	66 85 c0             	test   eax,eax
    63aa:	75 07                	jne    63b3 <_nextUnusedItem+0x3c>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:933
			return i;
    63ac:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
    63b1:	eb 13                	jmp    63c6 <_nextUnusedItem+0x4f>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:930
	for (int i = 0; i < MemLen; ++i)
    63b3:	67 66 ff 45 fc       	inc    DWORD PTR [ebp-0x4]
    63b8:	67 66 83 7d fc 27    	cmp    DWORD PTR [ebp-0x4],0x27
    63be:	7e cb                	jle    638b <_nextUnusedItem+0x14>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:935
	}
	return -1;
    63c0:	66 b8 ff ff ff ff    	mov    eax,0xffffffff
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:936
}
    63c6:	66 c9                	leave  
    63c8:	66 c3                	ret    

000063ca <_initialMemoryTable>:
initialMemoryTable():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:939

void initialMemoryTable()
{
    63ca:	66 55                	push   ebp
    63cc:	66 89 e5             	mov    ebp,esp
    63cf:	66 83 ec 08          	sub    esp,0x8
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:941
	int next;
	for (int i = 0; i < MemLen; ++i)
    63d3:	67 66 c7 45 fc 00 00 	mov    DWORD PTR [ebp-0x4],0x0
    63da:	00 00 
    63dc:	e9 85 00             	jmp    6464 <_initialMemoryTable+0x9a>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:943
	{
		memoryTable[i].used = 0;
    63df:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    63e4:	66 89 d0             	mov    eax,edx
    63e7:	66 01 c0             	add    eax,eax
    63ea:	66 01 d0             	add    eax,edx
    63ed:	66 c1 e0 03          	shl    eax,0x3
    63f1:	66 05 d0 a3 00 00    	add    eax,0xa3d0
    63f7:	67 66 c7 00 00 00 00 	mov    DWORD PTR [eax],0x0
    63fe:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:944
		memoryTable[i].next = -1;
    63ff:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    6404:	66 89 d0             	mov    eax,edx
    6407:	66 01 c0             	add    eax,eax
    640a:	66 01 d0             	add    eax,edx
    640d:	66 c1 e0 03          	shl    eax,0x3
    6411:	66 05 cc a3 00 00    	add    eax,0xa3cc
    6417:	67 66 c7 00 ff ff ff 	mov    DWORD PTR [eax],0xffffffff
    641e:	ff 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:945
		memoryTable[i].pre = -1;
    641f:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    6424:	66 89 d0             	mov    eax,edx
    6427:	66 01 c0             	add    eax,eax
    642a:	66 01 d0             	add    eax,edx
    642d:	66 c1 e0 03          	shl    eax,0x3
    6431:	66 05 c8 a3 00 00    	add    eax,0xa3c8
    6437:	67 66 c7 00 ff ff ff 	mov    DWORD PTR [eax],0xffffffff
    643e:	ff 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:946
		memoryTable[i].status = unused;
    643f:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    6444:	66 89 d0             	mov    eax,edx
    6447:	66 01 c0             	add    eax,eax
    644a:	66 01 d0             	add    eax,edx
    644d:	66 c1 e0 03          	shl    eax,0x3
    6451:	66 05 d4 a3 00 00    	add    eax,0xa3d4
    6457:	67 66 c7 00 00 00 00 	mov    DWORD PTR [eax],0x0
    645e:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:941
	for (int i = 0; i < MemLen; ++i)
    645f:	67 66 ff 45 fc       	inc    DWORD PTR [ebp-0x4]
    6464:	67 66 83 7d fc 27    	cmp    DWORD PTR [ebp-0x4],0x27
    646a:	0f 8e 71 ff          	jle    63df <_initialMemoryTable+0x15>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:948
	}
	firstUnusedMemoryItem = 0;
    646e:	66 c7 06 64 a2 00 00 	mov    DWORD PTR ds:0xa264,0x0
    6475:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:949
	memoryTable[firstUnusedMemoryItem].pre = -1;
    6477:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    647c:	66 89 d0             	mov    eax,edx
    647f:	66 01 c0             	add    eax,eax
    6482:	66 01 d0             	add    eax,edx
    6485:	66 c1 e0 03          	shl    eax,0x3
    6489:	66 05 c8 a3 00 00    	add    eax,0xa3c8
    648f:	67 66 c7 00 ff ff ff 	mov    DWORD PTR [eax],0xffffffff
    6496:	ff 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:950
	memoryTable[firstUnusedMemoryItem].used = 1;
    6497:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    649c:	66 89 d0             	mov    eax,edx
    649f:	66 01 c0             	add    eax,eax
    64a2:	66 01 d0             	add    eax,edx
    64a5:	66 c1 e0 03          	shl    eax,0x3
    64a9:	66 05 d0 a3 00 00    	add    eax,0xa3d0
    64af:	67 66 c7 00 01 00 00 	mov    DWORD PTR [eax],0x1
    64b6:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:951
	memoryTable[firstUnusedMemoryItem].beginAddr = 0;
    64b7:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    64bc:	66 89 d0             	mov    eax,edx
    64bf:	66 01 c0             	add    eax,eax
    64c2:	66 01 d0             	add    eax,edx
    64c5:	66 c1 e0 03          	shl    eax,0x3
    64c9:	66 05 c0 a3 00 00    	add    eax,0xa3c0
    64cf:	67 66 c7 00 00 00 00 	mov    DWORD PTR [eax],0x0
    64d6:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:952
	memoryTable[firstUnusedMemoryItem].endAddr = 0x4ff;
    64d7:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    64dc:	66 89 d0             	mov    eax,edx
    64df:	66 01 c0             	add    eax,eax
    64e2:	66 01 d0             	add    eax,edx
    64e5:	66 c1 e0 03          	shl    eax,0x3
    64e9:	66 05 c4 a3 00 00    	add    eax,0xa3c4
    64ef:	67 66 c7 00 ff 04 00 	mov    DWORD PTR [eax],0x4ff
    64f6:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:953
	memoryTable[firstUnusedMemoryItem].status = used;
    64f7:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    64fc:	66 89 d0             	mov    eax,edx
    64ff:	66 01 c0             	add    eax,eax
    6502:	66 01 d0             	add    eax,edx
    6505:	66 c1 e0 03          	shl    eax,0x3
    6509:	66 05 d4 a3 00 00    	add    eax,0xa3d4
    650f:	67 66 c7 00 01 00 00 	mov    DWORD PTR [eax],0x1
    6516:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:954
	next = nextUnusedItem();
    6517:	66 e8 5a fe ff ff    	call   6377 <_nextUnusedItem>
    651d:	67 66 89 45 f8       	mov    DWORD PTR [ebp-0x8],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:955
	memoryTable[next].pre = firstUnusedMemoryItem;
    6522:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    6527:	67 66 8b 4d f8       	mov    ecx,DWORD PTR [ebp-0x8]
    652c:	66 89 c8             	mov    eax,ecx
    652f:	66 01 c0             	add    eax,eax
    6532:	66 01 c8             	add    eax,ecx
    6535:	66 c1 e0 03          	shl    eax,0x3
    6539:	66 05 c8 a3 00 00    	add    eax,0xa3c8
    653f:	67 66 89 10          	mov    DWORD PTR [eax],edx
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:956
	memoryTable[firstUnusedMemoryItem].next = next;
    6543:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    6548:	66 89 d0             	mov    eax,edx
    654b:	66 01 c0             	add    eax,eax
    654e:	66 01 d0             	add    eax,edx
    6551:	66 c1 e0 03          	shl    eax,0x3
    6555:	67 66 8d 90 cc a3 00 	lea    edx,[eax+0xa3cc]
    655c:	00 
    655d:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
    6562:	67 66 89 02          	mov    DWORD PTR [edx],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:957
	firstUnusedMemoryItem = next;
    6566:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
    656b:	66 a3 64 a2          	mov    ds:0xa264,eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:959

	memoryTable[firstUnusedMemoryItem].used = 1;
    656f:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    6574:	66 89 d0             	mov    eax,edx
    6577:	66 01 c0             	add    eax,eax
    657a:	66 01 d0             	add    eax,edx
    657d:	66 c1 e0 03          	shl    eax,0x3
    6581:	66 05 d0 a3 00 00    	add    eax,0xa3d0
    6587:	67 66 c7 00 01 00 00 	mov    DWORD PTR [eax],0x1
    658e:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:960
	memoryTable[firstUnusedMemoryItem].beginAddr = 0x500;
    658f:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    6594:	66 89 d0             	mov    eax,edx
    6597:	66 01 c0             	add    eax,eax
    659a:	66 01 d0             	add    eax,edx
    659d:	66 c1 e0 03          	shl    eax,0x3
    65a1:	66 05 c0 a3 00 00    	add    eax,0xa3c0
    65a7:	67 66 c7 00 00 05 00 	mov    DWORD PTR [eax],0x500
    65ae:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:961
	memoryTable[firstUnusedMemoryItem].endAddr = 0x7cff;
    65af:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    65b4:	66 89 d0             	mov    eax,edx
    65b7:	66 01 c0             	add    eax,eax
    65ba:	66 01 d0             	add    eax,edx
    65bd:	66 c1 e0 03          	shl    eax,0x3
    65c1:	66 05 c4 a3 00 00    	add    eax,0xa3c4
    65c7:	67 66 c7 00 ff 7c 00 	mov    DWORD PTR [eax],0x7cff
    65ce:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:962
	memoryTable[firstUnusedMemoryItem].status = unused;
    65cf:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    65d4:	66 89 d0             	mov    eax,edx
    65d7:	66 01 c0             	add    eax,eax
    65da:	66 01 d0             	add    eax,edx
    65dd:	66 c1 e0 03          	shl    eax,0x3
    65e1:	66 05 d4 a3 00 00    	add    eax,0xa3d4
    65e7:	67 66 c7 00 00 00 00 	mov    DWORD PTR [eax],0x0
    65ee:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:963
	next = nextUnusedItem();
    65ef:	66 e8 82 fd ff ff    	call   6377 <_nextUnusedItem>
    65f5:	67 66 89 45 f8       	mov    DWORD PTR [ebp-0x8],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:964
	memoryTable[next].pre = firstUnusedMemoryItem;
    65fa:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    65ff:	67 66 8b 4d f8       	mov    ecx,DWORD PTR [ebp-0x8]
    6604:	66 89 c8             	mov    eax,ecx
    6607:	66 01 c0             	add    eax,eax
    660a:	66 01 c8             	add    eax,ecx
    660d:	66 c1 e0 03          	shl    eax,0x3
    6611:	66 05 c8 a3 00 00    	add    eax,0xa3c8
    6617:	67 66 89 10          	mov    DWORD PTR [eax],edx
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:965
	memoryTable[firstUnusedMemoryItem].next = next;
    661b:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    6620:	66 89 d0             	mov    eax,edx
    6623:	66 01 c0             	add    eax,eax
    6626:	66 01 d0             	add    eax,edx
    6629:	66 c1 e0 03          	shl    eax,0x3
    662d:	67 66 8d 90 cc a3 00 	lea    edx,[eax+0xa3cc]
    6634:	00 
    6635:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
    663a:	67 66 89 02          	mov    DWORD PTR [edx],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:966
	firstUnusedMemoryItem = next;
    663e:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
    6643:	66 a3 64 a2          	mov    ds:0xa264,eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:969


	memoryTable[firstUnusedMemoryItem].used = 1;
    6647:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    664c:	66 89 d0             	mov    eax,edx
    664f:	66 01 c0             	add    eax,eax
    6652:	66 01 d0             	add    eax,edx
    6655:	66 c1 e0 03          	shl    eax,0x3
    6659:	66 05 d0 a3 00 00    	add    eax,0xa3d0
    665f:	67 66 c7 00 01 00 00 	mov    DWORD PTR [eax],0x1
    6666:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:970
	memoryTable[firstUnusedMemoryItem].beginAddr = 0x7e00;
    6667:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    666c:	66 89 d0             	mov    eax,edx
    666f:	66 01 c0             	add    eax,eax
    6672:	66 01 d0             	add    eax,edx
    6675:	66 c1 e0 03          	shl    eax,0x3
    6679:	66 05 c0 a3 00 00    	add    eax,0xa3c0
    667f:	67 66 c7 00 00 7e 00 	mov    DWORD PTR [eax],0x7e00
    6686:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:971
	memoryTable[firstUnusedMemoryItem].endAddr = 0x7dff;
    6687:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    668c:	66 89 d0             	mov    eax,edx
    668f:	66 01 c0             	add    eax,eax
    6692:	66 01 d0             	add    eax,edx
    6695:	66 c1 e0 03          	shl    eax,0x3
    6699:	66 05 c4 a3 00 00    	add    eax,0xa3c4
    669f:	67 66 c7 00 ff 7d 00 	mov    DWORD PTR [eax],0x7dff
    66a6:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:972
	memoryTable[firstUnusedMemoryItem].status = used;
    66a7:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    66ac:	66 89 d0             	mov    eax,edx
    66af:	66 01 c0             	add    eax,eax
    66b2:	66 01 d0             	add    eax,edx
    66b5:	66 c1 e0 03          	shl    eax,0x3
    66b9:	66 05 d4 a3 00 00    	add    eax,0xa3d4
    66bf:	67 66 c7 00 01 00 00 	mov    DWORD PTR [eax],0x1
    66c6:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:973
	next = nextUnusedItem();
    66c7:	66 e8 aa fc ff ff    	call   6377 <_nextUnusedItem>
    66cd:	67 66 89 45 f8       	mov    DWORD PTR [ebp-0x8],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:974
	memoryTable[next].pre = firstUnusedMemoryItem;
    66d2:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    66d7:	67 66 8b 4d f8       	mov    ecx,DWORD PTR [ebp-0x8]
    66dc:	66 89 c8             	mov    eax,ecx
    66df:	66 01 c0             	add    eax,eax
    66e2:	66 01 c8             	add    eax,ecx
    66e5:	66 c1 e0 03          	shl    eax,0x3
    66e9:	66 05 c8 a3 00 00    	add    eax,0xa3c8
    66ef:	67 66 89 10          	mov    DWORD PTR [eax],edx
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:975
	memoryTable[firstUnusedMemoryItem].next = next;
    66f3:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    66f8:	66 89 d0             	mov    eax,edx
    66fb:	66 01 c0             	add    eax,eax
    66fe:	66 01 d0             	add    eax,edx
    6701:	66 c1 e0 03          	shl    eax,0x3
    6705:	67 66 8d 90 cc a3 00 	lea    edx,[eax+0xa3cc]
    670c:	00 
    670d:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
    6712:	67 66 89 02          	mov    DWORD PTR [edx],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:976
	firstUnusedMemoryItem = next;
    6716:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
    671b:	66 a3 64 a2          	mov    ds:0xa264,eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:978

	memoryTable[firstUnusedMemoryItem].used = 1;
    671f:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    6724:	66 89 d0             	mov    eax,edx
    6727:	66 01 c0             	add    eax,eax
    672a:	66 01 d0             	add    eax,edx
    672d:	66 c1 e0 03          	shl    eax,0x3
    6731:	66 05 d0 a3 00 00    	add    eax,0xa3d0
    6737:	67 66 c7 00 01 00 00 	mov    DWORD PTR [eax],0x1
    673e:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:979
	memoryTable[firstUnusedMemoryItem].beginAddr = 0x7e00;
    673f:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    6744:	66 89 d0             	mov    eax,edx
    6747:	66 01 c0             	add    eax,eax
    674a:	66 01 d0             	add    eax,edx
    674d:	66 c1 e0 03          	shl    eax,0x3
    6751:	66 05 c0 a3 00 00    	add    eax,0xa3c0
    6757:	67 66 c7 00 00 7e 00 	mov    DWORD PTR [eax],0x7e00
    675e:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:980
	memoryTable[firstUnusedMemoryItem].endAddr = 0xc1ff;
    675f:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    6764:	66 89 d0             	mov    eax,edx
    6767:	66 01 c0             	add    eax,eax
    676a:	66 01 d0             	add    eax,edx
    676d:	66 c1 e0 03          	shl    eax,0x3
    6771:	66 05 c4 a3 00 00    	add    eax,0xa3c4
    6777:	67 66 c7 00 ff c1 00 	mov    DWORD PTR [eax],0xc1ff
    677e:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:981
	memoryTable[firstUnusedMemoryItem].status = unused;
    677f:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    6784:	66 89 d0             	mov    eax,edx
    6787:	66 01 c0             	add    eax,eax
    678a:	66 01 d0             	add    eax,edx
    678d:	66 c1 e0 03          	shl    eax,0x3
    6791:	66 05 d4 a3 00 00    	add    eax,0xa3d4
    6797:	67 66 c7 00 00 00 00 	mov    DWORD PTR [eax],0x0
    679e:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:982
	next = nextUnusedItem();
    679f:	66 e8 d2 fb ff ff    	call   6377 <_nextUnusedItem>
    67a5:	67 66 89 45 f8       	mov    DWORD PTR [ebp-0x8],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:983
	memoryTable[next].pre = firstUnusedMemoryItem;
    67aa:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    67af:	67 66 8b 4d f8       	mov    ecx,DWORD PTR [ebp-0x8]
    67b4:	66 89 c8             	mov    eax,ecx
    67b7:	66 01 c0             	add    eax,eax
    67ba:	66 01 c8             	add    eax,ecx
    67bd:	66 c1 e0 03          	shl    eax,0x3
    67c1:	66 05 c8 a3 00 00    	add    eax,0xa3c8
    67c7:	67 66 89 10          	mov    DWORD PTR [eax],edx
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:984
	memoryTable[firstUnusedMemoryItem].next = next;
    67cb:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    67d0:	66 89 d0             	mov    eax,edx
    67d3:	66 01 c0             	add    eax,eax
    67d6:	66 01 d0             	add    eax,edx
    67d9:	66 c1 e0 03          	shl    eax,0x3
    67dd:	67 66 8d 90 cc a3 00 	lea    edx,[eax+0xa3cc]
    67e4:	00 
    67e5:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
    67ea:	67 66 89 02          	mov    DWORD PTR [edx],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:985
	firstUnusedMemoryItem = next;
    67ee:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
    67f3:	66 a3 64 a2          	mov    ds:0xa264,eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:987

	memoryTable[firstUnusedMemoryItem].used = 1;
    67f7:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    67fc:	66 89 d0             	mov    eax,edx
    67ff:	66 01 c0             	add    eax,eax
    6802:	66 01 d0             	add    eax,edx
    6805:	66 c1 e0 03          	shl    eax,0x3
    6809:	66 05 d0 a3 00 00    	add    eax,0xa3d0
    680f:	67 66 c7 00 01 00 00 	mov    DWORD PTR [eax],0x1
    6816:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:988
	memoryTable[firstUnusedMemoryItem].beginAddr = 0xc200;
    6817:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    681c:	66 89 d0             	mov    eax,edx
    681f:	66 01 c0             	add    eax,eax
    6822:	66 01 d0             	add    eax,edx
    6825:	66 c1 e0 03          	shl    eax,0x3
    6829:	66 05 c0 a3 00 00    	add    eax,0xa3c0
    682f:	67 66 c7 00 00 c2 00 	mov    DWORD PTR [eax],0xc200
    6836:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:989
	memoryTable[firstUnusedMemoryItem].endAddr = 0xc9ff;
    6837:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    683c:	66 89 d0             	mov    eax,edx
    683f:	66 01 c0             	add    eax,eax
    6842:	66 01 d0             	add    eax,edx
    6845:	66 c1 e0 03          	shl    eax,0x3
    6849:	66 05 c4 a3 00 00    	add    eax,0xa3c4
    684f:	67 66 c7 00 ff c9 00 	mov    DWORD PTR [eax],0xc9ff
    6856:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:990
	memoryTable[firstUnusedMemoryItem].status = used;
    6857:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    685c:	66 89 d0             	mov    eax,edx
    685f:	66 01 c0             	add    eax,eax
    6862:	66 01 d0             	add    eax,edx
    6865:	66 c1 e0 03          	shl    eax,0x3
    6869:	66 05 d4 a3 00 00    	add    eax,0xa3d4
    686f:	67 66 c7 00 01 00 00 	mov    DWORD PTR [eax],0x1
    6876:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:991
	next = nextUnusedItem();
    6877:	66 e8 fa fa ff ff    	call   6377 <_nextUnusedItem>
    687d:	67 66 89 45 f8       	mov    DWORD PTR [ebp-0x8],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:992
	memoryTable[next].pre = firstUnusedMemoryItem;
    6882:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    6887:	67 66 8b 4d f8       	mov    ecx,DWORD PTR [ebp-0x8]
    688c:	66 89 c8             	mov    eax,ecx
    688f:	66 01 c0             	add    eax,eax
    6892:	66 01 c8             	add    eax,ecx
    6895:	66 c1 e0 03          	shl    eax,0x3
    6899:	66 05 c8 a3 00 00    	add    eax,0xa3c8
    689f:	67 66 89 10          	mov    DWORD PTR [eax],edx
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:993
	memoryTable[firstUnusedMemoryItem].next = next;
    68a3:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    68a8:	66 89 d0             	mov    eax,edx
    68ab:	66 01 c0             	add    eax,eax
    68ae:	66 01 d0             	add    eax,edx
    68b1:	66 c1 e0 03          	shl    eax,0x3
    68b5:	67 66 8d 90 cc a3 00 	lea    edx,[eax+0xa3cc]
    68bc:	00 
    68bd:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
    68c2:	67 66 89 02          	mov    DWORD PTR [edx],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:994
	firstUnusedMemoryItem = next;
    68c6:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
    68cb:	66 a3 64 a2          	mov    ds:0xa264,eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:996

	memoryTable[firstUnusedMemoryItem].used = 1;
    68cf:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    68d4:	66 89 d0             	mov    eax,edx
    68d7:	66 01 c0             	add    eax,eax
    68da:	66 01 d0             	add    eax,edx
    68dd:	66 c1 e0 03          	shl    eax,0x3
    68e1:	66 05 d0 a3 00 00    	add    eax,0xa3d0
    68e7:	67 66 c7 00 01 00 00 	mov    DWORD PTR [eax],0x1
    68ee:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:997
	memoryTable[firstUnusedMemoryItem].beginAddr = 0xca00;
    68ef:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    68f4:	66 89 d0             	mov    eax,edx
    68f7:	66 01 c0             	add    eax,eax
    68fa:	66 01 d0             	add    eax,edx
    68fd:	66 c1 e0 03          	shl    eax,0x3
    6901:	66 05 c0 a3 00 00    	add    eax,0xa3c0
    6907:	67 66 c7 00 00 ca 00 	mov    DWORD PTR [eax],0xca00
    690e:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:998
	memoryTable[firstUnusedMemoryItem].endAddr = 0x1ffff;
    690f:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    6914:	66 89 d0             	mov    eax,edx
    6917:	66 01 c0             	add    eax,eax
    691a:	66 01 d0             	add    eax,edx
    691d:	66 c1 e0 03          	shl    eax,0x3
    6921:	66 05 c4 a3 00 00    	add    eax,0xa3c4
    6927:	67 66 c7 00 ff ff 01 	mov    DWORD PTR [eax],0x1ffff
    692e:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:999
	memoryTable[firstUnusedMemoryItem].status = unused;
    692f:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    6934:	66 89 d0             	mov    eax,edx
    6937:	66 01 c0             	add    eax,eax
    693a:	66 01 d0             	add    eax,edx
    693d:	66 c1 e0 03          	shl    eax,0x3
    6941:	66 05 d4 a3 00 00    	add    eax,0xa3d4
    6947:	67 66 c7 00 00 00 00 	mov    DWORD PTR [eax],0x0
    694e:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1000
	next = nextUnusedItem();
    694f:	66 e8 22 fa ff ff    	call   6377 <_nextUnusedItem>
    6955:	67 66 89 45 f8       	mov    DWORD PTR [ebp-0x8],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1001
	memoryTable[next].pre = firstUnusedMemoryItem;
    695a:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    695f:	67 66 8b 4d f8       	mov    ecx,DWORD PTR [ebp-0x8]
    6964:	66 89 c8             	mov    eax,ecx
    6967:	66 01 c0             	add    eax,eax
    696a:	66 01 c8             	add    eax,ecx
    696d:	66 c1 e0 03          	shl    eax,0x3
    6971:	66 05 c8 a3 00 00    	add    eax,0xa3c8
    6977:	67 66 89 10          	mov    DWORD PTR [eax],edx
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1002
	memoryTable[firstUnusedMemoryItem].next = next;
    697b:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    6980:	66 89 d0             	mov    eax,edx
    6983:	66 01 c0             	add    eax,eax
    6986:	66 01 d0             	add    eax,edx
    6989:	66 c1 e0 03          	shl    eax,0x3
    698d:	67 66 8d 90 cc a3 00 	lea    edx,[eax+0xa3cc]
    6994:	00 
    6995:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
    699a:	67 66 89 02          	mov    DWORD PTR [edx],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1003
	firstUnusedMemoryItem = next;
    699e:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
    69a3:	66 a3 64 a2          	mov    ds:0xa264,eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1005

	memoryTable[firstUnusedMemoryItem].used = 1;
    69a7:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    69ac:	66 89 d0             	mov    eax,edx
    69af:	66 01 c0             	add    eax,eax
    69b2:	66 01 d0             	add    eax,edx
    69b5:	66 c1 e0 03          	shl    eax,0x3
    69b9:	66 05 d0 a3 00 00    	add    eax,0xa3d0
    69bf:	67 66 c7 00 01 00 00 	mov    DWORD PTR [eax],0x1
    69c6:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1006
	memoryTable[firstUnusedMemoryItem].beginAddr = 0x20000;
    69c7:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    69cc:	66 89 d0             	mov    eax,edx
    69cf:	66 01 c0             	add    eax,eax
    69d2:	66 01 d0             	add    eax,edx
    69d5:	66 c1 e0 03          	shl    eax,0x3
    69d9:	66 05 c0 a3 00 00    	add    eax,0xa3c0
    69df:	67 66 c7 00 00 00 02 	mov    DWORD PTR [eax],0x20000
    69e6:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1007
	memoryTable[firstUnusedMemoryItem].endAddr = 0x2cfff;
    69e7:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    69ec:	66 89 d0             	mov    eax,edx
    69ef:	66 01 c0             	add    eax,eax
    69f2:	66 01 d0             	add    eax,edx
    69f5:	66 c1 e0 03          	shl    eax,0x3
    69f9:	66 05 c4 a3 00 00    	add    eax,0xa3c4
    69ff:	67 66 c7 00 ff cf 02 	mov    DWORD PTR [eax],0x2cfff
    6a06:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1008
	memoryTable[firstUnusedMemoryItem].status = used;
    6a07:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    6a0c:	66 89 d0             	mov    eax,edx
    6a0f:	66 01 c0             	add    eax,eax
    6a12:	66 01 d0             	add    eax,edx
    6a15:	66 c1 e0 03          	shl    eax,0x3
    6a19:	66 05 d4 a3 00 00    	add    eax,0xa3d4
    6a1f:	67 66 c7 00 01 00 00 	mov    DWORD PTR [eax],0x1
    6a26:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1009
	next = nextUnusedItem();
    6a27:	66 e8 4a f9 ff ff    	call   6377 <_nextUnusedItem>
    6a2d:	67 66 89 45 f8       	mov    DWORD PTR [ebp-0x8],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1010
	memoryTable[next].pre = firstUnusedMemoryItem;
    6a32:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    6a37:	67 66 8b 4d f8       	mov    ecx,DWORD PTR [ebp-0x8]
    6a3c:	66 89 c8             	mov    eax,ecx
    6a3f:	66 01 c0             	add    eax,eax
    6a42:	66 01 c8             	add    eax,ecx
    6a45:	66 c1 e0 03          	shl    eax,0x3
    6a49:	66 05 c8 a3 00 00    	add    eax,0xa3c8
    6a4f:	67 66 89 10          	mov    DWORD PTR [eax],edx
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1011
	memoryTable[firstUnusedMemoryItem].next = next;
    6a53:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    6a58:	66 89 d0             	mov    eax,edx
    6a5b:	66 01 c0             	add    eax,eax
    6a5e:	66 01 d0             	add    eax,edx
    6a61:	66 c1 e0 03          	shl    eax,0x3
    6a65:	67 66 8d 90 cc a3 00 	lea    edx,[eax+0xa3cc]
    6a6c:	00 
    6a6d:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
    6a72:	67 66 89 02          	mov    DWORD PTR [edx],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1012
	firstUnusedMemoryItem = next;
    6a76:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
    6a7b:	66 a3 64 a2          	mov    ds:0xa264,eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1014
	// blockNum = 7;
	memoryTable[firstUnusedMemoryItem].used = 1;
    6a7f:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    6a84:	66 89 d0             	mov    eax,edx
    6a87:	66 01 c0             	add    eax,eax
    6a8a:	66 01 d0             	add    eax,edx
    6a8d:	66 c1 e0 03          	shl    eax,0x3
    6a91:	66 05 d0 a3 00 00    	add    eax,0xa3d0
    6a97:	67 66 c7 00 01 00 00 	mov    DWORD PTR [eax],0x1
    6a9e:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1015
	memoryTable[firstUnusedMemoryItem].beginAddr = 0x2d000;
    6a9f:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    6aa4:	66 89 d0             	mov    eax,edx
    6aa7:	66 01 c0             	add    eax,eax
    6aaa:	66 01 d0             	add    eax,edx
    6aad:	66 c1 e0 03          	shl    eax,0x3
    6ab1:	66 05 c0 a3 00 00    	add    eax,0xa3c0
    6ab7:	67 66 c7 00 00 d0 02 	mov    DWORD PTR [eax],0x2d000
    6abe:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1016
	memoryTable[firstUnusedMemoryItem].endAddr = 0x2ffff;
    6abf:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    6ac4:	66 89 d0             	mov    eax,edx
    6ac7:	66 01 c0             	add    eax,eax
    6aca:	66 01 d0             	add    eax,edx
    6acd:	66 c1 e0 03          	shl    eax,0x3
    6ad1:	66 05 c4 a3 00 00    	add    eax,0xa3c4
    6ad7:	67 66 c7 00 ff ff 02 	mov    DWORD PTR [eax],0x2ffff
    6ade:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1017
	memoryTable[firstUnusedMemoryItem].status = used;
    6adf:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    6ae4:	66 89 d0             	mov    eax,edx
    6ae7:	66 01 c0             	add    eax,eax
    6aea:	66 01 d0             	add    eax,edx
    6aed:	66 c1 e0 03          	shl    eax,0x3
    6af1:	66 05 d4 a3 00 00    	add    eax,0xa3d4
    6af7:	67 66 c7 00 01 00 00 	mov    DWORD PTR [eax],0x1
    6afe:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1018
	next = nextUnusedItem();
    6aff:	66 e8 72 f8 ff ff    	call   6377 <_nextUnusedItem>
    6b05:	67 66 89 45 f8       	mov    DWORD PTR [ebp-0x8],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1019
	memoryTable[next].pre = firstUnusedMemoryItem;
    6b0a:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    6b0f:	67 66 8b 4d f8       	mov    ecx,DWORD PTR [ebp-0x8]
    6b14:	66 89 c8             	mov    eax,ecx
    6b17:	66 01 c0             	add    eax,eax
    6b1a:	66 01 c8             	add    eax,ecx
    6b1d:	66 c1 e0 03          	shl    eax,0x3
    6b21:	66 05 c8 a3 00 00    	add    eax,0xa3c8
    6b27:	67 66 89 10          	mov    DWORD PTR [eax],edx
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1020
	memoryTable[firstUnusedMemoryItem].next = next;
    6b2b:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    6b30:	66 89 d0             	mov    eax,edx
    6b33:	66 01 c0             	add    eax,eax
    6b36:	66 01 d0             	add    eax,edx
    6b39:	66 c1 e0 03          	shl    eax,0x3
    6b3d:	67 66 8d 90 cc a3 00 	lea    edx,[eax+0xa3cc]
    6b44:	00 
    6b45:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
    6b4a:	67 66 89 02          	mov    DWORD PTR [edx],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1021
	firstUnusedMemoryItem = next;
    6b4e:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
    6b53:	66 a3 64 a2          	mov    ds:0xa264,eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1024

	// blockNum = 8;
	memoryTable[firstUnusedMemoryItem].used = 1;
    6b57:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    6b5c:	66 89 d0             	mov    eax,edx
    6b5f:	66 01 c0             	add    eax,eax
    6b62:	66 01 d0             	add    eax,edx
    6b65:	66 c1 e0 03          	shl    eax,0x3
    6b69:	66 05 d0 a3 00 00    	add    eax,0xa3d0
    6b6f:	67 66 c7 00 01 00 00 	mov    DWORD PTR [eax],0x1
    6b76:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1025
	memoryTable[firstUnusedMemoryItem].beginAddr = 0x30000;
    6b77:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    6b7c:	66 89 d0             	mov    eax,edx
    6b7f:	66 01 c0             	add    eax,eax
    6b82:	66 01 d0             	add    eax,edx
    6b85:	66 c1 e0 03          	shl    eax,0x3
    6b89:	66 05 c0 a3 00 00    	add    eax,0xa3c0
    6b8f:	67 66 c7 00 00 00 03 	mov    DWORD PTR [eax],0x30000
    6b96:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1026
	memoryTable[firstUnusedMemoryItem].endAddr = 0x7ffff;
    6b97:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    6b9c:	66 89 d0             	mov    eax,edx
    6b9f:	66 01 c0             	add    eax,eax
    6ba2:	66 01 d0             	add    eax,edx
    6ba5:	66 c1 e0 03          	shl    eax,0x3
    6ba9:	66 05 c4 a3 00 00    	add    eax,0xa3c4
    6baf:	67 66 c7 00 ff ff 07 	mov    DWORD PTR [eax],0x7ffff
    6bb6:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1027
	memoryTable[firstUnusedMemoryItem].status = unused;
    6bb7:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    6bbc:	66 89 d0             	mov    eax,edx
    6bbf:	66 01 c0             	add    eax,eax
    6bc2:	66 01 d0             	add    eax,edx
    6bc5:	66 c1 e0 03          	shl    eax,0x3
    6bc9:	66 05 d4 a3 00 00    	add    eax,0xa3d4
    6bcf:	67 66 c7 00 00 00 00 	mov    DWORD PTR [eax],0x0
    6bd6:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1028
	next = nextUnusedItem();
    6bd7:	66 e8 9a f7 ff ff    	call   6377 <_nextUnusedItem>
    6bdd:	67 66 89 45 f8       	mov    DWORD PTR [ebp-0x8],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1029
	memoryTable[next].pre = firstUnusedMemoryItem;
    6be2:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    6be7:	67 66 8b 4d f8       	mov    ecx,DWORD PTR [ebp-0x8]
    6bec:	66 89 c8             	mov    eax,ecx
    6bef:	66 01 c0             	add    eax,eax
    6bf2:	66 01 c8             	add    eax,ecx
    6bf5:	66 c1 e0 03          	shl    eax,0x3
    6bf9:	66 05 c8 a3 00 00    	add    eax,0xa3c8
    6bff:	67 66 89 10          	mov    DWORD PTR [eax],edx
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1030
	memoryTable[firstUnusedMemoryItem].next = next;
    6c03:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    6c08:	66 89 d0             	mov    eax,edx
    6c0b:	66 01 c0             	add    eax,eax
    6c0e:	66 01 d0             	add    eax,edx
    6c11:	66 c1 e0 03          	shl    eax,0x3
    6c15:	67 66 8d 90 cc a3 00 	lea    edx,[eax+0xa3cc]
    6c1c:	00 
    6c1d:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
    6c22:	67 66 89 02          	mov    DWORD PTR [edx],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1031
	firstUnusedMemoryItem = next;
    6c26:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
    6c2b:	66 a3 64 a2          	mov    ds:0xa264,eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1034

	// blockNum = 9;
	memoryTable[firstUnusedMemoryItem].used = 1;
    6c2f:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    6c34:	66 89 d0             	mov    eax,edx
    6c37:	66 01 c0             	add    eax,eax
    6c3a:	66 01 d0             	add    eax,edx
    6c3d:	66 c1 e0 03          	shl    eax,0x3
    6c41:	66 05 d0 a3 00 00    	add    eax,0xa3d0
    6c47:	67 66 c7 00 01 00 00 	mov    DWORD PTR [eax],0x1
    6c4e:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1035
	memoryTable[firstUnusedMemoryItem].beginAddr = 0x80000;
    6c4f:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    6c54:	66 89 d0             	mov    eax,edx
    6c57:	66 01 c0             	add    eax,eax
    6c5a:	66 01 d0             	add    eax,edx
    6c5d:	66 c1 e0 03          	shl    eax,0x3
    6c61:	66 05 c0 a3 00 00    	add    eax,0xa3c0
    6c67:	67 66 c7 00 00 00 08 	mov    DWORD PTR [eax],0x80000
    6c6e:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1036
	memoryTable[firstUnusedMemoryItem].endAddr = 0x86fff;
    6c6f:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    6c74:	66 89 d0             	mov    eax,edx
    6c77:	66 01 c0             	add    eax,eax
    6c7a:	66 01 d0             	add    eax,edx
    6c7d:	66 c1 e0 03          	shl    eax,0x3
    6c81:	66 05 c4 a3 00 00    	add    eax,0xa3c4
    6c87:	67 66 c7 00 ff 6f 08 	mov    DWORD PTR [eax],0x86fff
    6c8e:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1037
	memoryTable[firstUnusedMemoryItem].status = used;
    6c8f:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    6c94:	66 89 d0             	mov    eax,edx
    6c97:	66 01 c0             	add    eax,eax
    6c9a:	66 01 d0             	add    eax,edx
    6c9d:	66 c1 e0 03          	shl    eax,0x3
    6ca1:	66 05 d4 a3 00 00    	add    eax,0xa3d4
    6ca7:	67 66 c7 00 01 00 00 	mov    DWORD PTR [eax],0x1
    6cae:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1038
	next = nextUnusedItem();
    6caf:	66 e8 c2 f6 ff ff    	call   6377 <_nextUnusedItem>
    6cb5:	67 66 89 45 f8       	mov    DWORD PTR [ebp-0x8],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1039
	memoryTable[next].pre = firstUnusedMemoryItem;
    6cba:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    6cbf:	67 66 8b 4d f8       	mov    ecx,DWORD PTR [ebp-0x8]
    6cc4:	66 89 c8             	mov    eax,ecx
    6cc7:	66 01 c0             	add    eax,eax
    6cca:	66 01 c8             	add    eax,ecx
    6ccd:	66 c1 e0 03          	shl    eax,0x3
    6cd1:	66 05 c8 a3 00 00    	add    eax,0xa3c8
    6cd7:	67 66 89 10          	mov    DWORD PTR [eax],edx
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1040
	memoryTable[firstUnusedMemoryItem].next = next;
    6cdb:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    6ce0:	66 89 d0             	mov    eax,edx
    6ce3:	66 01 c0             	add    eax,eax
    6ce6:	66 01 d0             	add    eax,edx
    6ce9:	66 c1 e0 03          	shl    eax,0x3
    6ced:	67 66 8d 90 cc a3 00 	lea    edx,[eax+0xa3cc]
    6cf4:	00 
    6cf5:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
    6cfa:	67 66 89 02          	mov    DWORD PTR [edx],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1041
	firstUnusedMemoryItem = next;
    6cfe:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
    6d03:	66 a3 64 a2          	mov    ds:0xa264,eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1044

	// blockNum = 10;
	memoryTable[firstUnusedMemoryItem].used = 1;
    6d07:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    6d0c:	66 89 d0             	mov    eax,edx
    6d0f:	66 01 c0             	add    eax,eax
    6d12:	66 01 d0             	add    eax,edx
    6d15:	66 c1 e0 03          	shl    eax,0x3
    6d19:	66 05 d0 a3 00 00    	add    eax,0xa3d0
    6d1f:	67 66 c7 00 01 00 00 	mov    DWORD PTR [eax],0x1
    6d26:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1045
	memoryTable[firstUnusedMemoryItem].beginAddr = 0x87000;
    6d27:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    6d2c:	66 89 d0             	mov    eax,edx
    6d2f:	66 01 c0             	add    eax,eax
    6d32:	66 01 d0             	add    eax,edx
    6d35:	66 c1 e0 03          	shl    eax,0x3
    6d39:	66 05 c0 a3 00 00    	add    eax,0xa3c0
    6d3f:	67 66 c7 00 00 70 08 	mov    DWORD PTR [eax],0x87000
    6d46:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1046
	memoryTable[firstUnusedMemoryItem].endAddr = 0x9ffff;
    6d47:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    6d4c:	66 89 d0             	mov    eax,edx
    6d4f:	66 01 c0             	add    eax,eax
    6d52:	66 01 d0             	add    eax,edx
    6d55:	66 c1 e0 03          	shl    eax,0x3
    6d59:	66 05 c4 a3 00 00    	add    eax,0xa3c4
    6d5f:	67 66 c7 00 ff ff 09 	mov    DWORD PTR [eax],0x9ffff
    6d66:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1047
	memoryTable[firstUnusedMemoryItem].status = unused;
    6d67:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    6d6c:	66 89 d0             	mov    eax,edx
    6d6f:	66 01 c0             	add    eax,eax
    6d72:	66 01 d0             	add    eax,edx
    6d75:	66 c1 e0 03          	shl    eax,0x3
    6d79:	66 05 d4 a3 00 00    	add    eax,0xa3d4
    6d7f:	67 66 c7 00 00 00 00 	mov    DWORD PTR [eax],0x0
    6d86:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1048
	next = nextUnusedItem();
    6d87:	66 e8 ea f5 ff ff    	call   6377 <_nextUnusedItem>
    6d8d:	67 66 89 45 f8       	mov    DWORD PTR [ebp-0x8],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1049
	memoryTable[next].pre = firstUnusedMemoryItem;
    6d92:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    6d97:	67 66 8b 4d f8       	mov    ecx,DWORD PTR [ebp-0x8]
    6d9c:	66 89 c8             	mov    eax,ecx
    6d9f:	66 01 c0             	add    eax,eax
    6da2:	66 01 c8             	add    eax,ecx
    6da5:	66 c1 e0 03          	shl    eax,0x3
    6da9:	66 05 c8 a3 00 00    	add    eax,0xa3c8
    6daf:	67 66 89 10          	mov    DWORD PTR [eax],edx
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1050
	memoryTable[firstUnusedMemoryItem].next = next;
    6db3:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    6db8:	66 89 d0             	mov    eax,edx
    6dbb:	66 01 c0             	add    eax,eax
    6dbe:	66 01 d0             	add    eax,edx
    6dc1:	66 c1 e0 03          	shl    eax,0x3
    6dc5:	67 66 8d 90 cc a3 00 	lea    edx,[eax+0xa3cc]
    6dcc:	00 
    6dcd:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
    6dd2:	67 66 89 02          	mov    DWORD PTR [edx],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1051
	firstUnusedMemoryItem = next;
    6dd6:	67 66 8b 45 f8       	mov    eax,DWORD PTR [ebp-0x8]
    6ddb:	66 a3 64 a2          	mov    ds:0xa264,eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1052
}
    6ddf:	90                   	nop
    6de0:	66 c9                	leave  
    6de2:	66 c3                	ret    

00006de4 <_findItem>:
findItem():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1056


int findItem(int addr)
{
    6de4:	66 55                	push   ebp
    6de6:	66 89 e5             	mov    ebp,esp
    6de9:	66 83 ec 04          	sub    esp,0x4
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1057
	int itemId = 0;
    6ded:	67 66 c7 45 fc 00 00 	mov    DWORD PTR [ebp-0x4],0x0
    6df4:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1058
	for (; itemId < MemLen; itemId = memoryTable[itemId].next)
    6df6:	eb 4b                	jmp    6e43 <_findItem+0x5f>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1060
	{
		if (memoryTable[itemId].beginAddr == addr)
    6df8:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    6dfd:	66 89 d0             	mov    eax,edx
    6e00:	66 01 c0             	add    eax,eax
    6e03:	66 01 d0             	add    eax,edx
    6e06:	66 c1 e0 03          	shl    eax,0x3
    6e0a:	66 05 c0 a3 00 00    	add    eax,0xa3c0
    6e10:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    6e14:	67 66 3b 45 08       	cmp    eax,DWORD PTR [ebp+0x8]
    6e19:	75 07                	jne    6e22 <_findItem+0x3e>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1061
			return itemId;
    6e1b:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
    6e20:	eb 2f                	jmp    6e51 <_findItem+0x6d>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1058
	for (; itemId < MemLen; itemId = memoryTable[itemId].next)
    6e22:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    6e27:	66 89 d0             	mov    eax,edx
    6e2a:	66 01 c0             	add    eax,eax
    6e2d:	66 01 d0             	add    eax,edx
    6e30:	66 c1 e0 03          	shl    eax,0x3
    6e34:	66 05 cc a3 00 00    	add    eax,0xa3cc
    6e3a:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    6e3e:	67 66 89 45 fc       	mov    DWORD PTR [ebp-0x4],eax
    6e43:	67 66 83 7d fc 27    	cmp    DWORD PTR [ebp-0x4],0x27
    6e49:	7e ad                	jle    6df8 <_findItem+0x14>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1063
	}
	return -1;
    6e4b:	66 b8 ff ff ff ff    	mov    eax,0xffffffff
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1064
}
    6e51:	66 c9                	leave  
    6e53:	66 c3                	ret    

00006e55 <_findLaterBlock>:
findLaterBlock():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1067

int findLaterBlock(int addr, int size, int begin)
{
    6e55:	66 55                	push   ebp
    6e57:	66 89 e5             	mov    ebp,esp
    6e5a:	66 83 ec 04          	sub    esp,0x4
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1068
	int itemId = begin;
    6e5e:	67 66 8b 45 10       	mov    eax,DWORD PTR [ebp+0x10]
    6e63:	67 66 89 45 fc       	mov    DWORD PTR [ebp-0x4],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1069
	for (; itemId < MemLen; itemId = memoryTable[itemId].next)
    6e68:	e9 b3 00             	jmp    6f1e <_findLaterBlock+0xc9>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1071
	{
		if (memoryTable[itemId].beginAddr >= addr && memoryTable[itemId].endAddr - memoryTable[itemId].beginAddr + 1 >= size && memoryTable[itemId].status == unused)
    6e6b:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    6e70:	66 89 d0             	mov    eax,edx
    6e73:	66 01 c0             	add    eax,eax
    6e76:	66 01 d0             	add    eax,edx
    6e79:	66 c1 e0 03          	shl    eax,0x3
    6e7d:	66 05 c0 a3 00 00    	add    eax,0xa3c0
    6e83:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    6e87:	67 66 3b 45 08       	cmp    eax,DWORD PTR [ebp+0x8]
    6e8c:	7c 6f                	jl     6efd <_findLaterBlock+0xa8>
    6e8e:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    6e93:	66 89 d0             	mov    eax,edx
    6e96:	66 01 c0             	add    eax,eax
    6e99:	66 01 d0             	add    eax,edx
    6e9c:	66 c1 e0 03          	shl    eax,0x3
    6ea0:	66 05 c4 a3 00 00    	add    eax,0xa3c4
    6ea6:	67 66 8b 08          	mov    ecx,DWORD PTR [eax]
    6eaa:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    6eaf:	66 89 d0             	mov    eax,edx
    6eb2:	66 01 c0             	add    eax,eax
    6eb5:	66 01 d0             	add    eax,edx
    6eb8:	66 c1 e0 03          	shl    eax,0x3
    6ebc:	66 05 c0 a3 00 00    	add    eax,0xa3c0
    6ec2:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    6ec6:	66 29 c1             	sub    ecx,eax
    6ec9:	66 89 c8             	mov    eax,ecx
    6ecc:	66 40                	inc    eax
    6ece:	67 66 3b 45 0c       	cmp    eax,DWORD PTR [ebp+0xc]
    6ed3:	7c 28                	jl     6efd <_findLaterBlock+0xa8>
    6ed5:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    6eda:	66 89 d0             	mov    eax,edx
    6edd:	66 01 c0             	add    eax,eax
    6ee0:	66 01 d0             	add    eax,edx
    6ee3:	66 c1 e0 03          	shl    eax,0x3
    6ee7:	66 05 d4 a3 00 00    	add    eax,0xa3d4
    6eed:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    6ef1:	66 85 c0             	test   eax,eax
    6ef4:	75 07                	jne    6efd <_findLaterBlock+0xa8>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1072
			return itemId;
    6ef6:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
    6efb:	eb 31                	jmp    6f2e <_findLaterBlock+0xd9>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1069
	for (; itemId < MemLen; itemId = memoryTable[itemId].next)
    6efd:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    6f02:	66 89 d0             	mov    eax,edx
    6f05:	66 01 c0             	add    eax,eax
    6f08:	66 01 d0             	add    eax,edx
    6f0b:	66 c1 e0 03          	shl    eax,0x3
    6f0f:	66 05 cc a3 00 00    	add    eax,0xa3cc
    6f15:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    6f19:	67 66 89 45 fc       	mov    DWORD PTR [ebp-0x4],eax
    6f1e:	67 66 83 7d fc 27    	cmp    DWORD PTR [ebp-0x4],0x27
    6f24:	0f 8e 43 ff          	jle    6e6b <_findLaterBlock+0x16>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1074
	}
	return -1;
    6f28:	66 b8 ff ff ff ff    	mov    eax,0xffffffff
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1075
}
    6f2e:	66 c9                	leave  
    6f30:	66 c3                	ret    

00006f32 <_merge>:
merge():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1078

void merge(int item)
{
    6f32:	66 55                	push   ebp
    6f34:	66 89 e5             	mov    ebp,esp
    6f37:	66 83 ec 08          	sub    esp,0x8
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1080
	int first;
	if (memoryTable[item].pre != -1 && memoryTable[memoryTable[item].pre].status == unused) {
    6f3b:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    6f40:	66 89 d0             	mov    eax,edx
    6f43:	66 01 c0             	add    eax,eax
    6f46:	66 01 d0             	add    eax,edx
    6f49:	66 c1 e0 03          	shl    eax,0x3
    6f4d:	66 05 c8 a3 00 00    	add    eax,0xa3c8
    6f53:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    6f57:	66 83 f8 ff          	cmp    eax,0xffffffff
    6f5b:	74 5b                	je     6fb8 <_merge+0x86>
    6f5d:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    6f62:	66 89 d0             	mov    eax,edx
    6f65:	66 01 c0             	add    eax,eax
    6f68:	66 01 d0             	add    eax,edx
    6f6b:	66 c1 e0 03          	shl    eax,0x3
    6f6f:	66 05 c8 a3 00 00    	add    eax,0xa3c8
    6f75:	67 66 8b 10          	mov    edx,DWORD PTR [eax]
    6f79:	66 89 d0             	mov    eax,edx
    6f7c:	66 01 c0             	add    eax,eax
    6f7f:	66 01 d0             	add    eax,edx
    6f82:	66 c1 e0 03          	shl    eax,0x3
    6f86:	66 05 d4 a3 00 00    	add    eax,0xa3d4
    6f8c:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    6f90:	66 85 c0             	test   eax,eax
    6f93:	75 23                	jne    6fb8 <_merge+0x86>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1081
		first = memoryTable[item].pre;
    6f95:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    6f9a:	66 89 d0             	mov    eax,edx
    6f9d:	66 01 c0             	add    eax,eax
    6fa0:	66 01 d0             	add    eax,edx
    6fa3:	66 c1 e0 03          	shl    eax,0x3
    6fa7:	66 05 c8 a3 00 00    	add    eax,0xa3c8
    6fad:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    6fb1:	67 66 89 45 fc       	mov    DWORD PTR [ebp-0x4],eax
    6fb6:	eb 0a                	jmp    6fc2 <_merge+0x90>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1083
	} else {
		first = item;
    6fb8:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    6fbd:	67 66 89 45 fc       	mov    DWORD PTR [ebp-0x4],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1085
	}
	int next = memoryTable[first].next;
    6fc2:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    6fc7:	66 89 d0             	mov    eax,edx
    6fca:	66 01 c0             	add    eax,eax
    6fcd:	66 01 d0             	add    eax,edx
    6fd0:	66 c1 e0 03          	shl    eax,0x3
    6fd4:	66 05 cc a3 00 00    	add    eax,0xa3cc
    6fda:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    6fde:	67 66 89 45 f8       	mov    DWORD PTR [ebp-0x8],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1086
	while (next != -1 && memoryTable[next].status == unused)
    6fe3:	e9 0d 01             	jmp    70f3 <_merge+0x1c1>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1088
	{
		memoryTable[first].endAddr = memoryTable[next].endAddr;
    6fe6:	67 66 8b 55 f8       	mov    edx,DWORD PTR [ebp-0x8]
    6feb:	66 89 d0             	mov    eax,edx
    6fee:	66 01 c0             	add    eax,eax
    6ff1:	66 01 d0             	add    eax,edx
    6ff4:	66 c1 e0 03          	shl    eax,0x3
    6ff8:	66 05 c4 a3 00 00    	add    eax,0xa3c4
    6ffe:	67 66 8b 10          	mov    edx,DWORD PTR [eax]
    7002:	67 66 8b 4d fc       	mov    ecx,DWORD PTR [ebp-0x4]
    7007:	66 89 c8             	mov    eax,ecx
    700a:	66 01 c0             	add    eax,eax
    700d:	66 01 c8             	add    eax,ecx
    7010:	66 c1 e0 03          	shl    eax,0x3
    7014:	66 05 c4 a3 00 00    	add    eax,0xa3c4
    701a:	67 66 89 10          	mov    DWORD PTR [eax],edx
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1089
		memoryTable[first].next = memoryTable[next].next;
    701e:	67 66 8b 55 f8       	mov    edx,DWORD PTR [ebp-0x8]
    7023:	66 89 d0             	mov    eax,edx
    7026:	66 01 c0             	add    eax,eax
    7029:	66 01 d0             	add    eax,edx
    702c:	66 c1 e0 03          	shl    eax,0x3
    7030:	66 05 cc a3 00 00    	add    eax,0xa3cc
    7036:	67 66 8b 10          	mov    edx,DWORD PTR [eax]
    703a:	67 66 8b 4d fc       	mov    ecx,DWORD PTR [ebp-0x4]
    703f:	66 89 c8             	mov    eax,ecx
    7042:	66 01 c0             	add    eax,eax
    7045:	66 01 c8             	add    eax,ecx
    7048:	66 c1 e0 03          	shl    eax,0x3
    704c:	66 05 cc a3 00 00    	add    eax,0xa3cc
    7052:	67 66 89 10          	mov    DWORD PTR [eax],edx
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1090
		if (memoryTable[next].next != -1) {
    7056:	67 66 8b 55 f8       	mov    edx,DWORD PTR [ebp-0x8]
    705b:	66 89 d0             	mov    eax,edx
    705e:	66 01 c0             	add    eax,eax
    7061:	66 01 d0             	add    eax,edx
    7064:	66 c1 e0 03          	shl    eax,0x3
    7068:	66 05 cc a3 00 00    	add    eax,0xa3cc
    706e:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    7072:	66 83 f8 ff          	cmp    eax,0xffffffff
    7076:	74 3a                	je     70b2 <_merge+0x180>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1091
			memoryTable[memoryTable[next].next].pre = first;
    7078:	67 66 8b 55 f8       	mov    edx,DWORD PTR [ebp-0x8]
    707d:	66 89 d0             	mov    eax,edx
    7080:	66 01 c0             	add    eax,eax
    7083:	66 01 d0             	add    eax,edx
    7086:	66 c1 e0 03          	shl    eax,0x3
    708a:	66 05 cc a3 00 00    	add    eax,0xa3cc
    7090:	67 66 8b 10          	mov    edx,DWORD PTR [eax]
    7094:	66 89 d0             	mov    eax,edx
    7097:	66 01 c0             	add    eax,eax
    709a:	66 01 d0             	add    eax,edx
    709d:	66 c1 e0 03          	shl    eax,0x3
    70a1:	67 66 8d 90 c8 a3 00 	lea    edx,[eax+0xa3c8]
    70a8:	00 
    70a9:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
    70ae:	67 66 89 02          	mov    DWORD PTR [edx],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1093
		}
		memoryTable[next].used = 0;
    70b2:	67 66 8b 55 f8       	mov    edx,DWORD PTR [ebp-0x8]
    70b7:	66 89 d0             	mov    eax,edx
    70ba:	66 01 c0             	add    eax,eax
    70bd:	66 01 d0             	add    eax,edx
    70c0:	66 c1 e0 03          	shl    eax,0x3
    70c4:	66 05 d0 a3 00 00    	add    eax,0xa3d0
    70ca:	67 66 c7 00 00 00 00 	mov    DWORD PTR [eax],0x0
    70d1:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1094
		next = memoryTable[first].next;
    70d2:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    70d7:	66 89 d0             	mov    eax,edx
    70da:	66 01 c0             	add    eax,eax
    70dd:	66 01 d0             	add    eax,edx
    70e0:	66 c1 e0 03          	shl    eax,0x3
    70e4:	66 05 cc a3 00 00    	add    eax,0xa3cc
    70ea:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    70ee:	67 66 89 45 f8       	mov    DWORD PTR [ebp-0x8],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1086
	while (next != -1 && memoryTable[next].status == unused)
    70f3:	67 66 83 7d f8 ff    	cmp    DWORD PTR [ebp-0x8],0xffffffff
    70f9:	74 23                	je     711e <_merge+0x1ec>
    70fb:	67 66 8b 55 f8       	mov    edx,DWORD PTR [ebp-0x8]
    7100:	66 89 d0             	mov    eax,edx
    7103:	66 01 c0             	add    eax,eax
    7106:	66 01 d0             	add    eax,edx
    7109:	66 c1 e0 03          	shl    eax,0x3
    710d:	66 05 d4 a3 00 00    	add    eax,0xa3d4
    7113:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    7117:	66 85 c0             	test   eax,eax
    711a:	0f 84 c8 fe          	je     6fe6 <_merge+0xb4>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1097
	}

}
    711e:	90                   	nop
    711f:	66 c9                	leave  
    7121:	66 c3                	ret    

00007123 <_release>:
release():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1100

void release(int begin, int end)
{
    7123:	66 55                	push   ebp
    7125:	66 89 e5             	mov    ebp,esp
    7128:	66 83 ec 08          	sub    esp,0x8
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1101
	int item = findItem(begin);
    712c:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    7131:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    7136:	66 e8 a8 fc ff ff    	call   6de4 <_findItem>
    713c:	67 66 89 45 fc       	mov    DWORD PTR [ebp-0x4],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1102
	memoryTable[item].status = unused;
    7141:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    7146:	66 89 d0             	mov    eax,edx
    7149:	66 01 c0             	add    eax,eax
    714c:	66 01 d0             	add    eax,edx
    714f:	66 c1 e0 03          	shl    eax,0x3
    7153:	66 05 d4 a3 00 00    	add    eax,0xa3d4
    7159:	67 66 c7 00 00 00 00 	mov    DWORD PTR [eax],0x0
    7160:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1103
	merge(item);
    7161:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
    7166:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    716b:	66 e8 c1 fd ff ff    	call   6f32 <_merge>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1104
}
    7171:	90                   	nop
    7172:	66 c9                	leave  
    7174:	66 c3                	ret    

00007176 <_findEnoughBlock>:
findEnoughBlock():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1107

int findEnoughBlock(int size)
{
    7176:	66 55                	push   ebp
    7178:	66 89 e5             	mov    ebp,esp
    717b:	66 83 ec 04          	sub    esp,0x4
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1108
	int itemId = 0;
    717f:	67 66 c7 45 fc 00 00 	mov    DWORD PTR [ebp-0x4],0x0
    7186:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1110
	// 不考虑退化情况
	while (memoryTable[itemId].status == used || memoryTable[itemId].endAddr - memoryTable[itemId].beginAddr + 1 < size)
    7188:	eb 21                	jmp    71ab <_findEnoughBlock+0x35>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1112
	{
		itemId = memoryTable[itemId].next;
    718a:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    718f:	66 89 d0             	mov    eax,edx
    7192:	66 01 c0             	add    eax,eax
    7195:	66 01 d0             	add    eax,edx
    7198:	66 c1 e0 03          	shl    eax,0x3
    719c:	66 05 cc a3 00 00    	add    eax,0xa3cc
    71a2:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    71a6:	67 66 89 45 fc       	mov    DWORD PTR [ebp-0x4],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1110
	while (memoryTable[itemId].status == used || memoryTable[itemId].endAddr - memoryTable[itemId].beginAddr + 1 < size)
    71ab:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    71b0:	66 89 d0             	mov    eax,edx
    71b3:	66 01 c0             	add    eax,eax
    71b6:	66 01 d0             	add    eax,edx
    71b9:	66 c1 e0 03          	shl    eax,0x3
    71bd:	66 05 d4 a3 00 00    	add    eax,0xa3d4
    71c3:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    71c7:	66 83 f8 01          	cmp    eax,0x1
    71cb:	74 bd                	je     718a <_findEnoughBlock+0x14>
    71cd:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    71d2:	66 89 d0             	mov    eax,edx
    71d5:	66 01 c0             	add    eax,eax
    71d8:	66 01 d0             	add    eax,edx
    71db:	66 c1 e0 03          	shl    eax,0x3
    71df:	66 05 c4 a3 00 00    	add    eax,0xa3c4
    71e5:	67 66 8b 08          	mov    ecx,DWORD PTR [eax]
    71e9:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    71ee:	66 89 d0             	mov    eax,edx
    71f1:	66 01 c0             	add    eax,eax
    71f4:	66 01 d0             	add    eax,edx
    71f7:	66 c1 e0 03          	shl    eax,0x3
    71fb:	66 05 c0 a3 00 00    	add    eax,0xa3c0
    7201:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    7205:	66 29 c1             	sub    ecx,eax
    7208:	66 89 c8             	mov    eax,ecx
    720b:	66 40                	inc    eax
    720d:	67 66 3b 45 08       	cmp    eax,DWORD PTR [ebp+0x8]
    7212:	0f 8c 74 ff          	jl     718a <_findEnoughBlock+0x14>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1114
	}
	return itemId;
    7216:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1115
}
    721b:	66 c9                	leave  
    721d:	66 c3                	ret    

0000721f <_require>:
require():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1119


int require(int size, int curId)
{
    721f:	66 55                	push   ebp
    7221:	66 89 e5             	mov    ebp,esp
    7224:	66 83 ec 04          	sub    esp,0x4
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1120
	memoryTable[firstUnusedMemoryItem].beginAddr = memoryTable[curId].beginAddr;
    7228:	66 8b 0e 64 a2       	mov    ecx,DWORD PTR ds:0xa264
    722d:	67 66 8b 55 0c       	mov    edx,DWORD PTR [ebp+0xc]
    7232:	66 89 d0             	mov    eax,edx
    7235:	66 01 c0             	add    eax,eax
    7238:	66 01 d0             	add    eax,edx
    723b:	66 c1 e0 03          	shl    eax,0x3
    723f:	66 05 c0 a3 00 00    	add    eax,0xa3c0
    7245:	67 66 8b 10          	mov    edx,DWORD PTR [eax]
    7249:	66 89 c8             	mov    eax,ecx
    724c:	66 01 c0             	add    eax,eax
    724f:	66 01 c8             	add    eax,ecx
    7252:	66 c1 e0 03          	shl    eax,0x3
    7256:	66 05 c0 a3 00 00    	add    eax,0xa3c0
    725c:	67 66 89 10          	mov    DWORD PTR [eax],edx
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1121
	memoryTable[firstUnusedMemoryItem].endAddr = memoryTable[firstUnusedMemoryItem].beginAddr + size - 1;
    7260:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    7265:	66 8b 0e 64 a2       	mov    ecx,DWORD PTR ds:0xa264
    726a:	66 89 c8             	mov    eax,ecx
    726d:	66 01 c0             	add    eax,eax
    7270:	66 01 c8             	add    eax,ecx
    7273:	66 c1 e0 03          	shl    eax,0x3
    7277:	66 05 c0 a3 00 00    	add    eax,0xa3c0
    727d:	67 66 8b 08          	mov    ecx,DWORD PTR [eax]
    7281:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    7286:	66 01 c8             	add    eax,ecx
    7289:	67 66 8d 48 ff       	lea    ecx,[eax-0x1]
    728e:	66 89 d0             	mov    eax,edx
    7291:	66 01 c0             	add    eax,eax
    7294:	66 01 d0             	add    eax,edx
    7297:	66 c1 e0 03          	shl    eax,0x3
    729b:	66 05 c4 a3 00 00    	add    eax,0xa3c4
    72a1:	67 66 89 08          	mov    DWORD PTR [eax],ecx
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1122
	memoryTable[firstUnusedMemoryItem].used = 1;
    72a5:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    72aa:	66 89 d0             	mov    eax,edx
    72ad:	66 01 c0             	add    eax,eax
    72b0:	66 01 d0             	add    eax,edx
    72b3:	66 c1 e0 03          	shl    eax,0x3
    72b7:	66 05 d0 a3 00 00    	add    eax,0xa3d0
    72bd:	67 66 c7 00 01 00 00 	mov    DWORD PTR [eax],0x1
    72c4:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1123
	memoryTable[firstUnusedMemoryItem].status = used;
    72c5:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    72ca:	66 89 d0             	mov    eax,edx
    72cd:	66 01 c0             	add    eax,eax
    72d0:	66 01 d0             	add    eax,edx
    72d3:	66 c1 e0 03          	shl    eax,0x3
    72d7:	66 05 d4 a3 00 00    	add    eax,0xa3d4
    72dd:	67 66 c7 00 01 00 00 	mov    DWORD PTR [eax],0x1
    72e4:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1124
	memoryTable[firstUnusedMemoryItem].pre = memoryTable[curId].pre;
    72e5:	66 8b 0e 64 a2       	mov    ecx,DWORD PTR ds:0xa264
    72ea:	67 66 8b 55 0c       	mov    edx,DWORD PTR [ebp+0xc]
    72ef:	66 89 d0             	mov    eax,edx
    72f2:	66 01 c0             	add    eax,eax
    72f5:	66 01 d0             	add    eax,edx
    72f8:	66 c1 e0 03          	shl    eax,0x3
    72fc:	66 05 c8 a3 00 00    	add    eax,0xa3c8
    7302:	67 66 8b 10          	mov    edx,DWORD PTR [eax]
    7306:	66 89 c8             	mov    eax,ecx
    7309:	66 01 c0             	add    eax,eax
    730c:	66 01 c8             	add    eax,ecx
    730f:	66 c1 e0 03          	shl    eax,0x3
    7313:	66 05 c8 a3 00 00    	add    eax,0xa3c8
    7319:	67 66 89 10          	mov    DWORD PTR [eax],edx
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1125
	memoryTable[firstUnusedMemoryItem].next = curId;
    731d:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    7322:	66 89 d0             	mov    eax,edx
    7325:	66 01 c0             	add    eax,eax
    7328:	66 01 d0             	add    eax,edx
    732b:	66 c1 e0 03          	shl    eax,0x3
    732f:	67 66 8d 90 cc a3 00 	lea    edx,[eax+0xa3cc]
    7336:	00 
    7337:	67 66 8b 45 0c       	mov    eax,DWORD PTR [ebp+0xc]
    733c:	67 66 89 02          	mov    DWORD PTR [edx],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1126
	memoryTable[memoryTable[curId].pre].next = firstUnusedMemoryItem;
    7340:	67 66 8b 55 0c       	mov    edx,DWORD PTR [ebp+0xc]
    7345:	66 89 d0             	mov    eax,edx
    7348:	66 01 c0             	add    eax,eax
    734b:	66 01 d0             	add    eax,edx
    734e:	66 c1 e0 03          	shl    eax,0x3
    7352:	66 05 c8 a3 00 00    	add    eax,0xa3c8
    7358:	67 66 8b 08          	mov    ecx,DWORD PTR [eax]
    735c:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    7361:	66 89 c8             	mov    eax,ecx
    7364:	66 01 c0             	add    eax,eax
    7367:	66 01 c8             	add    eax,ecx
    736a:	66 c1 e0 03          	shl    eax,0x3
    736e:	66 05 cc a3 00 00    	add    eax,0xa3cc
    7374:	67 66 89 10          	mov    DWORD PTR [eax],edx
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1127
	memoryTable[curId].pre = firstUnusedMemoryItem;
    7378:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    737d:	67 66 8b 4d 0c       	mov    ecx,DWORD PTR [ebp+0xc]
    7382:	66 89 c8             	mov    eax,ecx
    7385:	66 01 c0             	add    eax,eax
    7388:	66 01 c8             	add    eax,ecx
    738b:	66 c1 e0 03          	shl    eax,0x3
    738f:	66 05 c8 a3 00 00    	add    eax,0xa3c8
    7395:	67 66 89 10          	mov    DWORD PTR [eax],edx
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1128
	memoryTable[curId].beginAddr = memoryTable[firstUnusedMemoryItem].endAddr + 1;
    7399:	66 8b 16 64 a2       	mov    edx,DWORD PTR ds:0xa264
    739e:	66 89 d0             	mov    eax,edx
    73a1:	66 01 c0             	add    eax,eax
    73a4:	66 01 d0             	add    eax,edx
    73a7:	66 c1 e0 03          	shl    eax,0x3
    73ab:	66 05 c4 a3 00 00    	add    eax,0xa3c4
    73b1:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    73b5:	67 66 8d 48 01       	lea    ecx,[eax+0x1]
    73ba:	67 66 8b 55 0c       	mov    edx,DWORD PTR [ebp+0xc]
    73bf:	66 89 d0             	mov    eax,edx
    73c2:	66 01 c0             	add    eax,eax
    73c5:	66 01 d0             	add    eax,edx
    73c8:	66 c1 e0 03          	shl    eax,0x3
    73cc:	66 05 c0 a3 00 00    	add    eax,0xa3c0
    73d2:	67 66 89 08          	mov    DWORD PTR [eax],ecx
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1129
	if (memoryTable[curId].beginAddr >= memoryTable[curId].endAddr)
    73d6:	67 66 8b 55 0c       	mov    edx,DWORD PTR [ebp+0xc]
    73db:	66 89 d0             	mov    eax,edx
    73de:	66 01 c0             	add    eax,eax
    73e1:	66 01 d0             	add    eax,edx
    73e4:	66 c1 e0 03          	shl    eax,0x3
    73e8:	66 05 c0 a3 00 00    	add    eax,0xa3c0
    73ee:	67 66 8b 08          	mov    ecx,DWORD PTR [eax]
    73f2:	67 66 8b 55 0c       	mov    edx,DWORD PTR [ebp+0xc]
    73f7:	66 89 d0             	mov    eax,edx
    73fa:	66 01 c0             	add    eax,eax
    73fd:	66 01 d0             	add    eax,edx
    7400:	66 c1 e0 03          	shl    eax,0x3
    7404:	66 05 c4 a3 00 00    	add    eax,0xa3c4
    740a:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    740e:	66 39 c1             	cmp    ecx,eax
    7411:	7c 58                	jl     746b <_require+0x24c>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1131
	{
		memoryTable[firstUnusedMemoryItem].next = memoryTable[curId].next;
    7413:	66 8b 0e 64 a2       	mov    ecx,DWORD PTR ds:0xa264
    7418:	67 66 8b 55 0c       	mov    edx,DWORD PTR [ebp+0xc]
    741d:	66 89 d0             	mov    eax,edx
    7420:	66 01 c0             	add    eax,eax
    7423:	66 01 d0             	add    eax,edx
    7426:	66 c1 e0 03          	shl    eax,0x3
    742a:	66 05 cc a3 00 00    	add    eax,0xa3cc
    7430:	67 66 8b 10          	mov    edx,DWORD PTR [eax]
    7434:	66 89 c8             	mov    eax,ecx
    7437:	66 01 c0             	add    eax,eax
    743a:	66 01 c8             	add    eax,ecx
    743d:	66 c1 e0 03          	shl    eax,0x3
    7441:	66 05 cc a3 00 00    	add    eax,0xa3cc
    7447:	67 66 89 10          	mov    DWORD PTR [eax],edx
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1132
		memoryTable[curId].used = 0;
    744b:	67 66 8b 55 0c       	mov    edx,DWORD PTR [ebp+0xc]
    7450:	66 89 d0             	mov    eax,edx
    7453:	66 01 c0             	add    eax,eax
    7456:	66 01 d0             	add    eax,edx
    7459:	66 c1 e0 03          	shl    eax,0x3
    745d:	66 05 d0 a3 00 00    	add    eax,0xa3d0
    7463:	67 66 c7 00 00 00 00 	mov    DWORD PTR [eax],0x0
    746a:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1134
	}
	int ret = firstUnusedMemoryItem;
    746b:	66 a1 64 a2          	mov    eax,ds:0xa264
    746f:	67 66 89 45 fc       	mov    DWORD PTR [ebp-0x4],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1135
	firstUnusedMemoryItem = nextUnusedItem();
    7474:	66 e8 fd ee ff ff    	call   6377 <_nextUnusedItem>
    747a:	66 a3 64 a2          	mov    ds:0xa264,eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1136
	return ret;
    747e:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1137
}
    7483:	66 c9                	leave  
    7485:	66 c3                	ret    

00007487 <_loadFile>:
loadFile():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1140

void loadFile(int lma, int size, int vma, int seg)
{
    7487:	66 55                	push   ebp
    7489:	66 89 e5             	mov    ebp,esp
    748c:	66 53                	push   ebx
    748e:	66 83 ec 18          	sub    esp,0x18
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1141
	int tmpSize = size;
    7492:	67 66 8b 45 0c       	mov    eax,DWORD PTR [ebp+0xc]
    7497:	67 66 89 45 f8       	mov    DWORD PTR [ebp-0x8],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1142
	int loadtimes = 0;
    749c:	67 66 c7 45 f4 00 00 	mov    DWORD PTR [ebp-0xc],0x0
    74a3:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1144
	do {
		loadReal(lma + loadtimes * 18 * 512, min(tmpSize, 18 * 512), vma + loadtimes * 18 * 512, seg);
    74a5:	67 66 8b 55 f4       	mov    edx,DWORD PTR [ebp-0xc]
    74aa:	66 89 d0             	mov    eax,edx
    74ad:	66 c1 e0 03          	shl    eax,0x3
    74b1:	66 01 d0             	add    eax,edx
    74b4:	66 c1 e0 0a          	shl    eax,0xa
    74b8:	66 89 c2             	mov    edx,eax
    74bb:	67 66 8b 45 10       	mov    eax,DWORD PTR [ebp+0x10]
    74c0:	67 66 8d 1c 02       	lea    ebx,[edx+eax*1]
    74c5:	67 66 8b 55 f8       	mov    edx,DWORD PTR [ebp-0x8]
    74ca:	66 81 fa 00 24 00 00 	cmp    edx,0x2400
    74d1:	7e 06                	jle    74d9 <_loadFile+0x52>
    74d3:	66 ba 00 24 00 00    	mov    edx,0x2400
    74d9:	67 66 8b 4d f4       	mov    ecx,DWORD PTR [ebp-0xc]
    74de:	66 89 c8             	mov    eax,ecx
    74e1:	66 c1 e0 03          	shl    eax,0x3
    74e5:	66 01 c8             	add    eax,ecx
    74e8:	66 c1 e0 0a          	shl    eax,0xa
    74ec:	66 89 c1             	mov    ecx,eax
    74ef:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    74f4:	66 01 c1             	add    ecx,eax
    74f7:	67 66 8b 45 14       	mov    eax,DWORD PTR [ebp+0x14]
    74fc:	67 66 89 44 24 0c    	mov    DWORD PTR [esp+0xc],eax
    7502:	67 66 89 5c 24 08    	mov    DWORD PTR [esp+0x8],ebx
    7508:	67 66 89 54 24 04    	mov    DWORD PTR [esp+0x4],edx
    750e:	67 66 89 0c 24       	mov    DWORD PTR [esp],ecx
    7513:	66 e8 28 a5 ff ff    	call   1a41 <_loadReal>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1145
		loadtimes += 1;
    7519:	67 66 ff 45 f4       	inc    DWORD PTR [ebp-0xc]
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1146
		tmpSize -= 18 * 512;
    751e:	67 66 81 6d f8 00 24 	sub    DWORD PTR [ebp-0x8],0x2400
    7525:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1147
	} while (tmpSize >= 18 * 512);
    7527:	67 66 81 7d f8 ff 23 	cmp    DWORD PTR [ebp-0x8],0x23ff
    752e:	00 00 
    7530:	0f 8f 71 ff          	jg     74a5 <_loadFile+0x1e>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1148
}
    7534:	90                   	nop
    7535:	66 83 c4 18          	add    esp,0x18
    7539:	66 5b                	pop    ebx
    753b:	66 5d                	pop    ebp
    753d:	66 c3                	ret    

0000753f <_initSemaphore>:
initSemaphore():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1154

/////////// memory ends /////////////

////////// semaphore ////////////////
void initSemaphore()
{
    753f:	66 55                	push   ebp
    7541:	66 89 e5             	mov    ebp,esp
    7544:	66 83 ec 08          	sub    esp,0x8
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1155
	for (int i = 0; i < SemaNum; ++i)
    7548:	67 66 c7 45 fc 00 00 	mov    DWORD PTR [ebp-0x4],0x0
    754f:	00 00 
    7551:	eb 66                	jmp    75b9 <_initSemaphore+0x7a>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1157
	{
		semaphoreArray[i].used = fal;
    7553:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    7558:	66 89 d0             	mov    eax,edx
    755b:	66 c1 e0 02          	shl    eax,0x2
    755f:	66 01 d0             	add    eax,edx
    7562:	67 66 8d 14 85 00 00 	lea    edx,[eax*4+0x0]
    7569:	00 00 
    756b:	66 01 d0             	add    eax,edx
    756e:	66 c1 e0 02          	shl    eax,0x2
    7572:	66 05 e4 a8 00 00    	add    eax,0xa8e4
    7578:	67 66 c7 00 00 00 00 	mov    DWORD PTR [eax],0x0
    757f:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1158
		init(&semaphoreArray[i].semaQue);
    7580:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    7585:	66 89 d0             	mov    eax,edx
    7588:	66 c1 e0 02          	shl    eax,0x2
    758c:	66 01 d0             	add    eax,edx
    758f:	67 66 8d 14 85 00 00 	lea    edx,[eax*4+0x0]
    7596:	00 00 
    7598:	66 01 d0             	add    eax,edx
    759b:	66 c1 e0 02          	shl    eax,0x2
    759f:	66 05 e0 a8 00 00    	add    eax,0xa8e0
    75a5:	66 83 c0 08          	add    eax,0x8
    75a9:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    75ae:	66 e8 b1 03 00 00    	call   7965 <_init>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1155
	for (int i = 0; i < SemaNum; ++i)
    75b4:	67 66 ff 45 fc       	inc    DWORD PTR [ebp-0x4]
    75b9:	67 66 83 7d fc 3b    	cmp    DWORD PTR [ebp-0x4],0x3b
    75bf:	7e 92                	jle    7553 <_initSemaphore+0x14>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1160
	}
}
    75c1:	90                   	nop
    75c2:	66 c9                	leave  
    75c4:	66 c3                	ret    

000075c6 <_do_getsem>:
do_getsem():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1163

int do_getsem(int resourceSize)
{
    75c6:	66 55                	push   ebp
    75c8:	66 89 e5             	mov    ebp,esp
    75cb:	66 83 ec 04          	sub    esp,0x4
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1164
	__asm__("cli\n");
    75cf:	fa                   	cli    
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1165
	int i = 0;
    75d0:	67 66 c7 45 fc 00 00 	mov    DWORD PTR [ebp-0x4],0x0
    75d7:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1166
	while (semaphoreArray[i].used == tru) { ++i; }
    75d9:	eb 05                	jmp    75e0 <_do_getsem+0x1a>
    75db:	67 66 ff 45 fc       	inc    DWORD PTR [ebp-0x4]
    75e0:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    75e5:	66 89 d0             	mov    eax,edx
    75e8:	66 c1 e0 02          	shl    eax,0x2
    75ec:	66 01 d0             	add    eax,edx
    75ef:	67 66 8d 14 85 00 00 	lea    edx,[eax*4+0x0]
    75f6:	00 00 
    75f8:	66 01 d0             	add    eax,edx
    75fb:	66 c1 e0 02          	shl    eax,0x2
    75ff:	66 05 e4 a8 00 00    	add    eax,0xa8e4
    7605:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    7609:	66 83 f8 01          	cmp    eax,0x1
    760d:	74 cc                	je     75db <_do_getsem+0x15>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1167
	if (i >= SemaNum)
    760f:	67 66 83 7d fc 3b    	cmp    DWORD PTR [ebp-0x4],0x3b
    7615:	7e 08                	jle    761f <_do_getsem+0x59>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1168
		return -1;
    7617:	66 b8 ff ff ff ff    	mov    eax,0xffffffff
    761d:	eb 62                	jmp    7681 <_do_getsem+0xbb>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1169
	semaphoreArray[i].used = tru;
    761f:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    7624:	66 89 d0             	mov    eax,edx
    7627:	66 c1 e0 02          	shl    eax,0x2
    762b:	66 01 d0             	add    eax,edx
    762e:	67 66 8d 14 85 00 00 	lea    edx,[eax*4+0x0]
    7635:	00 00 
    7637:	66 01 d0             	add    eax,edx
    763a:	66 c1 e0 02          	shl    eax,0x2
    763e:	66 05 e4 a8 00 00    	add    eax,0xa8e4
    7644:	67 66 c7 00 01 00 00 	mov    DWORD PTR [eax],0x1
    764b:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1170
	semaphoreArray[i].resources = resourceSize;
    764c:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    7651:	66 89 d0             	mov    eax,edx
    7654:	66 c1 e0 02          	shl    eax,0x2
    7658:	66 01 d0             	add    eax,edx
    765b:	67 66 8d 14 85 00 00 	lea    edx,[eax*4+0x0]
    7662:	00 00 
    7664:	66 01 d0             	add    eax,edx
    7667:	66 c1 e0 02          	shl    eax,0x2
    766b:	67 66 8d 90 e0 a8 00 	lea    edx,[eax+0xa8e0]
    7672:	00 
    7673:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    7678:	67 66 89 02          	mov    DWORD PTR [edx],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1171
	return i;
    767c:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1173
	__asm__("sti\n");
}
    7681:	66 c9                	leave  
    7683:	66 c3                	ret    

00007685 <_do_freesem>:
do_freesem():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1176

void do_freesem(int sem_id)
{
    7685:	66 55                	push   ebp
    7687:	66 89 e5             	mov    ebp,esp
    768a:	66 83 ec 04          	sub    esp,0x4
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1177
	__asm__("cli\n");
    768e:	fa                   	cli    
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1178
	semaphoreArray[sem_id].used = fal;
    768f:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    7694:	66 89 d0             	mov    eax,edx
    7697:	66 c1 e0 02          	shl    eax,0x2
    769b:	66 01 d0             	add    eax,edx
    769e:	67 66 8d 14 85 00 00 	lea    edx,[eax*4+0x0]
    76a5:	00 00 
    76a7:	66 01 d0             	add    eax,edx
    76aa:	66 c1 e0 02          	shl    eax,0x2
    76ae:	66 05 e4 a8 00 00    	add    eax,0xa8e4
    76b4:	67 66 c7 00 00 00 00 	mov    DWORD PTR [eax],0x0
    76bb:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1179
	clearQue(&semaphoreArray[sem_id].semaQue);
    76bc:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    76c1:	66 89 d0             	mov    eax,edx
    76c4:	66 c1 e0 02          	shl    eax,0x2
    76c8:	66 01 d0             	add    eax,edx
    76cb:	67 66 8d 14 85 00 00 	lea    edx,[eax*4+0x0]
    76d2:	00 00 
    76d4:	66 01 d0             	add    eax,edx
    76d7:	66 c1 e0 02          	shl    eax,0x2
    76db:	66 05 e0 a8 00 00    	add    eax,0xa8e0
    76e1:	66 83 c0 08          	add    eax,0x8
    76e5:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    76ea:	66 e8 88 03 00 00    	call   7a78 <_clearQue>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1180
	__asm__("sti\n");
    76f0:	fb                   	sti    
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1181
}
    76f1:	90                   	nop
    76f2:	66 c9                	leave  
    76f4:	66 c3                	ret    

000076f6 <_do_p>:
do_p():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1184

void do_p(int sem_id)
{
    76f6:	66 55                	push   ebp
    76f8:	66 89 e5             	mov    ebp,esp
    76fb:	66 83 ec 08          	sub    esp,0x8
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1185
	__asm__("cli\n");
    76ff:	fa                   	cli    
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1186
	semaphoreArray[sem_id].resources -= 1;
    7700:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    7705:	66 89 d0             	mov    eax,edx
    7708:	66 c1 e0 02          	shl    eax,0x2
    770c:	66 01 d0             	add    eax,edx
    770f:	67 66 8d 14 85 00 00 	lea    edx,[eax*4+0x0]
    7716:	00 00 
    7718:	66 01 d0             	add    eax,edx
    771b:	66 c1 e0 02          	shl    eax,0x2
    771f:	66 05 e0 a8 00 00    	add    eax,0xa8e0
    7725:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    7729:	67 66 8d 48 ff       	lea    ecx,[eax-0x1]
    772e:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    7733:	66 89 d0             	mov    eax,edx
    7736:	66 c1 e0 02          	shl    eax,0x2
    773a:	66 01 d0             	add    eax,edx
    773d:	67 66 8d 14 85 00 00 	lea    edx,[eax*4+0x0]
    7744:	00 00 
    7746:	66 01 d0             	add    eax,edx
    7749:	66 c1 e0 02          	shl    eax,0x2
    774d:	66 05 e0 a8 00 00    	add    eax,0xa8e0
    7753:	67 66 89 08          	mov    DWORD PTR [eax],ecx
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1187
	if (semaphoreArray[sem_id].resources < 0)
    7757:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    775c:	66 89 d0             	mov    eax,edx
    775f:	66 c1 e0 02          	shl    eax,0x2
    7763:	66 01 d0             	add    eax,edx
    7766:	67 66 8d 14 85 00 00 	lea    edx,[eax*4+0x0]
    776d:	00 00 
    776f:	66 01 d0             	add    eax,edx
    7772:	66 c1 e0 02          	shl    eax,0x2
    7776:	66 05 e0 a8 00 00    	add    eax,0xa8e0
    777c:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    7780:	66 85 c0             	test   eax,eax
    7783:	0f 89 8c 00          	jns    7813 <_do_p+0x11d>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1189
	{
		delEle(&ReadyQue, curProcessId);
    7787:	66 a1 70 e9          	mov    eax,ds:0xe970
    778b:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    7791:	67 66 c7 04 24 80 e9 	mov    DWORD PTR [esp],0xe980
    7798:	00 00 
    779a:	66 e8 22 03 00 00    	call   7ac2 <_delEle>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1190
		processTable[curProcessId].status = blocked;
    77a0:	66 8b 16 70 e9       	mov    edx,DWORD PTR ds:0xe970
    77a5:	66 89 d0             	mov    eax,edx
    77a8:	66 c1 e0 03          	shl    eax,0x3
    77ac:	66 01 d0             	add    eax,edx
    77af:	66 01 c0             	add    eax,eax
    77b2:	66 01 d0             	add    eax,edx
    77b5:	66 c1 e0 02          	shl    eax,0x2
    77b9:	66 01 d0             	add    eax,edx
    77bc:	66 c1 e0 02          	shl    eax,0x2
    77c0:	66 05 90 d2 00 00    	add    eax,0xd290
    77c6:	67 66 c7 00 03 00 00 	mov    DWORD PTR [eax],0x3
    77cd:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1191
		enqueue(&semaphoreArray[sem_id].semaQue, curProcessId);
    77ce:	66 8b 16 70 e9       	mov    edx,DWORD PTR ds:0xe970
    77d3:	67 66 8b 4d 08       	mov    ecx,DWORD PTR [ebp+0x8]
    77d8:	66 89 c8             	mov    eax,ecx
    77db:	66 c1 e0 02          	shl    eax,0x2
    77df:	66 01 c8             	add    eax,ecx
    77e2:	67 66 8d 0c 85 00 00 	lea    ecx,[eax*4+0x0]
    77e9:	00 00 
    77eb:	66 01 c8             	add    eax,ecx
    77ee:	66 c1 e0 02          	shl    eax,0x2
    77f2:	66 05 e0 a8 00 00    	add    eax,0xa8e0
    77f8:	66 83 c0 08          	add    eax,0x8
    77fc:	67 66 89 54 24 04    	mov    DWORD PTR [esp+0x4],edx
    7802:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    7807:	66 e8 8b 01 00 00    	call   7998 <_enqueue>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1192
		processSwitch();
    780d:	66 e8 1a e9 ff ff    	call   612d <_processSwitch>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1194
	}
	__asm__("sti\n");
    7813:	fb                   	sti    
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1195
}
    7814:	90                   	nop
    7815:	66 c9                	leave  
    7817:	66 c3                	ret    

00007819 <_do_v>:
do_v():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1199


void do_v(int sem_id)
{
    7819:	66 55                	push   ebp
    781b:	66 89 e5             	mov    ebp,esp
    781e:	66 83 ec 08          	sub    esp,0x8
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1200
	__asm__("cli\n");
    7822:	fa                   	cli    
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1201
	++semaphoreArray[sem_id].resources;
    7823:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    7828:	66 89 d0             	mov    eax,edx
    782b:	66 c1 e0 02          	shl    eax,0x2
    782f:	66 01 d0             	add    eax,edx
    7832:	67 66 8d 14 85 00 00 	lea    edx,[eax*4+0x0]
    7839:	00 00 
    783b:	66 01 d0             	add    eax,edx
    783e:	66 c1 e0 02          	shl    eax,0x2
    7842:	66 05 e0 a8 00 00    	add    eax,0xa8e0
    7848:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    784c:	67 66 8d 48 01       	lea    ecx,[eax+0x1]
    7851:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    7856:	66 89 d0             	mov    eax,edx
    7859:	66 c1 e0 02          	shl    eax,0x2
    785d:	66 01 d0             	add    eax,edx
    7860:	67 66 8d 14 85 00 00 	lea    edx,[eax*4+0x0]
    7867:	00 00 
    7869:	66 01 d0             	add    eax,edx
    786c:	66 c1 e0 02          	shl    eax,0x2
    7870:	66 05 e0 a8 00 00    	add    eax,0xa8e0
    7876:	67 66 89 08          	mov    DWORD PTR [eax],ecx
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1202
	if (semaphoreArray[sem_id].resources <= 0)
    787a:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    787f:	66 89 d0             	mov    eax,edx
    7882:	66 c1 e0 02          	shl    eax,0x2
    7886:	66 01 d0             	add    eax,edx
    7889:	67 66 8d 14 85 00 00 	lea    edx,[eax*4+0x0]
    7890:	00 00 
    7892:	66 01 d0             	add    eax,edx
    7895:	66 c1 e0 02          	shl    eax,0x2
    7899:	66 05 e0 a8 00 00    	add    eax,0xa8e0
    789f:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    78a3:	66 85 c0             	test   eax,eax
    78a6:	0f 8f 85 00          	jg     792f <_do_v+0x116>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1204
	{
		dequeue(&semaphoreArray[sem_id].semaQue, &tmpID);
    78aa:	67 66 8b 55 08       	mov    edx,DWORD PTR [ebp+0x8]
    78af:	66 89 d0             	mov    eax,edx
    78b2:	66 c1 e0 02          	shl    eax,0x2
    78b6:	66 01 d0             	add    eax,edx
    78b9:	67 66 8d 14 85 00 00 	lea    edx,[eax*4+0x0]
    78c0:	00 00 
    78c2:	66 01 d0             	add    eax,edx
    78c5:	66 c1 e0 02          	shl    eax,0x2
    78c9:	66 05 e0 a8 00 00    	add    eax,0xa8e0
    78cf:	66 83 c0 08          	add    eax,0x8
    78d3:	67 66 c7 44 24 04 ec 	mov    DWORD PTR [esp+0x4],0xe9ec
    78da:	e9 00 00 
    78dd:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    78e2:	66 e8 1d 01 00 00    	call   7a05 <_dequeue>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1205
		processTable[tmpID].status = ready;
    78e8:	66 8b 16 ec e9       	mov    edx,DWORD PTR ds:0xe9ec
    78ed:	66 89 d0             	mov    eax,edx
    78f0:	66 c1 e0 03          	shl    eax,0x3
    78f4:	66 01 d0             	add    eax,edx
    78f7:	66 01 c0             	add    eax,eax
    78fa:	66 01 d0             	add    eax,edx
    78fd:	66 c1 e0 02          	shl    eax,0x2
    7901:	66 01 d0             	add    eax,edx
    7904:	66 c1 e0 02          	shl    eax,0x2
    7908:	66 05 90 d2 00 00    	add    eax,0xd290
    790e:	67 66 c7 00 01 00 00 	mov    DWORD PTR [eax],0x1
    7915:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1206
		enqueue(&ReadyQue, tmpID);
    7916:	66 a1 ec e9          	mov    eax,ds:0xe9ec
    791a:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    7920:	67 66 c7 04 24 80 e9 	mov    DWORD PTR [esp],0xe980
    7927:	00 00 
    7929:	66 e8 69 00 00 00    	call   7998 <_enqueue>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1208
	}
	__asm__("sti\n");
    792f:	fb                   	sti    
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1209
}
    7930:	90                   	nop
    7931:	66 c9                	leave  
    7933:	66 c3                	ret    

00007935 <_empty>:
empty():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1215
/////////////////////////////////////


////////////// utils /////////////////
int empty(struct Queue * que)
{
    7935:	66 55                	push   ebp
    7937:	66 89 e5             	mov    ebp,esp
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1216
	return que->size == 0;
    793a:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    793f:	67 66 8b 40 08       	mov    eax,DWORD PTR [eax+0x8]
    7944:	66 85 c0             	test   eax,eax
    7947:	0f 94 c0             	sete   al
    794a:	66 0f b6 c0          	movzx  eax,al
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1217
}
    794e:	66 5d                	pop    ebp
    7950:	66 c3                	ret    

00007952 <_size>:
size():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1220

int size(struct Queue * que)
{
    7952:	66 55                	push   ebp
    7954:	66 89 e5             	mov    ebp,esp
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1221
	return que->size;
    7957:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    795c:	67 66 8b 40 08       	mov    eax,DWORD PTR [eax+0x8]
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1222
}
    7961:	66 5d                	pop    ebp
    7963:	66 c3                	ret    

00007965 <_init>:
init():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1225

void init(struct Queue * que)
{
    7965:	66 55                	push   ebp
    7967:	66 89 e5             	mov    ebp,esp
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1226
	que->tail = Len - 1;
    796a:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    796f:	67 66 c7 00 13 00 00 	mov    DWORD PTR [eax],0x13
    7976:	00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1227
	que->head = 0;
    7977:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    797c:	67 66 c7 40 04 00 00 	mov    DWORD PTR [eax+0x4],0x0
    7983:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1228
	que->size = 0;
    7985:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    798a:	67 66 c7 40 08 00 00 	mov    DWORD PTR [eax+0x8],0x0
    7991:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1229
}
    7993:	90                   	nop
    7994:	66 5d                	pop    ebp
    7996:	66 c3                	ret    

00007998 <_enqueue>:
enqueue():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1232

void enqueue(struct Queue * que, int ele)
{
    7998:	66 55                	push   ebp
    799a:	66 89 e5             	mov    ebp,esp
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1233
	if (que->size >= Len)
    799d:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    79a2:	67 66 8b 40 08       	mov    eax,DWORD PTR [eax+0x8]
    79a7:	66 83 f8 13          	cmp    eax,0x13
    79ab:	7f 53                	jg     7a00 <_enqueue+0x68>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1235
		return ;
	que->size++;
    79ad:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    79b2:	67 66 8b 40 08       	mov    eax,DWORD PTR [eax+0x8]
    79b7:	67 66 8d 50 01       	lea    edx,[eax+0x1]
    79bc:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    79c1:	67 66 89 50 08       	mov    DWORD PTR [eax+0x8],edx
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1236
	que->tail = (que->tail + 1) % Len;
    79c6:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    79cb:	67 66 8b 00          	mov    eax,DWORD PTR [eax]
    79cf:	66 40                	inc    eax
    79d1:	66 b9 14 00 00 00    	mov    ecx,0x14
    79d7:	66 99                	cdq    
    79d9:	66 f7 f9             	idiv   ecx
    79dc:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    79e1:	67 66 89 10          	mov    DWORD PTR [eax],edx
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1237
	que->array[que->tail] = ele;
    79e5:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    79ea:	67 66 8b 10          	mov    edx,DWORD PTR [eax]
    79ee:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    79f3:	67 66 8b 4d 0c       	mov    ecx,DWORD PTR [ebp+0xc]
    79f8:	67 66 89 4c 90 0c    	mov    DWORD PTR [eax+edx*4+0xc],ecx
    79fe:	eb 01                	jmp    7a01 <_enqueue+0x69>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1234
		return ;
    7a00:	90                   	nop
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1238
}
    7a01:	66 5d                	pop    ebp
    7a03:	66 c3                	ret    

00007a05 <_dequeue>:
dequeue():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1241

void dequeue(struct Queue * que, int * ele)
{
    7a05:	66 55                	push   ebp
    7a07:	66 89 e5             	mov    ebp,esp
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1242
	if (que->size <= 0)
    7a0a:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    7a0f:	67 66 8b 40 08       	mov    eax,DWORD PTR [eax+0x8]
    7a14:	66 85 c0             	test   eax,eax
    7a17:	7e 5a                	jle    7a73 <_dequeue+0x6e>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1244
		return ;
	que->size--;
    7a19:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    7a1e:	67 66 8b 40 08       	mov    eax,DWORD PTR [eax+0x8]
    7a23:	67 66 8d 50 ff       	lea    edx,[eax-0x1]
    7a28:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    7a2d:	67 66 89 50 08       	mov    DWORD PTR [eax+0x8],edx
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1245
	*ele = que->array[que->head];
    7a32:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    7a37:	67 66 8b 50 04       	mov    edx,DWORD PTR [eax+0x4]
    7a3c:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    7a41:	67 66 8b 54 90 0c    	mov    edx,DWORD PTR [eax+edx*4+0xc]
    7a47:	67 66 8b 45 0c       	mov    eax,DWORD PTR [ebp+0xc]
    7a4c:	67 66 89 10          	mov    DWORD PTR [eax],edx
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1246
	que->head = (que->head + 1) % Len;
    7a50:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    7a55:	67 66 8b 40 04       	mov    eax,DWORD PTR [eax+0x4]
    7a5a:	66 40                	inc    eax
    7a5c:	66 b9 14 00 00 00    	mov    ecx,0x14
    7a62:	66 99                	cdq    
    7a64:	66 f7 f9             	idiv   ecx
    7a67:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    7a6c:	67 66 89 50 04       	mov    DWORD PTR [eax+0x4],edx
    7a71:	eb 01                	jmp    7a74 <_dequeue+0x6f>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1243
		return ;
    7a73:	90                   	nop
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1247
}
    7a74:	66 5d                	pop    ebp
    7a76:	66 c3                	ret    

00007a78 <_clearQue>:
clearQue():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1250

void clearQue(struct Queue * que)
{
    7a78:	66 55                	push   ebp
    7a7a:	66 89 e5             	mov    ebp,esp
    7a7d:	66 83 ec 08          	sub    esp,0x8
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1251
	for (int i = 0; i < Len; ++i)
    7a81:	67 66 c7 45 fc 00 00 	mov    DWORD PTR [ebp-0x4],0x0
    7a88:	00 00 
    7a8a:	eb 19                	jmp    7aa5 <_clearQue+0x2d>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1253
	{
		que->array[i] = 0;
    7a8c:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    7a91:	67 66 8b 55 fc       	mov    edx,DWORD PTR [ebp-0x4]
    7a96:	67 66 c7 44 90 0c 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
    7a9d:	00 00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1251
	for (int i = 0; i < Len; ++i)
    7aa0:	67 66 ff 45 fc       	inc    DWORD PTR [ebp-0x4]
    7aa5:	67 66 83 7d fc 13    	cmp    DWORD PTR [ebp-0x4],0x13
    7aab:	7e df                	jle    7a8c <_clearQue+0x14>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1255
	}
	init(que);
    7aad:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    7ab2:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    7ab7:	66 e8 a8 fe ff ff    	call   7965 <_init>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1256
}
    7abd:	90                   	nop
    7abe:	66 c9                	leave  
    7ac0:	66 c3                	ret    

00007ac2 <_delEle>:
delEle():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1259

void delEle(struct Queue * que, int ele)
{
    7ac2:	66 55                	push   ebp
    7ac4:	66 89 e5             	mov    ebp,esp
    7ac7:	66 83 ec 10          	sub    esp,0x10
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1260
	int queSize = size(que);
    7acb:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    7ad0:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    7ad5:	66 e8 77 fe ff ff    	call   7952 <_size>
    7adb:	67 66 89 45 f8       	mov    DWORD PTR [ebp-0x8],eax
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1261
	for (int i = 0; i < queSize; ++i)
    7ae0:	67 66 c7 45 fc 00 00 	mov    DWORD PTR [ebp-0x4],0x0
    7ae7:	00 00 
    7ae9:	eb 44                	jmp    7b2f <_delEle+0x6d>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1263
	{
		dequeue(que, &tmp);
    7aeb:	67 66 c7 44 24 04 e8 	mov    DWORD PTR [esp+0x4],0xe9e8
    7af2:	e9 00 00 
    7af5:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    7afa:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    7aff:	66 e8 00 ff ff ff    	call   7a05 <_dequeue>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1264
		if (tmp != ele)
    7b05:	66 a1 e8 e9          	mov    eax,ds:0xe9e8
    7b09:	67 66 3b 45 0c       	cmp    eax,DWORD PTR [ebp+0xc]
    7b0e:	74 1a                	je     7b2a <_delEle+0x68>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1266
		{
			enqueue(que, tmp);
    7b10:	66 a1 e8 e9          	mov    eax,ds:0xe9e8
    7b14:	67 66 89 44 24 04    	mov    DWORD PTR [esp+0x4],eax
    7b1a:	67 66 8b 45 08       	mov    eax,DWORD PTR [ebp+0x8]
    7b1f:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    7b24:	66 e8 6e fe ff ff    	call   7998 <_enqueue>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1261
	for (int i = 0; i < queSize; ++i)
    7b2a:	67 66 ff 45 fc       	inc    DWORD PTR [ebp-0x4]
    7b2f:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
    7b34:	67 66 3b 45 f8       	cmp    eax,DWORD PTR [ebp-0x8]
    7b39:	7c b0                	jl     7aeb <_delEle+0x29>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1269
		}
	}
}
    7b3b:	90                   	nop
    7b3c:	66 c9                	leave  
    7b3e:	66 c3                	ret    

00007b40 <_int34h>:
int34h():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1275
/////////////////////////////////////


////////// interruptions //////////
void int34h()
{
    7b40:	66 55                	push   ebp
    7b42:	66 89 e5             	mov    ebp,esp
    7b45:	66 83 ec 18          	sub    esp,0x18
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1276
	char * s = "Int 34h Xihuai Wang";
    7b49:	67 66 c7 45 fc e7 80 	mov    DWORD PTR [ebp-0x4],0x80e7
    7b50:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1277
	printSentence(s, 6, 5, strlen(s), purple);
    7b52:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
    7b57:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    7b5c:	66 e8 93 b8 ff ff    	call   33f5 <_strlen>
    7b62:	67 66 c7 44 24 10 0d 	mov    DWORD PTR [esp+0x10],0xd
    7b69:	00 00 00 
    7b6c:	67 66 89 44 24 0c    	mov    DWORD PTR [esp+0xc],eax
    7b72:	67 66 c7 44 24 08 05 	mov    DWORD PTR [esp+0x8],0x5
    7b79:	00 00 00 
    7b7c:	67 66 c7 44 24 04 06 	mov    DWORD PTR [esp+0x4],0x6
    7b83:	00 00 00 
    7b86:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
    7b8b:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    7b90:	66 e8 f0 9c ff ff    	call   1886 <_printSentence>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1278
}
    7b96:	90                   	nop
    7b97:	66 c9                	leave  
    7b99:	66 c3                	ret    

00007b9b <_int35h>:
int35h():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1280
void int35h()
{
    7b9b:	66 55                	push   ebp
    7b9d:	66 89 e5             	mov    ebp,esp
    7ba0:	66 83 ec 18          	sub    esp,0x18
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1281
	char * s = "Int 35h 16337236";
    7ba4:	67 66 c7 45 fc fb 80 	mov    DWORD PTR [ebp-0x4],0x80fb
    7bab:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1282
	printSentence(s, 6, 46, strlen(s), purple);
    7bad:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
    7bb2:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    7bb7:	66 e8 38 b8 ff ff    	call   33f5 <_strlen>
    7bbd:	67 66 c7 44 24 10 0d 	mov    DWORD PTR [esp+0x10],0xd
    7bc4:	00 00 00 
    7bc7:	67 66 89 44 24 0c    	mov    DWORD PTR [esp+0xc],eax
    7bcd:	67 66 c7 44 24 08 2e 	mov    DWORD PTR [esp+0x8],0x2e
    7bd4:	00 00 00 
    7bd7:	67 66 c7 44 24 04 06 	mov    DWORD PTR [esp+0x4],0x6
    7bde:	00 00 00 
    7be1:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
    7be6:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    7beb:	66 e8 95 9c ff ff    	call   1886 <_printSentence>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1283
}
    7bf1:	90                   	nop
    7bf2:	66 c9                	leave  
    7bf4:	66 c3                	ret    

00007bf6 <_int36h>:
int36h():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1285
void int36h()
{
    7bf6:	66 55                	push   ebp
    7bf8:	66 89 e5             	mov    ebp,esp
    7bfb:	66 83 ec 18          	sub    esp,0x18
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1286
	char * s = "Int 34h Class two";
    7bff:	67 66 c7 45 fc 0c 81 	mov    DWORD PTR [ebp-0x4],0x810c
    7c06:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1287
	printSentence(s, 18, 5, strlen(s), purple);
    7c08:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
    7c0d:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    7c12:	66 e8 dd b7 ff ff    	call   33f5 <_strlen>
    7c18:	67 66 c7 44 24 10 0d 	mov    DWORD PTR [esp+0x10],0xd
    7c1f:	00 00 00 
    7c22:	67 66 89 44 24 0c    	mov    DWORD PTR [esp+0xc],eax
    7c28:	67 66 c7 44 24 08 05 	mov    DWORD PTR [esp+0x8],0x5
    7c2f:	00 00 00 
    7c32:	67 66 c7 44 24 04 12 	mov    DWORD PTR [esp+0x4],0x12
    7c39:	00 00 00 
    7c3c:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
    7c41:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    7c46:	66 e8 3a 9c ff ff    	call   1886 <_printSentence>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1288
}
    7c4c:	90                   	nop
    7c4d:	66 c9                	leave  
    7c4f:	66 c3                	ret    

00007c51 <_int37h>:
int37h():
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1290
void int37h()
{
    7c51:	66 55                	push   ebp
    7c53:	66 89 e5             	mov    ebp,esp
    7c56:	66 83 ec 18          	sub    esp,0x18
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1291
	char * s = "Int 34h Grade 2016";
    7c5a:	67 66 c7 45 fc 1e 81 	mov    DWORD PTR [ebp-0x4],0x811e
    7c61:	00 00 
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1292
	printSentence(s, 18, 46, strlen(s), purple);
    7c63:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
    7c68:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    7c6d:	66 e8 82 b7 ff ff    	call   33f5 <_strlen>
    7c73:	67 66 c7 44 24 10 0d 	mov    DWORD PTR [esp+0x10],0xd
    7c7a:	00 00 00 
    7c7d:	67 66 89 44 24 0c    	mov    DWORD PTR [esp+0xc],eax
    7c83:	67 66 c7 44 24 08 2e 	mov    DWORD PTR [esp+0x8],0x2e
    7c8a:	00 00 00 
    7c8d:	67 66 c7 44 24 04 12 	mov    DWORD PTR [esp+0x4],0x12
    7c94:	00 00 00 
    7c97:	67 66 8b 45 fc       	mov    eax,DWORD PTR [ebp-0x4]
    7c9c:	67 66 89 04 24       	mov    DWORD PTR [esp],eax
    7ca1:	66 e8 df 9b ff ff    	call   1886 <_printSentence>
D:\OneDrive\Study\Operating Systems\MyOs\project9\codes/./lib/utilsC.c:1293
}
    7ca7:	90                   	nop
    7ca8:	66 c9                	leave  
    7caa:	66 c3                	ret    

00007cac <_WelcomeSentence>:
    7cac:	44                   	inc    sp
    7cad:	80 00 00             	add    BYTE PTR [bx+si],0x0

00007cb0 <_prompt>:
    7cb0:	83 80 00 00 eb       	add    WORD PTR [bx+si+0x0],0xffeb
    7cb5:	0a 90 90 90          	or     dl,BYTE PTR [bx+si-0x6f70]
    7cb9:	90                   	nop
    7cba:	90                   	nop
    7cbb:	90                   	nop
    7cbc:	90                   	nop
    7cbd:	90                   	nop
    7cbe:	90                   	nop
    7cbf:	90                   	nop
    7cc0:	4f                   	dec    di
    7cc1:	72 69                	jb     7d2c <_prompt+0x7c>
    7cc3:	67 69 6e 00 00 00    	imul   bp,WORD PTR [esi+0x0],0x0
    7cc9:	00 72 65             	add    BYTE PTR [bp+si+0x65],dh
    7ccc:	61                   	popa   
    7ccd:	64 79 00             	fs jns 7cd0 <_prompt+0x20>
    7cd0:	00 00                	add    BYTE PTR [bx+si],al
    7cd2:	00 00                	add    BYTE PTR [bx+si],al
    7cd4:	72 75                	jb     7d4b <_prompt+0x9b>
    7cd6:	6e                   	outs   dx,BYTE PTR ds:[si]
    7cd7:	6e                   	outs   dx,BYTE PTR ds:[si]
    7cd8:	69 6e 67 00 00       	imul   bp,WORD PTR [bp+0x67],0x0
    7cdd:	00 62 6c             	add    BYTE PTR [bp+si+0x6c],ah
    7ce0:	6f                   	outs   dx,WORD PTR ds:[si]
    7ce1:	63 6b 65             	arpl   WORD PTR [bp+di+0x65],bp
    7ce4:	64 00 00             	add    BYTE PTR fs:[bx+si],al
    7ce7:	00 73 75             	add    BYTE PTR [bp+di+0x75],dh
    7cea:	73 70                	jae    7d5c <_prompt+0xac>
    7cec:	65 6e                	outs   dx,BYTE PTR gs:[si]
    7cee:	64 00 00             	add    BYTE PTR fs:[bx+si],al
    7cf1:	00 65 78             	add    BYTE PTR [di+0x78],ah
    7cf4:	69 74 00 00 00       	imul   si,WORD PTR [si+0x0],0x0
    7cf9:	00 00                	add    BYTE PTR [bx+si],al
    7cfb:	00 00                	add    BYTE PTR [bx+si],al
    7cfd:	00 00                	add    BYTE PTR [bx+si],al
	...
